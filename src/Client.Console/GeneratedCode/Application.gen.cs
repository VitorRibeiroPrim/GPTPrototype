//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace Primavera.Lithium.ChatGPT.Client.Console;

#region Code

#region Internal Classes

/// <summary>
/// Defines the base class for the type that implements the application.
/// </summary>
/// <seealso cref="Primavera.Hydrogen.Hosting.ConsoleApplication" />
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
[System.Diagnostics.CodeAnalysis.SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1812:AvoidUninstantiatedInternalClasses", Justification = "Created via dependency injection.")]
internal abstract partial class ApplicationBase : Primavera.Hydrogen.Hosting.ConsoleApplication
{
    #region Code

    #region Private Fields

    private Rest.ChatGPTClient? client;

    #endregion

    #region Protected Properties

    /// <summary>
    /// Gets the configuration.
    /// </summary>
    protected Configuration.ApplicationConfiguration Configuration
    {
        get;
    }

    /// <summary>
    /// Gets the service client.
    /// </summary>
    protected virtual Rest.ChatGPTClient Client
    {
        get
        {
            if (this.client == null)
            {
                this.client = this.GetServiceClient();
            }

            return this.client;
        }
    }

    #endregion

    #region Public Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="ApplicationBase"/> class.
    /// </summary>
    /// <param name="options">The application configuration options.</param>
    public ApplicationBase(Configuration.ApplicationConfiguration options)
    {
        Primavera.Hydrogen.Guard.NotNull(options, nameof(options));

        this.Configuration = options;

        System.Console.OutputEncoding = System.Text.Encoding.UTF8;
    }

    #endregion

    #region Public Methods

    /// <inheritdoc />
    public override async System.Threading.Tasks.Task RunAsync(string[]? args = null, System.Threading.CancellationToken cancellationToken = default)
    {
        this.Console.WriteLine("=======================================");
        this.Console.WriteLine("CHAT GPT SERVICE CONSOLE");
        this.Console.WriteLine("=======================================");

        this.Initialize();

        if (!this.CheckConfiguration())
        {
            return;
        }

        this.SelectEnvironment();

        this.WriteConfiguration();
            
        bool cont = true;
        while (cont)
        {
            this.Console.WriteLine();
            this.Console.WriteLine("========================================");
            this.Console.WriteLine("Main Menu");
            this.WriteConfiguration();
            this.Console.WriteLine();
            this.Console.WriteLine("0. Change Environment");

            this.PrintCustomMenuOptions();

            this.Console.WriteLine("M. Monitoring");
            this.Console.WriteLine("Q. Quit");
            this.Console.Write(">> ");

            System.ConsoleKeyInfo key = this.Console.ReadKey();
            this.Console.WriteLine();

            switch (key.Key)
            {
                case System.ConsoleKey.Q:
                    cont = false;
                    break;
                case System.ConsoleKey.D0:
                case System.ConsoleKey.NumPad0:
                    this.SelectEnvironment();
                    cont = true;
                    break;
                case System.ConsoleKey.M:
                    cont = !await this.ShowMonitoringMenuAsync().ConfigureAwait(false);
                    break;
                default:
                    cont = await this.HandleCustomMenuOptionsAsync(key).ConfigureAwait(false);
                    break;
            }
        }
    }

    #endregion

    #region Protected Methods

    /// <summary>
    /// Creates an instance of the service client.
    /// </summary>
    /// <returns>
    /// The <see cref="Rest.ChatGPTClient"/> instance.
    /// </returns>
    protected virtual Rest.ChatGPTClient GetServiceClient()
    {
        if (this.Configuration.ServiceBaseUri == null)
        {
            throw new System.InvalidOperationException("ServiceBaseUri is missing in configuration");
        }

        this.Console.WriteInformationLine($"Creating the service client for base URI '{this.Configuration.ServiceBaseUri}'...");

        Rest.ChatGPTClientOptions clientOptions = this.GetServiceClientOptions();

        return new Rest.ChatGPTClient(
            new System.Uri(this.Configuration.ServiceBaseUri),
            new Primavera.Hydrogen.Rest.Client.Authentication.NoCredential(),
            clientOptions);
    }

    /// <summary>
    /// Creates an instance of the service client options.
    /// </summary>
    /// <returns>
    /// The <see cref="Rest.ChatGPTClientOptions"/> instance.
    /// </returns>
    /// <remarks>
    /// This method is invoked from <see cref="GetServiceClient"/>, before the new instance is created.
    /// Override this method to customize the service client options before it is created.
    /// </remarks>
    protected virtual Rest.ChatGPTClientOptions GetServiceClientOptions()
    {
        return new Rest.ChatGPTClientOptions();
    }

    /// <summary>
    /// Initializes the service client instance.
    /// </summary>
    /// <param name="client">The service client instance.</param>
    /// <remarks>
    /// This method is invoked from <see cref="GetServiceClient"/>, after the new instance is created.
    /// Override this method to customize the service client options after the service client instance is created.
    /// </remarks>
    protected virtual void InitializeServiceClient(Rest.ChatGPTClient client)
    {
    }

    /// <summary>
    /// Resets the current instance of the service client.
    /// </summary>
    /// <remarks>
    /// Invoke this method to force the service client to be created again.
    /// </remarks>
    protected virtual void ResetServiceClient()
    {
        this.client = null;
    }

    /// <summary>
    /// Prints the custom menu options.
    /// </summary>
    /// <remarks>
    /// This method needs to be overridden to build the application menu.
    /// </remarks>
    protected virtual void PrintCustomMenuOptions()
    {
    }

    /// <summary>
    /// Handles the custom menu options.
    /// </summary>
    /// <param name="key">The key pressed by the user.</param>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task{TResult}"/> that represents the asynchronous operation.
    /// A value indicating whether the application should continue execution.
    /// </returns>
    /// <remarks>
    /// This method needs to be overridden to handle the custom application menu options.
    /// </remarks>
    protected virtual System.Threading.Tasks.Task<bool> HandleCustomMenuOptionsAsync(System.ConsoleKeyInfo key)
    {
        return System.Threading.Tasks.Task.FromResult(true);
    }

    /// <summary>
    /// Writes the specified health result to the console.
    /// </summary>
    /// <param name="result">The health result.</param>
    protected virtual void WriteHealthResult(Primavera.Hydrogen.HealthMonitoring.HealthResult result)
    {
        this.Console.WriteInformationLine("HealthResult:");
        this.Console.WriteInformationLine($"..Status.......: {result.Status}");
        this.Console.WriteInformationLine($"..TotalDuration: {result.TotalDuration}");
        this.Console.WriteInformationLine("..Results......:");
        this.WriteHealthResultResults("....", result.Results);
    }

    /// <summary>
    /// Writes the specified health results to the console.
    /// </summary>
    /// <param name="spacing">spacing.</param>
    /// <param name="results">The health results.</param>
    protected virtual void WriteHealthResultResults(string spacing, System.Collections.Generic.IReadOnlyDictionary<string, Primavera.Hydrogen.HealthMonitoring.HealthResultEntry> results)
    {
        if (results == null)
        {
            this.Console.WriteInformationLine($"{spacing}<null>");
            return;
        }

        if (results.Count == 0)
        {
            this.Console.WriteInformationLine($"{spacing}<empty>");
            return;
        }

        foreach (KeyValuePair<string, Primavera.Hydrogen.HealthMonitoring.HealthResultEntry> result in results)
        {
            this.WriteHealthResultResult(spacing, result);
        }
    }

    /// <summary>
    /// Writes the specified health result to the console.
    /// </summary>
    /// <param name="spacing">spacing.</param>
    /// <param name="result">The health result.</param>
    protected virtual void WriteHealthResultResult(string spacing, System.Collections.Generic.KeyValuePair<string, Primavera.Hydrogen.HealthMonitoring.HealthResultEntry> result)
    {
        this.Console.WriteInformationLine(spacing + "HealthResultEntry:");
        this.Console.WriteInformationLine(spacing + $"..Key........: {result.Key}");
        this.Console.WriteInformationLine(spacing + $"..Status.....: {result.Value.Status}");
        this.Console.WriteInformationLine(spacing + $"..Description: {result.Value.Description}");
        this.Console.WriteInformationLine(spacing + $"..Duration...: {result.Value.Duration}");
    }

    /// <summary>
    /// Writes the specified endpoints to the console.
    /// </summary>
    /// <param name="endpoints">The endpoints.</param>
    protected virtual void WriteEndpoints(System.Collections.Generic.IEnumerable<Primavera.Hydrogen.Rest.Routing.EndpointInfo> endpoints)
    {
        this.Console.WriteInformationLine("Endpoints:");

        foreach (Primavera.Hydrogen.Rest.Routing.EndpointInfo endpoint in endpoints.OrderBy(e => e.RoutePattern).ThenBy(e => e.HttpMethods))
        {
            this.WriteEndpoint("..", endpoint);
        }
    }

    /// <summary>
    /// Writes the specified configuration location to the console.
    /// </summary>
    /// <param name="location">The configuration location.</param>
    protected virtual void WriteConfigurationLocation(Primavera.Hydrogen.Rest.Configuration.ConfigurationLocation location)
    {
        this.Console.WriteInformationLine("ConfigurationLocation:");
        this.Console.WriteInformationLine($"..Location.: {location.Location}");
        this.Console.WriteInformationLine($"..Reference: {location.Reference}");
    }

    /// <summary>
    /// Writes the specified service information to the console.
    /// </summary>
    /// <param name="info">The service information.</param>
    protected virtual void WriteServiceInfo(Primavera.Hydrogen.Rest.Description.ServiceInfo info)
    {
        this.Console.WriteInformationLine("ServiceInfo:");
        this.Console.WriteInformationLine($"..Id.................: {info.Id}");
        this.Console.WriteInformationLine($"..Name...............: {info.Name}");
        this.Console.WriteInformationLine($"..DisplayName........: {info.DisplayName}");
        this.Console.WriteInformationLine($"..Version............: {info.Version}");
        this.Console.WriteInformationLine($"..Build..............: {info.Build}");
        this.Console.WriteInformationLine($"..Copyright..........: {info.Copyright}");
        this.Console.WriteInformationLine($"..Framework..........: {info.Framework}");

        this.Console.WriteInformationLine($"..Host...............:");

        if (info.Host == null)
        {
            this.Console.WriteInformationLine("....<null>");
        }
        else
        {
            this.Console.WriteInformationLine($"....Application: {info.Host.Application}");
            this.Console.WriteInformationLine($"....Environment: {info.Host.Environment}");
        }

        this.Console.WriteInformationLine($"..ApiVersions........:");

        if (info.ApiVersions == null || info.ApiVersions.Count == 0)
        {
            this.Console.WriteInformationLine("....<empty>");
        }
        else
        {
            foreach (string apiVersion in info.ApiVersions)
            {
                this.Console.WriteInformationLine($"....{apiVersion}");
            }
        }

        this.Console.WriteInformationLine($"..ApiScopes..........:");

        if (info.ApiScopes == null || info.ApiScopes.Count == 0)
        {
            this.Console.WriteInformationLine("....<empty>");
        }
        else
        {
            foreach (string apiScope in info.ApiScopes)
            {
                this.Console.WriteInformationLine($"....{apiScope}");
            }
        }

        this.Console.WriteInformationLine($"..Dependencies.......:");

        if (info.Dependencies == null || info.Dependencies.Count == 0)
        {
            this.Console.WriteInformationLine("....<empty>");
        }
        else
        {
            foreach (string dependency in info.Dependencies)
            {
                this.Console.WriteInformationLine($"....{dependency}");
            }
        }

        this.Console.WriteInformationLine($"..ServiceDependencies:");

        if (info.ServiceDependencies == null || info.ServiceDependencies.Count == 0)
        {
            this.Console.WriteInformationLine("....<empty>");
        }
        else
        {
            foreach (string serviceDependency in info.ServiceDependencies)
            {
                this.Console.WriteInformationLine($"....{serviceDependency}");
            }
        }

        this.Console.WriteInformationLine($"..Properties.........:");

        if (info.Properties == null || info.Properties.Count == 0)
        {
            this.Console.WriteInformationLine("....<empty>");
        }
        else
        {
            foreach (System.Collections.Generic.KeyValuePair<string, string?> property in info.Properties)
            {
                this.Console.WriteInformationLine($"....{property.Key}: {property.Value}");
            }
        }
    }

    /// <summary>
    /// Writes the specified endpoint to the console.
    /// </summary>
    /// <param name="spacing">The spacing.</param>
    /// <param name="endpoint">The endpoint.</param>
    protected virtual void WriteEndpoint(string spacing, Primavera.Hydrogen.Rest.Routing.EndpointInfo endpoint)
    {
        this.Console.WriteInformationLine(spacing + "Endpoint:");
        this.Console.WriteInformationLine(spacing + $"..HttpMethods...: {endpoint.HttpMethods}");
        this.Console.WriteInformationLine(spacing + $"..RoutePattern..: {endpoint.RoutePattern}");
        this.Console.WriteInformationLine(spacing + $"..EndpointName..: {endpoint.EndpointName}");
        this.Console.WriteInformationLine(spacing + $"..RouteName.....: {endpoint.RouteName}");
        this.Console.WriteInformationLine(spacing + $"..ControllerName: {endpoint.ControllerName}");
        this.Console.WriteInformationLine(spacing + $"..ActionName....: {endpoint.ActionName}");
        this.Console.WriteInformationLine(spacing + $"..Order.........: {endpoint.Order}");
        this.Console.WriteInformationLine(spacing + $"..DisplayName...: {endpoint.DisplayName}");
        this.Console.WriteInformationLine(spacing + $"..ApiVersions...: {endpoint.ApiVersions}");
        this.Console.WriteInformationLine(spacing + $"..Secured.......: {endpoint.Secured}");
    }

    /// <summary>
    /// Writes the specified exception to the console.
    /// </summary>
    /// <param name="ex">The exception.</param>
    protected virtual void WriteException(System.Exception ex)
    {
        this.Console.WriteErrorLine("An error was raised. See bellow.");
        this.Console.WriteErrorLine(ex);
    }

    /// <summary>
    /// Writes the specified service exception to the console.
    /// </summary>
    /// <param name="ex">The exception.</param>
    /// <param name="writeTitle">A value indicating whether the title should be written.</param>
    protected virtual void WriteRestRequestException(Primavera.Hydrogen.Rest.Client.RestRequestException ex, bool writeTitle = true)
    {
        if (writeTitle)
        {
            this.Console.WriteErrorLine("REST API returned an error. See bellow.");
        }

        this.Console.WriteErrorLine(ex.Message);
        this.WriteRestRequestExceptionError(string.Empty, ex.Error);
        this.WriteRestServiceRequest(ex.Request, true);
        this.WriteRestServiceResponse(ex.Response, true);

        Primavera.Hydrogen.Rest.Client.RestRequestException? innerRestRequestException = ex.InnerException as Primavera.Hydrogen.Rest.Client.RestRequestException;
        if (innerRestRequestException != null)
        {
            this.WriteRestRequestException(innerRestRequestException, false);
        }
        else
        {
            this.WriteRestRequestExceptionInner(ex.InnerException);
        }
    }

    /// <summary>
    /// Writes the specified service error to the console.
    /// </summary>
    /// <param name="spacing">The spacing.</param>
    /// <param name="error">The service error.</param>
    protected virtual void WriteRestRequestExceptionError(string spacing, Primavera.Hydrogen.Rest.RestProblemDetails? error)
    {
        if (error != null)
        {
            this.Console.WriteErrorLine(spacing + $"Code...: '{error.Code}'");
            this.Console.WriteErrorLine(spacing + $"Title..: '{error.Title}'");
            this.Console.WriteErrorLine(spacing + $"Status.: '{error.Status}'");
            this.Console.WriteErrorLine(spacing + $"Type...: '{error.Type}'");

            if (error.Errors != null)
            {
                this.Console.WriteErrorLine(spacing + "Errors.:");

                if (error.Errors.Any())
                {
                    foreach (System.Collections.Generic.KeyValuePair<string, string[]> detail in error.Errors)
                    {
                        this.Console.WriteErrorLine(spacing + $"..{detail.Key}");

                        foreach (string detailDetail in detail.Value)
                        {
                            this.Console.WriteErrorLine(spacing + $"....{detailDetail}");
                        }
                    }
                }
                else
                {
                    this.Console.WriteErrorLine(spacing + "..<empty>");
                }
            }
        }
    }

    /// <summary>
    /// Writes the specified request message to the console.
    /// </summary>
    /// <param name="request">The request message.</param>
    /// <param name="error">A value indicating if the headers are written in the context of an error.</param>
    protected virtual void WriteRestServiceRequest(Primavera.Hydrogen.Rest.Client.RestServiceRequest? request, bool error)
    {
        if (request != null)
        {
            if (error)
            {
                this.Console.WriteErrorLine("Request:");
                this.Console.WriteErrorLine($"..Method...: {request.Method}");
                this.Console.WriteErrorLine($"..URI......: {request.Uri}");
                this.Console.WriteErrorLine($"..RequestId: {request.RequestId}");
            }
            else
            {
                this.Console.WriteInformationLine("Request:");
                this.Console.WriteInformationLine($"..Method...: {request.Method}");
                this.Console.WriteInformationLine($"..URI......: {request.Uri}");
                this.Console.WriteInformationLine($"..RequestId: {request.RequestId}");
            }
                
            this.WriteHeaders(request.Headers, error);
        }
    }

    /// <summary>
    /// Writes the specified response message to the console.
    /// </summary>
    /// <param name="response">The response message.</param>
    /// <param name="error">A value indicating if the response message is written in the context of an error.</param>
    protected virtual void WriteRestServiceResponse(Primavera.Hydrogen.Rest.Client.RestServiceResponse? response, bool error)
    {
        if (response != null)
        {
            if (error)
            {
                this.Console.WriteErrorLine("Response:");
                this.Console.WriteErrorLine($"..StatusCode..: {response.StatusCode}");
                this.Console.WriteErrorLine($"..ReasonPhrase: {response.ReasonPhrase}");
                this.Console.WriteErrorLine($"..RequestId...: {response.RequestId}");

                if (response.Content == null || response.Content.ToArray().Length == 0)
                {
                    this.Console.WriteErrorLine("..Content.....: <empty>");
                }
                else
                {
                    this.Console.WriteErrorLine("..Content.....:");
                    this.WriteBinaryData(response.Content, error);
                }
            }
            else
            {
                this.Console.WriteInformationLine("Response:");
                this.Console.WriteInformationLine($"..StatusCode..: {response.StatusCode}");
                this.Console.WriteInformationLine($"..ReasonPhrase: {response.ReasonPhrase}");
                this.Console.WriteInformationLine($"..RequestId...: {response.RequestId}");
            }

            this.WriteHeaders(response.Headers, error);
        }
    }

    /// <summary>
    /// Writes the specified binary data to the console.
    /// </summary>
    /// <param name="data">The binary data.</param>
    /// <param name="error">A value indicating if the data is written in the context of an error.</param>
    protected virtual void WriteBinaryData(System.BinaryData data, bool error)
    {
        string value = data.ToString();

        try
        {
            System.Text.Json.JsonDocument jsonDocument = System.Text.Json.JsonDocument.Parse(value);

            value = System.Text.Json.JsonSerializer.Serialize(
                jsonDocument, 
                new System.Text.Json.JsonSerializerOptions 
                { 
                    Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
                    WriteIndented = true 
                });
        }
        catch
        {
        }

        if (error)
        {
            this.Console.WriteErrorLine(value);
        }
        else
        {
            this.Console.WriteInformationLine(value);
        }
    }

    /// <summary>
    /// Writes the specified inner exception to the console.
    /// </summary>
    /// <param name="ex">The exception.</param>
    protected virtual void WriteRestRequestExceptionInner(System.Exception? ex)
    {
        if (ex != null)
        {
            this.Console.WriteErrorLine("Inner Exception:");
            this.Console.WriteErrorLine($"..Message: '{ex.Message}'");
        }
    }

    /// <summary>
    /// Writes the specified headers to the console.
    /// </summary>
    /// <param name="headers">The headers.</param>
    /// <param name="error">A value indicating if the headers are written in the context of an error.</param>
    protected virtual void WriteHeaders(Primavera.Hydrogen.Rest.Client.RestServiceRequestHeaders headers, bool error)
    {
        if (error)
        {
            this.Console.WriteErrorLine("..Headers:");
        }
        else
        {
            this.Console.WriteInformationLine("..Headers:");
        }

        foreach (Primavera.Hydrogen.Net.Http.HttpHeader header in headers.OrderBy(i => i.Name))
        {
            if (error)
            {
                this.Console.WriteErrorLine($"....'{header.Name}' = '{header.Value}'");
            }
            else
            {
                this.Console.WriteInformationLine($"....'{header.Name}' = '{header.Value}'");
            }
        }
    }

    /// <summary>
    /// Writes the specified headers to the console.
    /// </summary>
    /// <param name="headers">The headers.</param>
    /// <param name="error">A value indicating if the headers are written in the context of an error.</param>
    protected virtual void WriteHeaders(Primavera.Hydrogen.Rest.Client.RestServiceResponseHeaders headers, bool error)
    {
        if (error)
        {
            this.Console.WriteErrorLine("..Headers:");
        }
        else
        {
            this.Console.WriteInformationLine("..Headers:");
        }

        foreach (Primavera.Hydrogen.Net.Http.HttpHeader header in headers.OrderBy(i => i.Name))
        {
            if (error)
            {
                this.Console.WriteErrorLine($"....'{header.Name}' = '{header.Value}'");
            }
            else
            {
                this.Console.WriteInformationLine($"....'{header.Name}' = '{header.Value}'");
            }
        }
    }

    /// <summary>
    /// Checks the configuration.
    /// </summary>
    protected virtual bool CheckConfiguration()
    {
        if (this.Configuration.Environments == null)
        {
            this.Console.WriteErrorLine("The environments are missing in configuration.");
            this.Console.WriteErrorLine("Please press any key to quit.");
            this.Console.ReadKey();
            return false;
        }

        if (this.Configuration.Environments == null || this.Configuration.Environments.Count == 0)
        {
            this.Console.WriteErrorLine("You need to the specify the address of at least one environment in configuration.");
            this.Console.WriteErrorLine("Please press any key to quit.");
            this.Console.ReadKey();
            return false;
        }

        return true;
    }

    /// <summary>
    /// Initializes the application.
    /// </summary>
    protected virtual void Initialize()
    {
    }

    /// <summary>
    /// Selects the active environment.
    /// </summary>
    protected virtual void SelectEnvironment()
    {
        bool hasLocalDevelopment = this.Configuration.Environments?.ContainsKey("Local") ?? false;
        bool hasDevelopment = this.Configuration.Environments?.ContainsKey("Development") ?? false;
        bool hasStaging = this.Configuration.Environments?.ContainsKey("Staging") ?? false;
        bool hasPreview = this.Configuration.Environments?.ContainsKey("Preview") ?? false;
        bool hasProduction = this.Configuration.Environments?.ContainsKey("Production") ?? false;

        System.Collections.Generic.List<string> selectors = new System.Collections.Generic.List<string>();

        if (hasLocalDevelopment)
        {
            selectors.Add("1 = Local");
        }

        if (hasDevelopment)
        {
            selectors.Add("2 = Development");
        }

        if (hasStaging)
        {
            selectors.Add("3 = Staging");
        }

        if (hasPreview)
        {
            selectors.Add("4 = Preview");
        }

        if (hasProduction)
        {
            selectors.Add("5 = Production");
        }

        this.Console.WriteLine();
        this.Console.Write($"Please select the environment ({string.Join(", ", selectors)}): ");
        System.ConsoleKeyInfo keyEnv = this.Console.ReadKey();
        this.Console.WriteLine();

        switch (keyEnv.Key)
        {
            case System.ConsoleKey.D2:
            case System.ConsoleKey.NumPad2:
                this.Configuration.ServiceBaseUri = this.Configuration.Environments?["Development"].ServiceBaseUri;
                break;
            case System.ConsoleKey.D3:
            case System.ConsoleKey.NumPad3:
                this.Configuration.ServiceBaseUri = this.Configuration.Environments?["Staging"].ServiceBaseUri;
                break;
            case System.ConsoleKey.D4:
            case System.ConsoleKey.NumPad4:
                this.Configuration.ServiceBaseUri = this.Configuration.Environments?["Preview"].ServiceBaseUri;
                break;
            case System.ConsoleKey.D5:
            case System.ConsoleKey.NumPad5:
                this.Configuration.ServiceBaseUri = this.Configuration.Environments?["Production"].ServiceBaseUri;
                break;
            default:
                if (hasLocalDevelopment)
                {
                    this.Configuration.ServiceBaseUri = this.Configuration.Environments?["Local"].ServiceBaseUri;
                }
                else if (hasDevelopment)
                {
                    this.Configuration.ServiceBaseUri = this.Configuration.Environments?["Development"].ServiceBaseUri;
                }
                else if (hasStaging)
                {
                    this.Configuration.ServiceBaseUri = this.Configuration.Environments?["Staging"].ServiceBaseUri;
                }
                else if (hasPreview)
                {
                    this.Configuration.ServiceBaseUri = this.Configuration.Environments?["Preview"].ServiceBaseUri;
                }
                else
                {
                    this.Configuration.ServiceBaseUri = this.Configuration.Environments?["Production"].ServiceBaseUri;
                }

                break;
        }

        this.client = null;

        this.Console.WriteLine();
    }

    /// <summary>
    /// Writes the additional configuration.
    /// </summary>
    protected virtual void WriteAdditionalConfiguration()
    {
    }

    /// <summary>
    /// Writes the configuration.
    /// </summary>
    protected virtual void WriteConfiguration()
    {
        this.Console.WriteLine("=======================================");
        this.Console.WriteLine($"Service......: {this.Configuration.ServiceBaseUri}");


        this.WriteAdditionalConfiguration();
        this.Console.WriteLine("=======================================");
    }

    /// <summary>
    /// Shows the monitoring menu.
    /// </summary>
    /// <returns>
    /// A value indicating whether the user chose to quit the application.
    /// </returns>
    protected virtual async System.Threading.Tasks.Task<bool> ShowMonitoringMenuAsync()
    {
        // Menu

        bool terminate = false;
        bool cont = true;
        while (cont)
        {
            this.Console.WriteLine();
            this.Console.WriteLine("========================================");
            this.Console.WriteLine("Monitoring Menu");
            this.WriteConfiguration();
            this.Console.WriteLine();
            this.Console.WriteLine("1. Probe");
            this.Console.WriteLine("2. Diagnostics");
            this.Console.WriteLine("3. Endpoints");
            this.Console.WriteLine("4. Configuration");
            this.Console.WriteLine("5. Information");
            this.Console.WriteLine("<. Back");
            this.Console.WriteLine("Q. Quit");
            this.Console.Write(">> ");

            System.ConsoleKeyInfo key = this.Console.ReadKey();
            this.Console.WriteLine();

            switch (key.Key)
            {
                case System.ConsoleKey.Q:
                    cont = false;
                    terminate = true;
                    break;
                case System.ConsoleKey.LeftArrow:
                    cont = false;
                    break;
                case System.ConsoleKey.D1:
                case System.ConsoleKey.NumPad1:
                    await this.ProbeAsync().ConfigureAwait(false);
                    break;
                case System.ConsoleKey.D2:
                case System.ConsoleKey.NumPad2:
                    await this.DiagnosticsAsync().ConfigureAwait(false);
                    break;
                case System.ConsoleKey.D3:
                case System.ConsoleKey.NumPad3:
                    await this.EndpointsAsync().ConfigureAwait(false);
                    break;
                case System.ConsoleKey.D4:
                case System.ConsoleKey.NumPad4:
                    await this.ConfigurationAsync().ConfigureAwait(false);
                    break;
                case System.ConsoleKey.D5:
                case System.ConsoleKey.NumPad5:
                    await this.InformationAsync().ConfigureAwait(false);
                    break;
                default:
                    break;
            }
        }

        // Result

        return terminate;
    }

    /// <summary>
    /// Executes the probe endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    protected virtual async System.Threading.Tasks.Task ProbeAsync()
    {
        // Call the REST API

        this.Console.WriteLine();
        this.Console.WriteInformationLine("Calling the REST API...");

        try
        {
            Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.HealthMonitoring.HealthResult> result = await this.Client.Monitoring.ProbeAsync().ConfigureAwait(false);

            this.Console.WriteInformationLine("REST API returned the result. See below.");

            Primavera.Hydrogen.HealthMonitoring.HealthResult healthResult = result.Result;

            this.WriteHealthResult(healthResult);
        }
        catch (Primavera.Hydrogen.Rest.Client.RestRequestException ex)
        {
            this.WriteRestRequestException(ex);
        }
        catch (System.Exception ex)
        {
            this.Console.WriteErrorLine(ex);
        }
    }

    /// <summary>
    /// Executes the diagnosis endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    protected virtual async System.Threading.Tasks.Task DiagnosticsAsync()
    {
        // Call the REST API

        this.Console.WriteLine();
        this.Console.WriteInformationLine("Calling the REST API...");

        try
        {
            Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.HealthMonitoring.HealthResult> result = await this.Client.Monitoring.DiagnosticsAsync().ConfigureAwait(false);

            this.Console.WriteInformationLine("REST API returned the result. See below.");

            Primavera.Hydrogen.HealthMonitoring.HealthResult healthResult = result.Result;

            this.WriteHealthResult(healthResult);
        }
        catch (Primavera.Hydrogen.Rest.Client.RestRequestException ex)
        {
            this.WriteRestRequestException(ex);
        }
        catch (System.Exception ex)
        {
            this.Console.WriteErrorLine(ex);
        }
    }

    /// <summary>
    /// Executes the endpoints analyzer endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    protected virtual async System.Threading.Tasks.Task EndpointsAsync()
    {
        // Call the REST API

        this.Console.WriteLine();
        this.Console.WriteInformationLine("Calling the REST API...");

        try
        {
            Primavera.Hydrogen.Rest.Client.RestServiceResult<System.Collections.Generic.IEnumerable<Primavera.Hydrogen.Rest.Routing.EndpointInfo>> result = await this.Client.Monitoring.EndpointsAsync().ConfigureAwait(false);

            this.Console.WriteInformationLine("REST API returned the result. See below.");

            System.Collections.Generic.IEnumerable<Primavera.Hydrogen.Rest.Routing.EndpointInfo> endpoints = result.Result;

            WriteEndpoints(endpoints);
        }
        catch (Primavera.Hydrogen.Rest.Client.RestRequestException ex)
        {
            this.WriteRestRequestException(ex);
        }
        catch (System.Exception ex)
        {
            this.Console.WriteErrorLine(ex);
        }
    }

    /// <summary>
    /// Executes the configuration analyzer endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    protected virtual async System.Threading.Tasks.Task ConfigurationAsync()
    {
        // Call the REST API

        this.Console.WriteLine();
        this.Console.WriteInformationLine("Calling the REST API...");

        try
        {
            Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.Rest.Configuration.ConfigurationLocation> result = await this.Client.Monitoring.ConfigurationAsync().ConfigureAwait(false);

            this.Console.WriteInformationLine("REST API returned the result. See below.");

            Primavera.Hydrogen.Rest.Configuration.ConfigurationLocation location = result.Result;

            WriteConfigurationLocation(location);
        }
        catch (Primavera.Hydrogen.Rest.Client.RestRequestException ex)
        {
            this.WriteRestRequestException(ex);
        }
        catch (System.Exception ex)
        {
            this.Console.WriteErrorLine(ex);
        }
    }

    /// <summary>
    /// Executes the information endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    protected virtual async System.Threading.Tasks.Task InformationAsync()
    {
        // Call the REST API

        this.Console.WriteLine();
        this.Console.WriteInformationLine("Calling the REST API...");

        try
        {
            Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.Rest.Description.ServiceInfo> result = await this.Client.Monitoring.InformationAsync().ConfigureAwait(false);

            this.Console.WriteInformationLine("REST API returned the result. See below.");

            Primavera.Hydrogen.Rest.Description.ServiceInfo info = result.Result;

            WriteServiceInfo(info);
        }
        catch (Primavera.Hydrogen.Rest.Client.RestRequestException ex)
        {
            this.WriteRestRequestException(ex);
        }
        catch (System.Exception ex)
        {
            this.Console.WriteErrorLine(ex);
        }
    }

    /// <summary>
    /// Gets a required string value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>
    /// The string value specified by the user.
    /// </returns>
    protected virtual string GetValueString(string name, string? defaultValue = null)
    {
        return this.GetValueString(name, true, defaultValue)!;
    }

    /// <summary>
    /// Gets a string value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="required">A value indicating whether the value is required.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <param name="blankToStop">A value indicating whether a blank value equals stopping.</param>
    /// <returns>
    /// The string value specified by the user.
    /// </returns>
    protected virtual string? GetValueString(string name, bool required, string? defaultValue = null, bool blankToStop = false)
    {
        string? value = defaultValue;

        bool cont = false;
        while (!cont)
        {
            if (required)
            {
                if (string.IsNullOrEmpty(defaultValue))
                {
                    this.Console.Write($"Please enter the {name}: ");
                }
                else
                {
                    this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                }
            }
            else
            {
                if (string.IsNullOrEmpty(defaultValue))
                {
                    this.Console.Write($"Please enter the {name} (blank = ignore): ");
                }
                else
                {
                    if (blankToStop)
                    {
                        this.Console.Write($"Please enter the {name} (blank to stop): ");
                    }
                    else
                    {
                        this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
            }

            string? valueStr = this.Console.ReadLine();
            if (!string.IsNullOrEmpty(valueStr))
            {
                value = valueStr;
            }

            if (required)
            {
                cont = !string.IsNullOrEmpty(value);
            }
            else
            {
                cont = true;
            }
        }

        return value;
    }

    /// <summary>
    /// Gets a required boolean value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>
    /// The boolean value specified by the user.
    /// </returns>
    protected virtual bool GetValueBoolean(string name, bool? defaultValue = null)
    {
        return this.GetValueBoolean(name, true, defaultValue)!.Value;
    }

    /// <summary>
    /// Gets a boolean value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="required">A value indicating whether the value is required.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <param name="blankToStop">A value indicating whether a blank value equals stopping.</param>
    /// <returns>
    /// The boolean value specified by the user.
    /// </returns>
    protected virtual bool? GetValueBoolean(string name, bool required, bool? defaultValue = null, bool blankToStop = false)
    {
        bool? value = defaultValue;

        bool cont = false;
        while (!cont)
        {
            if (required)
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name} (y/n): ");
                }
                else
                {
                    string defaultValueStr = defaultValue ?? false ? "y" : "n";
                    this.Console.Write($"Please enter the {name} (y/n) (blank = {defaultValueStr}): ");
                }
            }
            else
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name} (y/n) (blank = ignore): ");
                }
                else
                {
                    if (blankToStop)
                    {
                        this.Console.Write($"Please enter the {name} (y/n) (blank to stop): ");
                    }
                    else
                    {
                        string defaultValueStr = defaultValue ?? false ? "y" : "n";
                        this.Console.Write($"Please enter the {name} (y/n) (blank = {defaultValueStr}): ");
                    }
                }
            }

            string? valueStr = this.Console.ReadLine();
            if (!string.IsNullOrEmpty(valueStr))
            {
                if (valueStr.EqualsNoCase("Y"))
                {
                    value = true;
                }
                else if (valueStr.EqualsNoCase("N"))
                {
                    value = false;
                }
                else
                {
                    value = null;
                }
            }

            if (required)
            {
                cont = value != null;
            }
            else
            {
                cont = true;
            }
        }

        return value;
    }

    /// <summary>
    /// Gets a required integer value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>
    /// The integer value specified by the user.
    /// </returns>
    protected virtual int GetValueInteger(string name, int? defaultValue = null)
    {
        return this.GetValueInteger(name, true, defaultValue)!.Value;
    }

    /// <summary>
    /// Gets an integer value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="required">A value indicating whether the value is required.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <param name="blankToStop">A value indicating whether a blank value equals stopping.</param>
    /// <returns>
    /// The integer value specified by the user.
    /// </returns>
    protected virtual int? GetValueInteger(string name, bool required, int? defaultValue = null, bool blankToStop = false)
    {
        int? value = defaultValue;

        bool cont = false;
        while (!cont)
        {
            if (required)
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name}: ");
                }
                else
                {
                    this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                }
            }
            else
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name} (blank = ignore): ");
                }
                else
                {
                    if (blankToStop)
                    {
                        this.Console.Write($"Please enter the {name} (blank to stop): ");
                    }
                    else
                    {
                        this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
            }

            string? valueStr = this.Console.ReadLine();
            if (!string.IsNullOrEmpty(valueStr))
            {
                if (int.TryParse(valueStr, out int valueInt))
                {
                    value = valueInt;
                }
            }

            if (required)
            {
                cont = value != null;
            }
            else
            {
                cont = true;
            }
        }

        return value;
    }

    /// <summary>
    /// Gets a required long value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>
    /// The long value specified by the user.
    /// </returns>
    protected virtual long GetValueLong(string name, long? defaultValue = null)
    {
        return this.GetValueLong(name, true, defaultValue)!.Value;
    }

    /// <summary>
    /// Gets a long value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="required">A value indicating whether the value is required.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <param name="blankToStop">A value indicating whether a blank value equals stopping.</param>
    /// <returns>
    /// The long value specified by the user.
    /// </returns>
    protected virtual long? GetValueLong(string name, bool required, long? defaultValue = null, bool blankToStop = false)
    {
        long? value = defaultValue;

        bool cont = false;
        while (!cont)
        {
            if (required)
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name}: ");
                }
                else
                {
                    this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                }
            }
            else
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name} (blank = ignore): ");
                }
                else
                {
                    if (blankToStop)
                    {
                        this.Console.Write($"Please enter the {name} (blank to stop): ");
                    }
                    else
                    {
                        this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
            }

            string? valueStr = this.Console.ReadLine();
            if (!string.IsNullOrEmpty(valueStr))
            {
                if (long.TryParse(valueStr, out long valueLong))
                {
                    value = valueLong;
                }
            }

            if (required)
            {
                cont = value != null;
            }
            else
            {
                cont = true;
            }
        }

        return value;
    }

    /// <summary>
    /// Gets a required double value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>
    /// The double value specified by the user.
    /// </returns>
    protected virtual double GetValueDouble(string name, double? defaultValue = null)
    {
        return this.GetValueDouble(name, true, defaultValue)!.Value;
    }

    /// <summary>
    /// Gets a double value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="required">A value indicating whether the value is required.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <param name="blankToStop">A value indicating whether a blank value equals stopping.</param>
    /// <returns>
    /// The double value specified by the user.
    /// </returns>
    protected virtual double? GetValueDouble(string name, bool required, double? defaultValue = null, bool blankToStop = false)
    {
        double? value = defaultValue;

        bool cont = false;
        while (!cont)
        {
            if (required)
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name}: ");
                }
                else
                {
                    this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                }
            }
            else
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name} (blank = ignore): ");
                }
                else
                {
                    if (blankToStop)
                    {
                        this.Console.Write($"Please enter the {name} (blank to stop): ");
                    }
                    else
                    {
                        this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
            }

            string? valueStr = this.Console.ReadLine();
            if (!string.IsNullOrEmpty(valueStr))
            {
                if (double.TryParse(valueStr, out double valueDouble))
                {
                    value = valueDouble;
                }
            }

            if (required)
            {
                cont = value != null;
            }
            else
            {
                cont = true;
            }
        }

        return value;
    }

    /// <summary>
    /// Gets a required decimal value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>
    /// The decimal value specified by the user.
    /// </returns>
    protected virtual decimal GetValueDecimal(string name, decimal? defaultValue = null)
    {
        return this.GetValueDecimal(name, true, defaultValue)!.Value;
    }

    /// <summary>
    /// Gets a decimal value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="required">A value indicating whether the value is required.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <param name="blankToStop">A value indicating whether a blank value equals stopping.</param>
    /// <returns>
    /// The decimal value specified by the user.
    /// </returns>
    protected virtual decimal? GetValueDecimal(string name, bool required, decimal? defaultValue = null, bool blankToStop = false)
    {
        decimal? value = defaultValue;

        bool cont = false;
        while (!cont)
        {
            if (required)
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name}: ");
                }
                else
                {
                    this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                }
            }
            else
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name} (blank = ignore): ");
                }
                else
                {
                    if (blankToStop)
                    {
                        this.Console.Write($"Please enter the {name} (blank to stop): ");
                    }
                    else
                    {
                        this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
            }

            string? valueStr = this.Console.ReadLine();
            if (!string.IsNullOrEmpty(valueStr))
            {
                if (decimal.TryParse(valueStr, out decimal valueDecimal))
                {
                    value = valueDecimal;
                }
            }

            if (required)
            {
                cont = value != null;
            }
            else
            {
                cont = true;
            }
        }

        return value;
    }

    /// <summary>
    /// Gets a required URI value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>
    /// The URL value specified by the user.
    /// </returns>
    protected virtual System.Uri GetValueUri(string name, System.Uri? defaultValue = null)
    {
        return this.GetValueUri(name, true, defaultValue)!;
    }

    /// <summary>
    /// Gets a URI value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="required">A value indicating whether the value is required.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <param name="blankToStop">A value indicating whether a blank value equals stopping.</param>
    /// <returns>
    /// The URL value specified by the user.
    /// </returns>
    protected virtual System.Uri? GetValueUri(string name, bool required, System.Uri? defaultValue = null, bool blankToStop = false)
    {
        System.Uri? value = defaultValue;

        bool cont = false;
        while (!cont)
        {
            if (required)
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name}: ");
                }
                else
                {
                    this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                }
            }
            else
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name} (blank = ignore): ");
                }
                else
                {
                    if (blankToStop)
                    {
                        this.Console.Write($"Please enter the {name} (blank to stop): ");
                    }
                    else
                    {
                        this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
            }

            string? valueStr = this.Console.ReadLine();
            if (!string.IsNullOrEmpty(valueStr))
            {
                if (System.Uri.TryCreate(valueStr, System.UriKind.Absolute, out System.Uri? valueUri))
                {
                    value = valueUri;
                }
            }

            if (required)
            {
                cont = value != null;
            }
            else
            {
                cont = true;
            }
        }

        return value;
    }

    /// <summary>
    /// Gets a required date time value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>
    /// The date time value specified by the user.
    /// </returns>
    protected virtual System.DateTime GetValueDateTime(string name, System.DateTime? defaultValue = null)
    {
        return this.GetValueDateTime(name, true, defaultValue)!.Value;
    }

    /// <summary>
    /// Gets a date time value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="required">A value indicating whether the value is required.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <param name="blankToStop">A value indicating whether a blank value equals stopping.</param>
    /// <returns>
    /// The date time value specified by the user.
    /// </returns>
    protected virtual System.DateTime? GetValueDateTime(string name, bool required, System.DateTime? defaultValue = null, bool blankToStop = false)
    {
        System.DateTime? value = defaultValue;

        bool cont = false;
        while (!cont)
        {
            if (required)
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name}: ");
                }
                else
                {
                    this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                }
            }
            else
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name} (blank = ignore): ");
                }
                else
                {
                    if (blankToStop)
                    {
                        this.Console.Write($"Please enter the {name} (blank to stop): ");
                    }
                    else
                    {
                        this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
            }

            string? valueStr = this.Console.ReadLine();
            if (!string.IsNullOrEmpty(valueStr))
            {
                if (System.DateTime.TryParse(valueStr, out System.DateTime valueDateTime))
                {
                    value = valueDateTime;
                }
            }

            if (required)
            {
                cont = value != null;
            }
            else
            {
                cont = true;
            }
        }

        return value;
    }

    /// <summary>
    /// Gets a required unique identifier value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>
    /// The unique identifier value specified by the user.
    /// </returns>
    protected virtual System.Guid GetValueGuid(string name, System.Guid? defaultValue = null)
    {
        return this.GetValueGuid(name, true, defaultValue)!.Value;
    }

    /// <summary>
    /// Gets a unique identifier value from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="required">A value indicating whether the value is required.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <param name="blankToStop">A value indicating whether a blank value equals stopping.</param>
    /// <returns>
    /// The unique identifier value specified by the user.
    /// </returns>
    protected virtual System.Guid? GetValueGuid(string name, bool required, System.Guid? defaultValue = null, bool blankToStop = false)
    {
        System.Guid? value = defaultValue;

        bool cont = false;
        while (!cont)
        {
            if (required)
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name}: ");
                }
                else
                {
                    this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                }
            }
            else
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name} (blank = ignore): ");
                }
                else
                {
                    if (blankToStop)
                    {
                        this.Console.Write($"Please enter the {name} (blank to stop): ");
                    }
                    else
                    {
                        this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
            }

            string? valueStr = this.Console.ReadLine();
            if (!string.IsNullOrEmpty(valueStr))
            {
                if (System.Guid.TryParse(valueStr, out System.Guid valueGuid))
                {
                    value = valueGuid;
                }
            }

            if (required)
            {
                cont = value != null;
            }
            else
            {
                cont = true;
            }
        }

        return value;
    }

    /// <summary>
    /// Gets a required enumeration value from user input.
    /// </summary>
    /// <typeparam name="TEnum">The type of the enumeration.</typeparam>
    /// <param name="name">The value name.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>
    /// The enumeration value specified by the user.
    /// </returns>
    protected virtual TEnum GetValueEnum<TEnum>(string name, TEnum? defaultValue = null)
        where TEnum : struct
    {
        return this.GetValueEnum(name, true, defaultValue)!.Value;
    }

    /// <summary>
    /// Gets an enumeration value from user input.
    /// </summary>
    /// <typeparam name="TEnum">The type of the enumeration.</typeparam>
    /// <param name="name">The value name.</param>
    /// <param name="required">A value indicating whether the value is required.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <param name="blankToStop">A value indicating whether a blank value equals stopping.</param>
    /// <returns>
    /// The enumeration value specified by the user.
    /// </returns>
    protected virtual TEnum? GetValueEnum<TEnum>(string name, bool required, TEnum? defaultValue = null, bool blankToStop = false)
        where TEnum : struct
    {
        TEnum? value = defaultValue;

        bool cont = false;
        while (!cont)
        {
            if (required)
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name}: ");
                }
                else
                {
                    this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                }
            }
            else
            {
                if (defaultValue == null)
                {
                    this.Console.Write($"Please enter the {name} (blank = ignore): ");
                }
                else
                {
                    if (blankToStop)
                    {
                        this.Console.Write($"Please enter the {name} (blank to stop): ");
                    }
                    else
                    {
                        this.Console.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
            }

            string? valueStr = this.Console.ReadLine();
            if (!string.IsNullOrEmpty(valueStr))
            {
                if (System.Enum.TryParse(valueStr, true, out TEnum valueEnum))
                {
                    value = valueEnum;
                }
            }

            if (required)
            {
                cont = value != null;
            }
            else
            {
                cont = true;
            }
        }

        return value;
    }

    /// <summary>
    /// Gets a list of string values from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="required">A value indicating whether the value is required.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>
    /// The list of string values specified by the user.
    /// </returns>
    protected virtual System.Collections.Generic.IEnumerable<string> GetValuesString(string name, bool required, string? defaultValue = null)
    {
        System.Collections.Generic.List<string> result = new System.Collections.Generic.List<string>();

        bool stop = false;
        bool first = true;

        while (!stop)
        {
            string? value = this.GetValueString(name, required && first, first ? defaultValue : null, true);
            if (!string.IsNullOrEmpty(value))
            {
                result.Add(value);
            }
            else
            {
                stop = true;
            }

            first = false;
        }

        return result;
    }

    /// <summary>
    /// Gets a list of int values from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="required">A value indicating whether the value is required.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>
    /// The list of int values specified by the user.
    /// </returns>
    protected virtual System.Collections.Generic.IEnumerable<int> GetValuesInteger(string name, bool required, int? defaultValue = null)
    {
        System.Collections.Generic.List<int> result = new System.Collections.Generic.List<int>();

        bool stop = false;
        bool first = true;

        while (!stop)
        {
            int? value = this.GetValueInteger(name, required && first, first ? defaultValue : null, true);

            if (value != null)
            {
                result.Add(value.Value);
            }
            else
            {
                stop = true;
            }

            first = false;
        }

        return result;
    }

    /// <summary>
    /// Gets a list of URI values from user input.
    /// </summary>
    /// <param name="name">The value name.</param>
    /// <param name="required">A value indicating whether the value is required.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>
    /// The list of URI values specified by the user.
    /// </returns>
    protected virtual System.Collections.Generic.IEnumerable<System.Uri> GetValuesUri(string name, bool required, System.Uri? defaultValue = null)
    {
        System.Collections.Generic.List<System.Uri> result = new System.Collections.Generic.List<System.Uri>();

        bool stop = false;
        bool first = true;

        while (!stop)
        {
            System.Uri? value = this.GetValueUri(name, required && first, first ? defaultValue : null, true);
            if (value != null)
            {
                result.Add(value);
            }
            else
            {
                stop = true;
            }

            first = false;
        }

        return result;
    }

    /// <summary>
    /// Gets a list of enumeration values from user input.
    /// </summary>
    /// <typeparam name="TEnum">The type of the enumeration.</typeparam>
    /// <param name="name">The value name.</param>
    /// <param name="required">A value indicating whether the value is required.</param>
    /// <param name="defaultValue">The default value.</param>
    /// <returns>
    /// The list of enumeration values specified by the user.
    /// </returns>
    protected virtual System.Collections.Generic.IEnumerable<TEnum> GetValuesEnum<TEnum>(string name, bool required, TEnum? defaultValue = null)
        where TEnum : struct
    {
        System.Collections.Generic.List<TEnum> result = new System.Collections.Generic.List<TEnum>();

        bool stop = false;
        bool first = true;

        while (!stop)
        {
            TEnum? value = this.GetValueEnum<TEnum>(name, required && first, first ? defaultValue : null, true);

            if (value != null)
            {
                result.Add(value.Value);
            }
            else
            {
                stop = true;
            }

            first = false;
        }

        return result;
    }

    /// <summary>
    /// Gets a dictionary of string values from user input.
    /// </summary>
    /// <param name="keyName">The key name.</param>
    /// <param name="valueName">The value name.</param>
    /// <param name="notEmpty">A value indicating whether the result is required to be not empty.</param>
    /// <param name="valueRequired">A value indicating whether the value for each dictionary item is required.</param>
    /// <returns>
    /// The dictionary of string values specified by the user.
    /// </returns>
    protected virtual System.Collections.Generic.IDictionary<string, string?> GetDictionaryString(string keyName, string valueName, bool notEmpty, bool valueRequired)
    {
        System.Collections.Generic.Dictionary<string, string?> result = new System.Collections.Generic.Dictionary<string, string?>(System.StringComparer.OrdinalIgnoreCase);

        bool stop = false;
        bool first = true;

        while (!stop)
        {
            string? key = this.GetValueString(keyName, notEmpty && first, null, first ? !notEmpty : true);
            if (!string.IsNullOrEmpty(key))
            {
                string? value = this.GetValueString(valueName, valueRequired);

                if (result.ContainsKey(key))
                {
                    result[key] = value;
                }
                else
                {
                    result.Add(key, value);
                }
            }
            else
            {
                stop = true;
            }

            first = false;
        }

        return result;
    }

    #endregion

    #endregion
}

/// <summary>
/// Defines the type that implements the application.
/// </summary>
/// <seealso cref="ApplicationBase" />
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1812:AvoidUninstantiatedInternalClasses", Justification = "Created via dependency injection.")]
internal sealed partial class Application : ApplicationBase
{
    #region Code

    #region Public Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="Application"/> class.
    /// </summary>
    /// <param name="options">The application configuration options.</param>
    public Application(Configuration.ApplicationConfiguration options)
        : base(options)
    {
    }

    #endregion

    #endregion
}

#endregion

#endregion
