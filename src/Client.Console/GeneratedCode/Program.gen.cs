//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace Primavera.Lithium.ChatGPT.Client.Console;

#region Code

#region Public Classes

/// <summary>
/// Defines the starting point of the application.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
public partial class Program
{
    #region Code

    #region Private Fields

    private static Program? instance;

    #endregion

    #region Private Properties

    private static Program Instance
    {
        get
        {
            instance ??= new Program();

            return instance;
        }
    }

    #endregion

    #region Private Constructors

    private Program()
    {
    }

    #endregion

    #region Public Methods

    /// <summary>
    /// Executes the application.
    /// </summary>
    /// <param name="args">The command line arguments.</param>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    public static System.Threading.Tasks.Task Main(string[] args)
    {
        Microsoft.Extensions.Hosting.IHostBuilder builder = Primavera.Hydrogen.Hosting.ConsoleHost.CreateDefaultBuilder<Application>(args)
            .ConfigureHostConfiguration(
                builder => Instance.ConfigureHostConfiguration(builder, args))
            .ConfigureAppConfiguration(
                (context, builder) => Instance.ConfigureAppConfiguration(context, builder, args))
            .ConfigureServices(
                (context, services) => Instance.ConfigureServices(context, services, args))
            .ConfigureLogging(
                (context, builder) => Instance.ConfigureLogging(context, builder, args));

        IHost host = builder.Build();

        return host.RunConsoleAsync<Application>(args);
    }

    #endregion

    #region Protected Methods

    /// <summary>
    /// Set up the configuration for the builder itself.
    /// </summary>
    /// <param name="builder">The <see cref="Microsoft.Extensions.Configuration.IConfigurationBuilder"/> instance.</param>
    /// <param name="args">The command line arguments.</param>
    protected virtual void ConfigureHostConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string[] args)
    {
        builder
            .SetBasePath(System.Environment.CurrentDirectory);
        
        builder
            .AddJsonFile("hostsettings.json", optional: true);
        
        builder
            .AddEnvironmentVariables(prefix: "PREFIX_");

        if (args != null)
        {
            builder.AddCommandLine(args);
        }
    }

    /// <summary>
    /// Sets up the configuration for the remainder of the build process and application.
    /// </summary>
    /// <param name="context">The <see cref="Microsoft.Extensions.Hosting.HostBuilderContext"/> instance.</param>
    /// <param name="builder">The <see cref="Microsoft.Extensions.Configuration.IConfigurationBuilder"/> instance.</param>
    /// <param name="args">The command line arguments.</param>
    protected virtual void ConfigureAppConfiguration(Microsoft.Extensions.Hosting.HostBuilderContext context, Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string[] args)
    {
        builder
            .SetBasePath(System.Environment.CurrentDirectory);

        builder
            .AddJsonFile("GeneratedCode/appsettings.gen.json", optional: false, reloadOnChange: true)
            .AddJsonFile("CustomCode/appsettings.json", optional: true, reloadOnChange: true);

        builder
            .AddEnvironmentVariables();

        if (args != null)
        {
            builder
                .AddCommandLine(args);
        }
    }

    /// <summary>
    /// Adds services to the container.
    /// </summary>
    /// <param name="context">The <see cref="Microsoft.Extensions.Hosting.HostBuilderContext"/> instance.</param>
    /// <param name="services">The <see cref="Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.</param>
    /// <param name="args">The command line arguments.</param>
    protected virtual void ConfigureServices(Microsoft.Extensions.Hosting.HostBuilderContext context, Microsoft.Extensions.DependencyInjection.IServiceCollection services, string[] args)
    {
        services
            .AddOptions()
            .Configure<Configuration.ApplicationConfiguration>(context.Configuration.GetSection(nameof(Configuration.ApplicationConfiguration)));

        services
            .AddOptionsSnapshot<Configuration.ApplicationConfiguration>();
    }

    /// <summary>
    /// Adds a delegate for configuring the provided <see cref="Microsoft.Extensions.Logging.ILoggingBuilder"/>.
    /// </summary>
    /// <param name="context">The <see cref="Microsoft.Extensions.Hosting.HostBuilderContext"/> instance.</param>
    /// <param name="builder">The <see cref="Microsoft.Extensions.Logging.ILoggingBuilder"/> instance.</param>
    /// <param name="args">The command line arguments.</param>
    protected virtual void ConfigureLogging(Microsoft.Extensions.Hosting.HostBuilderContext context, Microsoft.Extensions.Logging.ILoggingBuilder builder, string[] args)
    {
        builder
            .ClearProviders();

        builder
            .AddConfiguration(context.Configuration.GetSection("Logging"));

        if (context.HostingEnvironment.IsDevelopment())
        {
            builder
                .AddConsole()
                .AddDebug();
        }
    }

    #endregion

    #endregion
}

#endregion

#endregion
