<#+

// *** GetAppSettings

public IList<AppSettingSpec> GetAppSettings(ServiceModel model)
{
    // Standard settings

    IList<AppSettingSpec> standard = new List<AppSettingSpec>();

    // ... Logging

    standard.Add(
        new AppSettingSpec(
            "Logging:Debug:LogLevel:Default", 
            "The default log level for the Debug provider.", 
            false, 
            new AppSettingValueSpec(
                "Information", 
                "Warning")));
    
    standard.Add(
        new AppSettingSpec(
            "Logging:Console:LogLevel:Default", 
            "The default log level for the Console provider.", 
            false, 
            new AppSettingValueSpec(
                "Information", 
                "Warning")));
    
    standard.Add(
        new AppSettingSpec(
            "Logging:ApplicationInsights:LogLevel:Default", 
            "The default log level for the Application Insights provider.", 
            false, 
            new AppSettingValueSpec(
                "Information", 
                "Information")));

    // ... Host configuration

    if (model.AuthorizationMode.IsOn())
    {
        standard.Add(
            new AppSettingSpec(
                "HostConfiguration:IdentityServerBaseUri", 
                "The Identity Server base address.", 
                true, 
                true, 
                new AppSettingValueSpec(
                    SdkConstants.KnownServices.IdentityServerStaging, 
                    SdkConstants.KnownServices.IdentityServerStaging, 
                    SdkConstants.KnownServices.IdentityServerProduction)));
    }

    standard.Add(
        new AppSettingSpec(
            "HostConfiguration:ServiceCatalogServiceBaseUri", 
            "The Service Catalog base address.", 
            true, 
            true, 
            new AppSettingValueSpec(
                SdkConstants.KnownServices.ServiceCatalogStaging, 
                SdkConstants.KnownServices.ServiceCatalogStaging, 
                SdkConstants.KnownServices.ServiceCatalogProduction)));

    foreach (ServiceDependency serviceDependency in model.ServiceDependencies.Where(s => !string.IsNullOrEmpty(s.Service)).OrderBy(s => s.Service))
    {
        ServiceDescriptionData serviceInfo = ServiceCatalogServiceProxy.GetServiceByName(serviceDependency.Service);

        string st = UriHelper.TrimEndSeparator(serviceInfo?.ServerEnvironments?.Staging?.AbsoluteUri) ?? "???";
        string pd = UriHelper.TrimEndSeparator(serviceInfo?.ServerEnvironments?.Production?.AbsoluteUri) ?? "???";

        string name = serviceInfo?.Name ?? serviceDependency.Service;

        AppSettingValueSpec value = new AppSettingValueSpec(st, st, pd);

        standard.Add(
            new AppSettingSpec(
                "HostConfiguration:{0}ServiceBaseUri".Format(name), 
                "The {0} base address.".Format(name), 
                true, 
                true,
                value));
    }

    if (model.AuthorizationMode.IsOn())
    {
        // Client credentials

        OAuthClient oauthClient = model.OAuthClients.FirstOrDefault(i => i.GrantType == OAuthGrantType.ClientCredentials);
        if (oauthClient != null)
        {
            standard.Add(
                new AppSettingSpec(
                    "HostConfiguration:Authorization:Credentials:ClientCredentials:ClientId", 
                    "The client identifier used for authorization with the client credentials flow.", 
                    false, 
                    new AppSettingValueSpec(
                        oauthClient.Name)));
            
            standard.Add(
                new AppSettingSpec(
                    "HostConfiguration:Authorization:Credentials:ClientCredentials:ClientSecret", 
                    "The client secret used for authorization with the client credentials flow.", 
                    false, 
                    new AppSettingValueSpec(
                        oauthClient.Secret)));
        }

        // Hybrid

        oauthClient = model.OAuthClients.FirstOrDefault(i => i.GrantType == OAuthGrantType.Hybrid);
        if (oauthClient != null)
        {
            standard.Add(
                new AppSettingSpec(
                    "HostConfiguration:Authorization:Credentials:Hybrid:ClientId", 
                    "The client identifier used for authorization with the hybrid flow.", 
                    false, 
                    new AppSettingValueSpec(
                        oauthClient.Name)));
            
            standard.Add(
                new AppSettingSpec(
                    "HostConfiguration:Authorization:Credentials:Hybrid:ClientSecret", 
                    "The client secret used for authorization with the hybrid flow.", 
                    false, 
                    new AppSettingValueSpec(
                        oauthClient.Secret)));
        }

        // Authorization code

        oauthClient = model.OAuthClients.FirstOrDefault(i => i.GrantType == OAuthGrantType.AuthorizationCode);
        if (oauthClient != null)
        {
            standard.Add(
                new AppSettingSpec(
                    "HostConfiguration:Authorization:Credentials:AuthorizationCode:ClientId", 
                    "The client identifier used for authorization with the authorization code flow.", 
                    false, 
                    new AppSettingValueSpec(
                        oauthClient.Name)));
            
            standard.Add(
                new AppSettingSpec(
                    "HostConfiguration:Authorization:Credentials:AuthorizationCode:ClientSecret", 
                    "The client secret used for authorization with the authorization code flow.", 
                    false, 
                    new AppSettingValueSpec(
                        oauthClient.Secret)));
        }

        // Authorization code with PKCE

        oauthClient = model.OAuthClients.FirstOrDefault(i => i.GrantType == OAuthGrantType.AuthorizationCodeWithPkce);
        if (oauthClient != null)
        {
            standard.Add(
                new AppSettingSpec(
                    "HostConfiguration:Authorization:Credentials:AuthorizationCodeWithPkce:ClientId", 
                    "The client identifier used for authorization with the authorization code with PKCE flow.", 
                    false, 
                    new AppSettingValueSpec(
                        oauthClient.Name)));
            
            standard.Add(
                new AppSettingSpec(
                    "HostConfiguration:Authorization:Credentials:AuthorizationCodeWithPkce:ClientSecret", 
                    "The client secret used for authorization with the authorization code with PKCE flow.", 
                    false, 
                    new AppSettingValueSpec(
                        oauthClient.Secret)));
        }
    }

    // ... HttpTelemetry

    standard.Add(
        new AppSettingSpec(
            "HttpTelemetryOptions:Enabled", 
            "Indicates whether HTTP telemetry is enabled.", 
            false, 
            new AppSettingValueSpec(
                "Enabled")));
    standard.Add(
        new AppSettingSpec(
            "HttpTelemetryOptions:LogLevel", 
            "The log level used by the HTTP Telemetry middleware.", 
            false, 
            new AppSettingValueSpec(
                "Information")));
    standard.Add(
        new AppSettingSpec(
            "HttpTelemetryOptions:Rules:*:Enabled", 
            "Indicates whether telemetry should be collected for this path.", 
            false, 
            new AppSettingValueSpec(
                "Enabled")));
    standard.Add(
        new AppSettingSpec(
            "HttpTelemetryOptions:Rules:*:RequestBody", 
            "Indicates whether the request body should be included in the telemetry collected.", 
            false, 
            new AppSettingValueSpec(
                "Enabled", "Disabled")));
    standard.Add(
        new AppSettingSpec(
            "HttpTelemetryOptions:Rules:*:ResponseBody", 
            "Indicates whether the response body should be included in the telemetry collected.", 
            false, 
            new AppSettingValueSpec(
                "Disabled", "Disabled")));
    standard.Add(
        new AppSettingSpec(
            "HttpTelemetryOptions:Rules:/.monitoring/:Enabled", 
            "Indicates whether telemetry should be collected for this path.", 
            false, 
            new AppSettingValueSpec(
                "Enabled")));
    standard.Add(
        new AppSettingSpec(
            "HttpTelemetryOptions:Rules:/.monitoring/:RequestBody", 
            "Indicates whether the request body should be included in the telemetry collected.", 
            false, 
            new AppSettingValueSpec(
                "Disabled")));
    standard.Add(
        new AppSettingSpec(
            "HttpTelemetryOptions:Rules:/.monitoring/:ResponseBody", 
            "Indicates whether the response body should be included in the telemetry collected.", 
            false, 
            new AppSettingValueSpec(
                "FailuresOnly")));

    // ... Telemetry

    standard.Add(new AppSettingSpec("AzureInsightsTelemetryOptions:Enabled", "Indicates whether telemetry on Azure Application Insights is enabled.", false, new AppSettingValueSpec(true)));
    standard.Add(new AppSettingSpec("AzureInsightsTelemetryOptions:IgnoreErrors", "Indicates whether errors while recording telemetry should be ignored.", false, new AppSettingValueSpec(true)));
    standard.Add(new AppSettingSpec("AzureInsightsTelemetryOptions:DeveloperMode", "Indicates whether the developer mode is enabled. When enabled, telemetry records are dispatched faster.", false, new AppSettingValueSpec(true, false)));
    standard.Add(new AppSettingSpec("AzureInsightsTelemetryOptions:EnableAdaptiveSampling", "Indicates whether adaptive sampling is enabled.", false, new AppSettingValueSpec(false)));
    standard.Add(new AppSettingSpec("AzureInsightsTelemetryOptions:DefaultProperties:Lithium-Service", "The default property that identifies the Lithium service.", false, new AppSettingValueSpec(model.Name)));
    standard.Add(new AppSettingSpec("AzureInsightsTelemetryOptions:InstrumentationKey", "The Azure Application Insights instrumentation key.", true));
    
    standard.Add(
        new AppSettingSpec(
            "AzureInsightsTelemetryOptions:ExceptionTracking:DetectHttpRequestsAborted",
            "Indicates whether exceptions resulting from HTTP request connections being aborted (client disconnecting) should be detected.", 
            false, 
            new AppSettingValueSpec(true)));

    standard.Add(
        new AppSettingSpec(
            "AzureInsightsTelemetryOptions:RequestTracking:IgnoreAvailabilityTestsRequests",
            "Indicates whether requests to availability endpoints should be ignored in telemetry.", 
            false, 
            new AppSettingValueSpec(true)));

    standard.Add(
        new AppSettingSpec(
            "AzureInsightsTelemetryOptions:RequestTracking:IgnoreNotFoundPaths:0", 
            "The request paths that should be ignored (not collected) if they return HttpStatusCode.NotFound.", 
            false, 
            new AppSettingValueSpec("/api/")));

    standard.Add(
        new AppSettingSpec(
            "AzureInsightsTelemetryOptions:RequestTracking:IgnoreNotFoundPaths:1", 
            "The request paths that should be ignored (not collected) if they return HttpStatusCode.NotFound.", 
            false, 
            new AppSettingValueSpec("/admin/functions")));

    standard.Add(
        new AppSettingSpec(
            "AzureInsightsTelemetryOptions:RequestTracking:IgnoreConflictPaths:0", 
            "The request paths that should be ignored (not collected) if they return HttpStatusCode.Conflict.", 
            false, 
            new AppSettingValueSpec("/api/")));

    int i = 0;
    int j = 0;

    if (model.Dependencies.Any(d => d.Kind == DependencyKind.TableStorage))
    {
        standard.Add(
            new AppSettingSpec(
                $"AzureInsightsTelemetryOptions:DependencyTracking:IgnoreNotFoundCommands:{i}", 
                "The commands that should be ignored (not collected) if they return HttpStatusCode.NotFound.", 
                false, 
                new AppSettingValueSpec("table.core.windows.net/")));

        standard.Add(
            new AppSettingSpec(
                $"AzureInsightsTelemetryOptions:DependencyTracking:IgnoreConflictCommands:{j}", 
                "The commands that should be ignored (not collected) if they return HttpStatusCode.Conflict.", 
                false, 
                new AppSettingValueSpec("table.core.windows.net/")));

        i++;
        j++;
    }

    if (model.Dependencies.Any(d => d.Kind == DependencyKind.BlobStorage))
    {
        standard.Add(
            new AppSettingSpec(
                $"AzureInsightsTelemetryOptions:DependencyTracking:IgnoreNotFoundCommands:{i}", 
                "The commands that should be ignored (not collected) if they return HttpStatusCode.NotFound.", 
                false, 
                new AppSettingValueSpec("blob.core.windows.net/")));

        standard.Add(
            new AppSettingSpec(
                $"AzureInsightsTelemetryOptions:DependencyTracking:IgnoreConflictCommands:{j}", 
                "The commands that should be ignored (not collected) if they return HttpStatusCode.Conflict.", 
                false, 
                new AppSettingValueSpec("blob.core.windows.net/")));

        i++;
        j++;
    }
    
    // ... Secrets storage

    if (model.Dependencies.Any(d => d.Kind == DependencyKind.SecretsStorage))
    {
        standard.Add(
            new AppSettingSpec(
                "AzureKeyVaultSecretsStorageOptions:ServiceUri", 
                "The service URI that should be used to connect to the service.", 
                true, 
                new AppSettingValueSpec()));

        standard.Add(
            new AppSettingSpec(
                "AzureKeyVaultSecretsStorageOptions:Credentials:ManagedIdentity:Enabled", 
                "Indicates whether authorization with Azure Managed Identity is enabled.", 
                true, 
                new AppSettingValueSpec(false, true, true)));

        standard.Add(
            new AppSettingSpec(
                "AzureKeyVaultSecretsStorageOptions:Credentials:VisualStudio:Enabled", 
                "Indicates whether authorization with Visual Studio credentials is enabled.", 
                true, 
                new AppSettingValueSpec(true, false, false)));
    
        standard.Add(
            new AppSettingSpec(
                "AzureKeyVaultSecretsStorageOptions:Credentials:ClientSecret:Enabled", 
                "Indicates whether authorization with client credentials is enabled.", 
                true, 
                new AppSettingValueSpec(false, false, false)));
    }

    // ... Blob storage

    if (model.Dependencies.Any(d => d.Kind == DependencyKind.BlobStorage))
    {
        standard.Add(
            new AppSettingSpec(
                "AzureBlobStorageOptions:ConnectionString", 
                "The connection string that should be used to connect to the service (when set, ServiceUri should be null).", 
                true, 
                new AppSettingValueSpec())
            {
                Secret = true
            });

        standard.Add(
            new AppSettingSpec(
                "AzureBlobStorageOptions:ServiceUri", 
                "The service URI that should be used to connect to the service (when set, ConnectionString should be null and credential options should be set).", 
                true, 
                new AppSettingValueSpec()));

        standard.Add(
            new AppSettingSpec(
                "AzureBlobStorageOptions:Credentials:ManagedIdentity:Enabled", 
                "Indicates whether authorization with Azure Managed Identity is enabled. Meaningful only if ServiceUri is set.", 
                true, 
                new AppSettingValueSpec(false, true, true)));

        standard.Add(
            new AppSettingSpec(
                "AzureBlobStorageOptions:Credentials:VisualStudio:Enabled", 
                "Indicates whether authorization with Visual Studio credentials is enabled. Meaningful only if ServiceUri is set.", 
                true, 
                new AppSettingValueSpec(true, false, false)));
    
        standard.Add(
            new AppSettingSpec(
                "AzureBlobStorageOptions:Credentials:ClientSecret:Enabled", 
                "Indicates whether authorization with client credentials is enabled. Meaningful only if ServiceUri is set.", 
                true, 
                new AppSettingValueSpec(false, false, false)));
    }

    // ... Table storage

    if (model.Dependencies.Any(d => d.Kind == DependencyKind.TableStorage))
    {
        standard.Add(
            new AppSettingSpec(
                "AzureTableStorageOptions:ConnectionString", 
                "The connection string that should be used to connect to the service (when set, ServiceUri should be null).", 
                true, 
                new AppSettingValueSpec())
            {
                Secret = true
            });

        standard.Add(
            new AppSettingSpec(
                "AzureTableStorageOptions:ServiceUri", 
                "The service URI that should be used to connect to the service (when set, ConnectionString should be null and credential options should be set).", 
                true, 
                new AppSettingValueSpec()));

        standard.Add(
            new AppSettingSpec(
                "AzureTableStorageOptions:Credentials:ManagedIdentity:Enabled", 
                "Indicates whether authorization with Azure Managed Identity is enabled. Meaningful only if ServiceUri is set.", 
                true, 
                new AppSettingValueSpec(false, true, true)));

        standard.Add(
            new AppSettingSpec(
                "AzureTableStorageOptions:Credentials:VisualStudio:Enabled", 
                "Indicates whether authorization with Visual Studio credentials is enabled. Meaningful only if ServiceUri is set.", 
                true, 
                new AppSettingValueSpec(true, false, false)));
    
        standard.Add(
            new AppSettingSpec(
                "AzureTableStorageOptions:Credentials:ClientSecret:Enabled", 
                "Indicates whether authorization with client credentials is enabled. Meaningful only if ServiceUri is set.", 
                true, 
                new AppSettingValueSpec(false, false, false)));
    }

    // ... Search

    if (model.Dependencies.Any(d => d.Kind == DependencyKind.Search))
    {
        standard.Add(
            new AppSettingSpec("AzureSearchOptions:ServiceUri", "The URI of the Azure Search Service that should be used.", true));
        
        standard.Add(
            new AppSettingSpec("AzureSearchOptions:Credentials:Key:Enabled", "A value indicating that key credentials should be to connect to the Azure Search Service.", false, new AppSettingValueSpec(true)));
        
        standard.Add(
            new AppSettingSpec("AzureSearchOptions:Credentials:Key:Key", "The API key that should be used to connect to the Azure Search Service.", true)
            {
                Secret = true
            });
    }

    // ... Distributed cache

    if (model.Dependencies.Any(d => d.Kind == DependencyKind.DistributedCache))
    {
        standard.Add(
            new AppSettingSpec("RedisCacheOptions:ConnectionString", "The connection string for the REDIS cache instance.", true)
            {
                Secret = true
            });
        
        standard.Add(new AppSettingSpec("RedisCacheOptions:InstanceName", "The name of the REDIS cache instance that should be used.", false));
        standard.Add(new AppSettingSpec("ResilientCacheOptions:MaxRetries", "The maximum number of times that operations on the REDIS cache should be retried.", false, new AppSettingValueSpec(2)));
        standard.Add(new AppSettingSpec("ResilientCacheOptions:MinRetryBackoff", "The minimum back-off time between retries on the REDIS cache.", false, new AppSettingValueSpec("00:00:01")));
    }

    // ... Data protection

    if (model.Dependencies.Any(d => d.Kind == DependencyKind.DataProtection))
    {
        string applicationName = "lithium-{0}".Format(model.Name.Transform().ToLowerCase());

        standard.Add(new AppSettingSpec("AzureBlobStorageDataProtectionOptions:ApplicationName", "The application name that should be used by the Data Protection service.", false, new AppSettingValueSpec(applicationName)));
        standard.Add(new AppSettingSpec("AzureBlobStorageDataProtectionOptions:UseBlobStorage", "Indicates whether Blob Storage should be used to store the Data Protection keys.", false, new AppSettingValueSpec(false, true)));
    }

    // ... Message bus

    if (model.Dependencies.Any(d => d.Kind == DependencyKind.MessageBus))
    {
        standard.Add(
            new AppSettingSpec(
                "AzureServiceBusMessageBusOptions:ConnectionString", 
                "The connection string that should be used to connect to the service (when set, ServiceNamespace should be null).",
                true, 
                new AppSettingValueSpec())
            {
                Secret = true
            });
    
        standard.Add(
            new AppSettingSpec(
                "AzureServiceBusMessageBusOptions:ServiceNamespace", 
                "The service namespace that should be used to connect to the service (when set, ConnectionString should be null and credential options should be set).", 
                true, 
                new AppSettingValueSpec()));

        standard.Add(
            new AppSettingSpec(
                "AzureServiceBusMessageBusOptions:Credentials:ManagedIdentity:Enabled", 
                "Indicates whether authorization with Azure Managed Identity is enabled. Meaningful only if ServiceUri is set.", 
                true, 
                new AppSettingValueSpec(false, true, true)));

        standard.Add(
            new AppSettingSpec(
                "AzureServiceBusMessageBusOptions:Credentials:VisualStudio:Enabled", 
                "Indicates whether authorization with Visual Studio credentials is enabled. Meaningful only if ServiceUri is set.", 
                true, 
                new AppSettingValueSpec(true, false, false)));
    
        standard.Add(
            new AppSettingSpec(
                "AzureServiceBusMessageBusOptions:Credentials:ClientSecret:Enabled", 
                "Indicates whether authorization with client credentials is enabled. Meaningful only if ServiceUri is set.", 
                true, 
                new AppSettingValueSpec(false)));
    }

    // ... Multi-model database

    if (model.Dependencies.Any(d => d.Kind == DependencyKind.MultiModelDatabase))
    {
        standard.Add(
            new AppSettingSpec("CosmosDbMultiModelDatabaseOptions:ConnectionString", "The connection string used by the CosmosDB service.", true)
            {
                Secret = true
            });
    }

    // ... Taskbox

    if (model.Dependencies.Any(d => d.Kind == DependencyKind.Taskbox))
    {
        standard.Add(
            new AppSettingSpec(
                "TaskboxOptions:Cluster:Store:ConnectionString", 
                "The connection string that should be used to connect to the CosmosDb service used by the taskbox cluster store.", 
                true, 
                new AppSettingValueSpec())
            {
                Secret = true
            });

        standard.Add(
            new AppSettingSpec(
                "TaskboxOptions:Cluster:Store:DatabaseName", 
                "The name of the CosmosDb database that will be use to store the taskbox cluster data.",
                false,
                new AppSettingValueSpec("lithium")));

        standard.Add(
            new AppSettingSpec(
                "TaskboxOptions:Cluster:Store:ContainerName", 
                "The name of the CosmosDb container that will be use to store the taskbox cluster data.",
                false,
                new AppSettingValueSpec("Taskbox-Cluster")));

        standard.Add(
            new AppSettingSpec(
                "TaskboxOptions:Instance:AutoStart", 
                "A value indicating whether the taskbox instance should be automatically started the first time it is invoked.",
                false,
                new AppSettingValueSpec(true)));
    }

    // ... Webhooks

    if (model.Webhooks.Any())
    {
        standard.Add(new AppSettingSpec("WebhooksOptions:ApplicationName", "The name of the application that provides the webhooks.", false));
        standard.Add(new AppSettingSpec("WebhooksOptions:EventsSupported", "The webhooks events supported by the application.", false));
        standard.Add(new AppSettingSpec("WebhooksOptions:CallbackTimeout", "The timeout when invoking webhooks callback actions.", false));
        standard.Add(new AppSettingSpec("WebhooksOptions:CallbackMaxRetries", "The maximum number of times the callback action will be invoked before the webhook subscription is inactivated.", false));
    }

    return standard;
}

private IList<AppSettingSpec> GetAppSettingsCustom(ServiceModel model)
{
    // Custom settings

    IList<AppSettingSpec> custom = new List<AppSettingSpec>();

    // ... Host configuration (custom)

    ConfigurationModelType hostConfigurationModel = model.ConfigurationModels.FirstOrDefault(i => i.Name.EqualsNoCase("HostConfiguration"));

    if (hostConfigurationModel != null)
    {
        custom.AddRange(
            this.GetAppSettingsCustom(hostConfigurationModel, "HostConfiguration:"));
    }

    // Result

    return custom;
}

private IList<AppSettingSpec> GetAppSettingsCustom(ConfigurationModelType model, string prefix)
{
    IList<AppSettingSpec> custom = new List<AppSettingSpec>();

    IEnumerable<ConfigurationModelTypeProperty> properties = model.ChildProperties
        .Where(i => i.Kind != PropertyKind.Calculated)
        .OrderBy(i => i.Name);

    foreach (ConfigurationModelTypeProperty property in properties)
    {
        if (property is ConfigurationModelTypeScalarProperty scalarProperty)
        {
            AppSettingSpec spec = new AppSettingSpec()
            {
                Name = $"{prefix}{scalarProperty.Name}",
                Description = scalarProperty.Summary,
                Global = scalarProperty.IsGlobal,
                Secret = scalarProperty.IsSecret,
                AlwaysOverride = scalarProperty.AlwaysOverride
            };

            custom.Add(spec);
        }
        else if (property is ConfigurationModelTypeConfigurationModelProperty configurationModelProperty)
        {
            if (configurationModelProperty.ReferencedConfigurationModel != null)
            {
                custom.AddRange(
                    this.GetAppSettingsCustom(configurationModelProperty.ReferencedConfigurationModel, $"{prefix}{property.Name}:"));
            }
        }
    }

    return custom;
}

#>