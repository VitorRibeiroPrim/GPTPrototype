//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

// Ignore Spelling: App
// Ignore Spelling: Lithium
// Ignore Spelling: Chat Gpt Service

using Primavera.Hydrogen.AspNetCore.Configuration;
using Primavera.Hydrogen.AspNetCore.Http.Telemetry;
using Primavera.Hydrogen.AspNetCore.Mvc;
using Primavera.Hydrogen.AspNetCore.Routing;
using Primavera.Hydrogen.Configuration;
using Primavera.Hydrogen.Reflection;
using Primavera.Hydrogen.Services.Extensions.ServiceCatalog;
using Primavera.Hydrogen.Telemetry.Azure;
using Westwind.AspNetCore.Markdown;

namespace Primavera.Lithium.ChatGPT.Server.Host;

#region Code

#region Public Classes

/// <summary>
/// Defines the base class for the application initialization logic.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
public abstract partial class StartupBase
{
    #region Code

    #region Protected Properties

    /// <summary>
    /// Gets the current environment.
    /// </summary>
    protected Microsoft.Extensions.Hosting.IHostEnvironment CurrentEnvironment
    {
        get;
        private set;
    }

    /// <summary>
    /// Gets the current configuration.
    /// </summary>
    protected Microsoft.Extensions.Configuration.IConfiguration Configuration
    {
        get;
        private set;
    }

    /// <summary>
    /// Gets a value indicating whether development settings should be used regardless of the current environment. The default value is false.
    /// </summary>
    protected virtual bool UseDevelopmentSettings => false;

    /// <summary>
    /// Gets the logger instance.
    /// </summary>
    /// <remarks>
    /// This instance is only initialized when Configure() starts.
    /// </remarks>
    protected Microsoft.Extensions.Logging.ILogger? Logger
    {
        get;
        private set;
    }

    /// <summary>
    /// Gets the error route.
    /// </summary>
    protected virtual string ErrorRoute => Common.Constants.Controllers.Home.Routes.Error;

    #endregion

    #region Protected Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="StartupBase" /> class.
    /// </summary>
    /// <param name="env">The current host environment.</param>
    /// <param name="configuration">The current configuration.</param>
    protected StartupBase(Microsoft.Extensions.Hosting.IHostEnvironment env, Microsoft.Extensions.Configuration.IConfiguration configuration)
    {
        this.CurrentEnvironment = env;
        this.Configuration = configuration;
    }

    #endregion

    #region Public Methods

    /// <summary>
    /// Called by the runtime when the application starts to allow the application to configure its services.
    /// </summary>
    /// <param name="services">The services collection.</param>
    public virtual void ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        // Configuration

        Common.Configuration.HostConfiguration hostConfiguration = this.AddConfiguration(services);

        this.ValidateConfiguration(hostConfiguration);

        // Dependencies

        this.AddDependencies(services, hostConfiguration);

        // Service dependencies

        this.AddServiceDependencies(services, hostConfiguration);

        // Cookie policy

        this.AddCookiePolicy(services, hostConfiguration);

        // HTTP telemetry

        this.AddHttpTelemetry(services, hostConfiguration);

        // MVC

        Microsoft.Extensions.DependencyInjection.IMvcBuilder mvcBuilder = this.AddMvc(services, hostConfiguration);

        // Telemetry

        this.AddTelemetry(services, hostConfiguration);

        // Background services

        this.AddBackgroundServices(services, hostConfiguration);

        // OpenAPI documentation

        this.AddOpenApiDocumentation(services, hostConfiguration);

        // Markdown documentation

        this.AddMarkdownDocumentation(services, hostConfiguration);

        // Azure Managed Configuration

        this.AddAzureManagedConfiguration(services, hostConfiguration);

        // Health Monitoring

        this.AddHealthMonitoring(services, hostConfiguration);

        // Service catalog

        this.AddServiceCatalog(services, hostConfiguration);

        // Application parts

        this.AddApplicationParts(mvcBuilder, hostConfiguration);

        // Additional (custom) services

        this.AddAdditionalServices(services, hostConfiguration);
    }

    /// <summary>
    /// Called by the runtime when the application starts to allow the application to configure itself.
    /// </summary>
    /// <param name="app">The current application.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <param name="logger">The logger.</param>
    public virtual void Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration, Microsoft.Extensions.Logging.ILogger<Startup> logger)
    {
        this.Logger = logger;

        LogConfigureStep(this.Logger!, "Application configuration starting...");

        // Configuration

        this.ValidateConfiguration(app, hostConfiguration);

        // Error handling

        this.UseErrorHandling(app, hostConfiguration);

        // HTTPS

        this.UseHttps(app, hostConfiguration);

        // Cookie policy

        this.UseCookiePolicy(app, hostConfiguration);

        // HTTP Telemetry

        this.UseHttpTelemetry(app, hostConfiguration);

        // Static files

        this.UseStaticFiles(app, hostConfiguration);

        // Routing

        this.UseRouting(app, hostConfiguration);

        // CORS

        this.UseCors(app, hostConfiguration);

        // Request localization

        // NOTES:
        // Request localization is added after authentication/authorization to ensure that the user
        // claims are available

        this.UseRequestLocalization(app, hostConfiguration);

        // Azure Managed Configuration

        this.UseAzureManagedConfiguration(app, hostConfiguration);

        // OpenAPI documentation

        // NOTES:
        // OpenAPI middleware is added before endpoints to work event if the endpoint routing is customized
        // (for example, to add a fall-back for routes that were not matched, which happens with BLAZOR)

        this.UseOpenApiDocumentation(app, hostConfiguration);

        // Markdown documentation

        this.UseMarkdownDocumentation(app, hostConfiguration);

        // Endpoints

        this.UseEndpoints(app, hostConfiguration);

        // Additional (custom) configurations

        this.AdditionalAppConfigurations(app, hostConfiguration);

        LogConfigureStep(this.Logger!, "Application configuration ended.");
    }

    #endregion

    #region Protected Methods

    /// <summary>
    /// Called to configure the MVC application parts.
    /// </summary>
    /// <param name="builder">The MVC builder.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    /// <remarks>
    /// The method is called from AddMvc().
    /// </remarks>
    protected virtual void AddApplicationParts(Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Common.Configuration.HostConfiguration hostConfiguration)
    {
        builder.AddApplicationPart(
            typeof(Westwind.AspNetCore.Markdown.MarkdownPageProcessorMiddleware).Assembly);

        builder
            .AddRestApiPart(hostConfiguration);

        builder.Services
            .AddCommonPart(hostConfiguration);
    }

    /// <summary>
    /// Called to configure the HTTP Telemetry middleware.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    /// <remarks>
    /// The method is called from ConfigureServices().
    /// </remarks>
    protected virtual void AddHttpTelemetry(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Common.Configuration.HostConfiguration hostConfiguration)
    {
        services.AddHttpTelemetry();
    }

    /// <summary>
    /// Called to add additional (custom) services to the service collection.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    /// <remarks>
    /// The method is called from ConfigureServices().
    /// </remarks>
    protected virtual void AddAdditionalServices(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Common.Configuration.HostConfiguration hostConfiguration)
    {
        // HttpClient

        this
            .AddHttpClient(services, hostConfiguration);

        // Endpoint analyzer

        services
            .AddEndpointAnalyzer();

        // Configuration analyzer

        services
            .AddConfigurationAnalyzer();
    }

    /// <summary>
    /// Called to add the HTTP Client factory to the service collection.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    /// <remarks>
    /// The method is called from AddAdditionalServices().
    /// </remarks>
    protected virtual void AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Common.Configuration.HostConfiguration hostConfiguration)
    {
        // NOTES:
        // For more information on the HTTP Client factory:
        // https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests
        // https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests

        services
            .AddHttpClient();
    }

    /// <summary>
    /// Called to add the OpenAPI documentation.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    /// <remarks>
    /// The method is called from ConfigureServices().
    /// </remarks>
    protected virtual void AddOpenApiDocumentation(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Common.Configuration.HostConfiguration hostConfiguration)
    {
        // Default version

        services.AddOpenApiDocument(
            (options, provider) =>
            {
                options.DocumentName = "1.0";
                options.Title = "Lithium Chat Gpt Service (GPT) REST API";
                options.Description = "Chat GPT prototype.";
                options.Version = "1.0";
                    
                options.ApiGroupNames = new string[] { "1.0" };

                options.FlattenInheritanceHierarchy = true;
                options.IgnoreObsoleteProperties = true;

                if (options.SchemaGenerator.Settings is NSwag.Generation.OpenApiDocumentGeneratorSettings settings)
                {
                    options.SchemaGenerator = new Primavera.Hydrogen.AspNetCore.OpenApi.Schema.NoTitleFromDisplayNameOpenApiSchemaGenerator(
                        settings);
                }

                this.ConfigureOpenApiDocument(options, hostConfiguration);
            });
    }

    /// <summary>
    /// Called to configure an OpenAPI document.
    /// </summary>
    /// <param name="options">The OpenAPI document configuration options.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    /// <remarks>
    /// The method is called from AddOpenApiDocumentation().
    /// </remarks>
    protected virtual void ConfigureOpenApiDocument(NSwag.Generation.AspNetCore.AspNetCoreOpenApiDocumentGeneratorSettings options, Common.Configuration.HostConfiguration hostConfiguration)
    {
    }

    /// <summary>
    /// Called to add configuration to the service collection.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <returns>
    /// An instance of <see cref="Common.Configuration.HostConfiguration"/> that can be used in the application configuration process.
    /// </returns>
    /// <remarks>
    /// The method is called from ConfigureServices().
    /// </remarks>
    protected virtual Common.Configuration.HostConfiguration AddConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services
            .AddOptions();

        // Host configuration

        services
            .Configure<Common.Configuration.HostConfiguration>(
                this.Configuration.GetSection(nameof(Common.Configuration.HostConfiguration)))
            .Configure<Common.Configuration.HostConfiguration>(
                (options) => this.ConfigureHostConfiguration(options));

        // Telemetry

        services
            .Configure<Primavera.Hydrogen.AspNetCore.Http.Telemetry.HttpTelemetryOptions>(
                this.Configuration.GetSection(nameof(Primavera.Hydrogen.AspNetCore.Http.Telemetry.HttpTelemetryOptions)))
            .Configure<Primavera.Hydrogen.Telemetry.Azure.AzureInsightsTelemetryOptions>(
                this.Configuration.GetSection(nameof(Primavera.Hydrogen.Telemetry.Azure.AzureInsightsTelemetryOptions)));

        // Host configuration snapshot

        services
            .AddOptionsSnapshot<Common.Configuration.HostConfiguration>();

        // Resolve the host configuration instance

        System.IServiceProvider provider = services.BuildServiceProvider();
        return provider.GetRequiredService<Common.Configuration.HostConfiguration>();
    }

    /// <summary>
    /// Called to customize host configuration.
    /// </summary>
    /// <param name="options">The configuration delegate.</param>
    /// <remarks>
    /// The method is called from AddConfiguration().
    /// </remarks>
    protected virtual void ConfigureHostConfiguration(Common.Configuration.HostConfiguration options)
    {
    }

    /// <summary>
    /// Called to add the cookie policy to the service collection.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    /// <remarks>
    /// The method is called from ConfigureServices().
    /// </remarks>
    protected virtual void AddCookiePolicy(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Common.Configuration.HostConfiguration hostConfiguration)
    {
        services
            .Configure<Microsoft.AspNetCore.Builder.CookiePolicyOptions>(
                (options) =>
                {
                    options.MinimumSameSitePolicy = Microsoft.AspNetCore.Http.SameSiteMode.Unspecified;

                    options.OnAppendCookie = 
                        cookieContext => this.CheckCookiesSameSite(cookieContext.Context, cookieContext.CookieOptions, true);
                    options.OnDeleteCookie =
                        cookieContext => this.CheckCookiesSameSite(cookieContext.Context, cookieContext.CookieOptions, false);
                });
    }

    /// <summary>
    /// Called to check the <see cref="Microsoft.AspNetCore.Http.CookieOptions.SameSite"/> cookie setting.
    /// </summary>
    /// <param name="httpContext">The HTTP context.</param>
    /// <param name="options">The cookie options.</param>
    /// <param name="appending">A value indicating whether the cookie is being appended. If false, the cookie is being deleted.</param>
    /// <remarks>
    /// The method is called from when a new cookie is appended or deleted.
    /// </remarks>
    protected virtual void CheckCookiesSameSite(Microsoft.AspNetCore.Http.HttpContext httpContext, Microsoft.AspNetCore.Http.CookieOptions options, bool appending)
    {
        string? domain = options.Domain;
        string? path = options.Path;
        Microsoft.AspNetCore.Http.SameSiteMode sameSiteMode = options.SameSite;
        bool secure = options.Secure;

        LogCheckingCookiesSameSite(
            this.Logger!,
            domain,
            path,
            sameSiteMode,
            secure,
            appending);

        if (sameSiteMode == Microsoft.AspNetCore.Http.SameSiteMode.None)
        {
            string? userAgent = httpContext.Request?.Headers["User-Agent"].ToString();

            if (this.DisallowsCookiesSameSiteNone(userAgent))
            {
                LogDisallowsCookiesSameSiteNone(this.Logger!);

                options.SameSite = Microsoft.AspNetCore.Http.SameSiteMode.Unspecified;
            }
        }
    }

    /// <summary>
    /// Called to determine whether the specified user agent disallows <see cref="Microsoft.AspNetCore.Http.SameSiteMode.None"/> in the <see cref="Microsoft.AspNetCore.Http.CookieOptions.SameSite"/> cookie setting.
    /// </summary>
    /// <param name="userAgent">The user agent.</param>
    /// <returns>
    /// A value indicating whether the specified user agent disallows <see cref="Microsoft.AspNetCore.Http.SameSiteMode.None"/> in the <see cref="Microsoft.AspNetCore.Http.CookieOptions.SameSite"/> cookie setting.
    /// </returns>
    /// <remarks>
    /// The method is called from <see cref="CheckCookiesSameSite(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Http.CookieOptions, bool)"/>.
    /// </remarks>
    protected virtual bool DisallowsCookiesSameSiteNone(string? userAgent)
    {
        // User agent defined?

        if (string.IsNullOrEmpty(userAgent))
        {
            return false;
        }

        // All iOS based browsers

        if (userAgent.Contains("CPU iPhone OS 12") || userAgent.Contains("iPad; CPU OS 12"))
        {
            return true;
        }

        // Mac OS X based browsers that use the Mac OS networking stack

        if (userAgent.Contains("Safari") && userAgent.Contains("Macintosh; Intel Mac OS X 10_14") && userAgent.Contains("Version/"))
        {
            return true;
        }

        // Chrome 50-69

        if (userAgent.Contains("Chrome/5") || userAgent.Contains("Chrome/6"))
        {
            return true;
        }

        // All others

        return false;
    }

    /// <summary>
    /// Called to add dependencies to the service collection.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    /// <remarks>
    /// The method is called from ConfigureServices().
    /// </remarks>
    protected virtual void AddDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Common.Configuration.HostConfiguration hostConfiguration)
    {
        // Dependencies...
    }

    /// <summary>
    /// Called to add service dependencies to the service collection.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    /// <remarks>
    /// The method is called from ConfigureServices().
    /// </remarks>
    protected virtual void AddServiceDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Common.Configuration.HostConfiguration hostConfiguration)
    {
        // Service dependencies

        // NOTES:
        // REST service clients for service dependencies should be registered here
        // to allow those service clients to be resolved via dependency injection
        // The service's client libraries provide extension methods to achieve that
    }

    /// <summary>
    /// Called to add telemetry to the service collection.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    /// <remarks>
    /// The method is called from ConfigureServices().
    /// </remarks>
    protected virtual void AddTelemetry(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Common.Configuration.HostConfiguration hostConfiguration)
    {
        services
            .AddAzureInsightsTelemetryClient()
            .AddAzureInsightsTelemetry();
    }

    /// <summary>
    /// Called to add MVC to the service collection.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    /// <returns>
    /// The MVC builder.
    /// </returns>
    /// <remarks>
    /// The method is called from ConfigureServices().
    /// </remarks>
    protected virtual Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvc(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Common.Configuration.HostConfiguration hostConfiguration)
    {
        // MVC services

        Microsoft.Extensions.DependencyInjection.IMvcBuilder builder = services
            .AddApiControllersWithViews(
                (options) =>
                {
                    // API versioning

                    options.UseVersioning = true;
                    options.DefaultApiVersion = new Microsoft.AspNetCore.Mvc.ApiVersion(1, 0);
                    options.ConfigureApiVersioningOptions = this.ConfigureApiVersioningOptions;

                    // JSON serialization

                    options.ConfigureJsonOptions = jsonOptions =>
                    {
                        // NOTES:
                        // This combines the known serializer contexts so that MVC
                        // knows the types for generated controllers (monitoring, etc.)
                        // DefaultJsonTypeInfoResolver enables reflection serialization,
                        // which is needed because there is a scenario (status code 415)
                        // where MVC will return ProblemDetails and that type cannot be
                        // added to serializer contexts

                        jsonOptions.JsonSerializerOptions.CombineResolvers(
                            new System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver(),
                            Primavera.Hydrogen.Rest.RestSerializerContext.Default,
                            Primavera.Hydrogen.HealthMonitoring.HealthMonitoringSerializerContext.Default);

                        this.ConfigureJsonOptions(jsonOptions);
                    };
                });

        // Extension point

        this.ConfigureMvc(builder, hostConfiguration);

        // Result

        return builder;
    }

    /// <summary>
    /// Called to configure MVC after it is added to the service collection.
    /// </summary>
    /// <param name="builder">The MVC builder.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    /// <remarks>
    /// The method is called from AddMvc().
    /// </remarks>
    protected virtual void ConfigureMvc(Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Common.Configuration.HostConfiguration hostConfiguration)
    {
    }

    /// <summary>
    /// Called to configure the API versioning options.
    /// </summary>
    /// <param name="options">The options.</param>
    /// <remarks>
    /// The method is called from AddMvc().
    /// </remarks>
    protected virtual void ConfigureApiVersioningOptions(Microsoft.AspNetCore.Mvc.Versioning.ApiVersioningOptions options)
    {
    }

    /// <summary>
    /// Called to configure the MVC JSON serializer options.
    /// </summary>
    /// <param name="options">The options.</param>
    /// <remarks>
    /// The method is called from AddMvc().
    /// </remarks>
    protected virtual void ConfigureJsonOptions(Microsoft.AspNetCore.Mvc.JsonOptions options)
    {
    }

    /// <summary>
    /// Called to add background services to the service collection.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    /// <remarks>
    /// The method is called from ConfigureServices().
    /// </remarks>
    protected virtual void AddBackgroundServices(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Common.Configuration.HostConfiguration hostConfiguration)
    {
    }

    /// <summary>
    /// Called to validate configuration.
    /// </summary>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from ConfigureServices().
    /// </remarks>
    protected virtual void ValidateConfiguration(Common.Configuration.HostConfiguration hostConfiguration)
    {
        hostConfiguration.Validate();
    }

    /// <summary>
    /// Called to validate configuration.
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from Configure().
    /// </remarks>
    protected virtual void ValidateConfiguration(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration)
    {
        hostConfiguration.Validate();
    }

    /// <summary>
    /// Called to activate error handling.
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from Configure().
    /// </remarks>
    protected virtual void UseErrorHandling(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration)
    {
        LogConfigureStep(this.Logger!, "Activating error handling...");

        // NOTES:
        // When in development all exceptions' details will be sent to the client: 
        // ... In the browser when on MVC routes.
        // ... In the response body when on API routes.
        // Exceptions on MVC routes will be processed by the exception handler bellow
        // to "redirect" the user to the error route to show him a friendly error view.
        // Content routes and API routes are not handled at all here.
        // The Telemetry middleware (added elsewhere) ensures that all unhandled
        // exceptions are collected.
        // UseInteractiveErrorHandling() can be overridden to consider additional endpoints.

        bool useDevelopmentSettings = this.UseDevelopmentSettings || this.CurrentEnvironment.IsDevelopment();

        if (useDevelopmentSettings)
        {
            app.UseDeveloperExceptionPage();
        }
        else
        {
            app.UseWhen(
                context =>
                {
                    return this.UseInteractiveErrorHandling(context);
                },
                builder =>
                {
                    builder.UseExceptionHandler(this.ErrorRoute);
                });
        }

        // NOTES:
        // All other status code errors (e.g 404) (not 500) are handled by this middleware to
        // "redirect" the user to the same friendly error view.
        // Content routes and API routes are not handled at all here because we do not want
        // to return HTML when these errors occur.
        // UseInteractiveErrorHandling() can be overridden to consider additional endpoints.

        app.UseWhen(
            (context) =>
            {
                return this.UseInteractiveErrorHandling(context);
            },
            builder =>
            {
                builder.UseStatusCodePagesWithReExecute(this.ErrorRoute, "?statusCode={0}");
            });
    }

    /// <summary>
    /// Determines whether interactive error handling should be applied to the current request.
    /// </summary>
    /// <param name="httpContext">The HTTP context.</param>
    /// <returns>
    /// A value indicating whether interactive error handling should be applied to the current request.
    /// </returns>
    /// <remarks>
    /// The method is called from UseErrorHandling().
    /// </remarks>
    protected virtual bool UseInteractiveErrorHandling(Microsoft.AspNetCore.Http.HttpContext httpContext)
    {
        return !httpContext.Request.PathIsApi() && 
            !httpContext.Request.PathIsMonitoring() && 
            !httpContext.Request.PathIsContent();
    }

    /// <summary>
    /// Called to activate HTTPS (HSTS and HTTPS redirection).
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from Configure().
    /// </remarks>
    protected virtual void UseHttps(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration)
    {
        LogConfigureStep(this.Logger!, "Activating HTTPS...");

        bool useDevelopmentSettings = this.UseDevelopmentSettings || this.CurrentEnvironment.IsDevelopment();

        if (!useDevelopmentSettings)
        {
            app.UseHsts();
        }

        app.UseHttpsRedirection();
    }

    /// <summary>
    /// Called to activate MVC static files.
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from Configure().
    /// </remarks>
    protected virtual void UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration)
    {
        LogConfigureStep(this.Logger!, "Activating static files...");

        app.UseWhen(
            context =>
            {
                return context.Request.Path.StartsWithSegments("/favicon.png", System.StringComparison.OrdinalIgnoreCase);
            },
            builder =>
            {
                builder.UseFileServer(
                    new FileServerOptions()
                    {
                        FileProvider = new Microsoft.Extensions.FileProviders.EmbeddedFileProvider(typeof(StartupBase).Assembly, "Primavera.Lithium.ChatGPT.Server.Host.GeneratedCode.assets")
                    });
            });

        app.UseStaticFiles();
    }

    /// <summary>
    /// Called to activate request localization.
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from Configure().
    /// </remarks>
    protected virtual void UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration)
    {
        LogConfigureStep(this.Logger!, "Activating request localization...");

        System.Collections.Generic.List<System.Globalization.CultureInfo> cultures = Common.Localization.CulturesSupported
            .Get()
            .Select(i => new System.Globalization.CultureInfo(i))
            .ToList();

        Microsoft.AspNetCore.Builder.RequestLocalizationOptions options = new Microsoft.AspNetCore.Builder.RequestLocalizationOptions()
        {
            DefaultRequestCulture = new Microsoft.AspNetCore.Localization.RequestCulture(Common.Localization.CulturesSupported.DefaultCulture),
            SupportedCultures = cultures,
            SupportedUICultures = cultures
        };

        this.ConfigureRequestLocalization(app, options, cultures, hostConfiguration);

        app.UseRequestLocalization(options);
    }

    /// <summary>
    /// Called to configure additional request localization options.
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="options">The request localization options.</param>
    /// <param name="cultures">The cultures supported.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from UseRequestLocalization().
    /// </remarks>
    protected virtual void ConfigureRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.RequestLocalizationOptions options, System.Collections.Generic.IList<System.Globalization.CultureInfo> cultures, Common.Configuration.HostConfiguration hostConfiguration)
    {
    }

    /// <summary>
    /// Called to activate HTTP telemetry.
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from Configure().
    /// </remarks>
    protected virtual void UseHttpTelemetry(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration)
    {
        LogConfigureStep(this.Logger!, "Activating HTTP telemetry...");

        app.UseHttpTelemetry();
    }

    /// <summary>
    /// Called to activate routing.
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from Configure().
    /// </remarks>
    protected virtual void UseRouting(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration)
    {
        LogConfigureStep(this.Logger!, "Activating routing...");

        app.UseRouting();
    }

    /// <summary>
    /// Called to activate CORS.
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from Configure().
    /// </remarks>
    protected virtual void UseCors(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration)
    {
        if (hostConfiguration.Cors == null || !hostConfiguration.Cors.Enabled)
        {
            return;
        }

        LogConfigureStep(this.Logger!, "Activating CORS...");

        app.UseCors(
            options =>
            {
                // Allowed origins

                if (!string.IsNullOrWhiteSpace(hostConfiguration.Cors.AllowedOrigins))
                {
                    string[] allowedOrigins = hostConfiguration.Cors.AllowedOrigins.Split(';', StringSplitOptions.RemoveEmptyEntries).Select(i => i.Trim()).ToArray();

                    if (allowedOrigins.Length > 0)
                    {
                        options.WithOrigins(
                            allowedOrigins);
                    }
                }

                // Allowed methods

                if (string.IsNullOrWhiteSpace(hostConfiguration.Cors.AllowedMethods))
                {
                    options.AllowAnyMethod();
                }
                else
                {
                    string[] allowedMethods = hostConfiguration.Cors.AllowedMethods.Split(';', StringSplitOptions.RemoveEmptyEntries).Select(i => i.Trim()).ToArray();

                    if (allowedMethods.Length > 0)
                    {
                        options.WithMethods(
                            allowedMethods);
                    }
                }

                // Allowed headers

                if (string.IsNullOrWhiteSpace(hostConfiguration.Cors.AllowedHeaders))
                {
                    options.AllowAnyHeader();
                }
                else
                {
                    string[] allowedHeaders = hostConfiguration.Cors.AllowedHeaders.Split(';', StringSplitOptions.RemoveEmptyEntries).Select(i => i.Trim()).ToArray();

                    if (allowedHeaders.Length > 0)
                    {
                        options.WithHeaders(
                            allowedHeaders);
                    }
                }
            });
    }

    /// <summary>
    /// Called to activate the cookie policy.
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from Configure().
    /// </remarks>
    protected virtual void UseCookiePolicy(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration)
    {
        LogConfigureStep(this.Logger!, "Activating cookie policy...");

        app.UseCookiePolicy();
    }

    /// <summary>
    /// Called to activate endpoint routing.
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from Configure().
    /// </remarks>
    protected virtual void UseEndpoints(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration)
    {
        LogConfigureStep(this.Logger!, "Activating endpoint routing...");

        app.UseEndpoints(
            builder =>
            {
                builder.MapControllerRoute("default", "{controller=Home}/{action=Index}/{id?}");

                this.ConfigureEndpoints(builder, hostConfiguration);
            });
    }

    /// <summary>
    /// Called to configure endpoint routing after the middleware is added to the pipeline.
    /// </summary>
    /// <param name="builder">The endpoint route builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from UseEndpoints().
    /// </remarks>
    protected virtual void ConfigureEndpoints(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder builder, Common.Configuration.HostConfiguration hostConfiguration)
    {
    }

    /// <summary>
    /// Called to activate Azure Managed Configuration to refresh configuration at a recurring intervals.
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from Configure().
    /// This sets up Azure App Configuration.
    /// </remarks>
    protected virtual void UseAzureManagedConfiguration(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration)
    {
        // NOTES:
        // This adds Azure App Configuration, depending on the services'
        // environment variables

        LogConfigureStep(this.Logger!, "Activating Azure Managed Configuration...");

        app.UseAzureManagedConfiguration();
    }

    /// <summary>
    /// Called to perform additional application configurations.
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from Configure() (just before ending).
    /// </remarks>
    protected virtual void AdditionalAppConfigurations(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration)
    {
    }

    /// <summary>
    /// Called to active the OpenAPI documentation.
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from Configure() (just before ending).
    /// </remarks>
    protected virtual void UseOpenApiDocumentation(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration)
    {
        // Ignore Spelling: favicon
        // Ignore Spelling: img

        LogConfigureStep(this.Logger!, "Activating OpenAPI documentation...");

        // Middleware to generate the schema

        app.UseOpenApi(
            (options) =>
            {
                options.Path = Common.Constants.Documentation.RestApiDocumentsRoute;
            });

        // Middleware to customize the UI

        app.UseWhen(
            context =>
            {
                return context.Request.PathIsRestApiDocumentationCustomization();
            },
            builder =>
            {
                builder.UseFileServer(
                    new FileServerOptions()
                    {
                        FileProvider = new Microsoft.Extensions.FileProviders.EmbeddedFileProvider(typeof(StartupBase).Assembly, "Primavera.Lithium.ChatGPT.Server.Host.GeneratedCode.assets")
                    });
            });

        app.UseWhen(
            context =>
            {
                return context.Request.PathIsRestApiDocumentation();
            },
            builder =>
            {
                builder.Use(
                    async (context, next) =>
                    {
                        if (context.Request.Path.StartsWithSegments(Common.Constants.Documentation.RestApiBaseRoute + "/favicon-32x32.png") || context.Request.Path.StartsWithSegments(Common.Constants.Documentation.RestApiBaseRoute + "/favicon-16x16.png"))
                        {
                            context.Response.Redirect("/favicon.png");
                            return;
                        }

                        await next.Invoke().ConfigureAwait(false);
                    });
            });

        // Middleware to build the UI

        app.UseSwaggerUi3(
            (options) =>
            {
                options.Path = Common.Constants.Documentation.RestApiBaseRoute;
                options.DocumentPath = Common.Constants.Documentation.RestApiDocumentsRoute;
                options.DocExpansion = "list";

                if (this.CurrentEnvironment.IsDevelopment() || this.CurrentEnvironment.IsStaging())
                {
                    options.EnableTryItOut = true;
                }
                else
                {
                    options.EnableTryItOut = false;
                }

                System.Text.StringBuilder sb = new System.Text.StringBuilder();
                sb.AppendLine("<script>");
                sb.AppendLine("document.title = \"Lithium Chat Gpt Service - REST API\";");
                sb.AppendLine("</script>");

                options.CustomHeadContent = sb.ToString();

                options.CustomStylesheetPath = Common.Constants.Documentation.RestApiStyleSheetPath;
            });

        // Redirect for old route

        app.Map(
            Common.Constants.Documentation.RestApiBaseRouteLegacy,
            app =>
            {
                app.Run(
                    context =>
                    {
                        context.Response.Redirect(Common.Constants.Documentation.RestApiBaseRoute, true);
                        return System.Threading.Tasks.Task.CompletedTask;
                    });
            });
    }

    /// <summary>
    /// Called to add the services required for markdown documentation.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    /// <remarks>
    /// The method is called from ConfigureServices().
    /// </remarks>
    protected virtual void AddMarkdownDocumentation(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Common.Configuration.HostConfiguration hostConfiguration)
    {
        services
            .AddMarkdown();
    }

    /// <summary>
    /// Called to active the markdown documentation.
    /// </summary>
    /// <param name="app">The application builder.</param>
    /// <param name="hostConfiguration">The current host configuration.</param>
    /// <remarks>
    /// The method is called from Configure() (just before ending).
    /// </remarks>
    protected virtual void UseMarkdownDocumentation(Microsoft.AspNetCore.Builder.IApplicationBuilder app, Common.Configuration.HostConfiguration hostConfiguration)
    {
        app.UseWhen(
            (context) =>
            {
                return context.Request.PathIsDocumentation();
            },
            builder =>
            {
                builder.UseMarkdown();
            });
    }

    /// <summary>
    /// Called when configuring services required to activate Azure Managed Configuration.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    protected virtual void AddAzureManagedConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Common.Configuration.HostConfiguration hostConfiguration)
    {
        // NOTES:
        // This adds Azure App Configuration, depending on the services'
        // environment variables

        services
            .AddAzureManagedConfiguration();
    }

    /// <summary>
    /// Called when configuring services required to activate health monitoring.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    protected virtual void AddHealthMonitoring(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Common.Configuration.HostConfiguration hostConfiguration)
    {
        services
            .AddHealthMonitoring();
    }

    /// <summary>
    /// Called when configuring services required to activate the service catalog.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="hostConfiguration">The host configuration.</param>
    protected virtual void AddServiceCatalog(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Common.Configuration.HostConfiguration hostConfiguration)
    {
        services
            .AddServiceCatalog(
                options =>
                {
                    options.Address = new System.Uri(hostConfiguration.ServiceCatalogServiceBaseUri!);

                    options.ServiceDescription = new Primavera.Hydrogen.Services.Extensions.ServiceCatalog.ServiceDescriptionOptions()
                    {
                        Id = "GPT",
                        Name = "ChatGPT",
                        Version = "1.0",
                        Properties = new System.Collections.Generic.Dictionary<string, string>()
                        {
                            [Primavera.Hydrogen.Services.Extensions.ServiceCatalog.ServiceCatalogConstants.Registration.WellKnownProperties.FrameworkVersion] = "5",
                            [Primavera.Hydrogen.Services.Extensions.ServiceCatalog.ServiceCatalogConstants.Registration.WellKnownProperties.BinariesVersion] = typeof(StartupBase).Assembly.Reflector().AssemblyFileVersion.ToString(),
                            [Primavera.Hydrogen.Services.Extensions.ServiceCatalog.ServiceCatalogConstants.Registration.WellKnownProperties.InformationalVersion] = typeof(StartupBase).Assembly.Reflector().AssemblyInformationalVersion,
                            [Primavera.Hydrogen.Services.Extensions.ServiceCatalog.ServiceCatalogConstants.Registration.WellKnownProperties.Copyright] = typeof(StartupBase).Assembly.Reflector().AssemblyCopyright,
                            [Primavera.Hydrogen.Services.Extensions.ServiceCatalog.ServiceCatalogConstants.Registration.WellKnownProperties.ApiVersions] = "1.0",
                            [Primavera.Hydrogen.Services.Extensions.ServiceCatalog.ServiceCatalogConstants.Registration.WellKnownProperties.ApiScopes] = "",
                            [Primavera.Hydrogen.Services.Extensions.ServiceCatalog.ServiceCatalogConstants.Registration.WellKnownProperties.AuthorizationPolicies] = "",
                            [Primavera.Hydrogen.Services.Extensions.ServiceCatalog.ServiceCatalogConstants.Registration.WellKnownProperties.Webhooks] = "",
                            [Primavera.Hydrogen.Services.Extensions.ServiceCatalog.ServiceCatalogConstants.Registration.WellKnownProperties.Dependencies] = "",
                            [Primavera.Hydrogen.Services.Extensions.ServiceCatalog.ServiceCatalogConstants.Registration.WellKnownProperties.ServiceDependencies] = "",
                            [Primavera.Hydrogen.Services.Extensions.ServiceCatalog.ServiceCatalogConstants.Registration.WellKnownProperties.BackgroundServices] = ""
                        }
                    };
                });
    }

    #endregion

    #region Private Methods

    [Microsoft.Extensions.Logging.LoggerMessage(EventId = 1, Level = LogLevel.Debug, Message = "{Message}")]
    private static partial void LogConfigureStep(Microsoft.Extensions.Logging.ILogger logger, string message);

    [Microsoft.Extensions.Logging.LoggerMessage(EventId = 2, Level = LogLevel.Debug, Message = "Checking cookie same site mode (domain = {Domain}, path = {Path}, mode = {SameSiteMode}, secure = {Secure}, append = {Appending})...")]
    private static partial void LogCheckingCookiesSameSite(Microsoft.Extensions.Logging.ILogger logger, string? domain, string? path, Microsoft.AspNetCore.Http.SameSiteMode sameSiteMode, bool secure, bool appending);

    [Microsoft.Extensions.Logging.LoggerMessage(EventId = 3, Level = LogLevel.Debug, Message = "Cookie same site mode set to unspecified because user agent does not support none.")]
    private static partial void LogDisallowsCookiesSameSiteNone(Microsoft.Extensions.Logging.ILogger logger);

    #endregion

    #endregion
}

/// <summary>
/// Provides the application initialization logic.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
public partial class Startup : StartupBase
{
    #region Code

    #region Public Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="Startup" /> class.
    /// </summary>
    /// <param name="env">The current host environment.</param>
    /// <param name="configuration">The current configuration.</param>
    public Startup(Microsoft.Extensions.Hosting.IHostEnvironment env, Microsoft.Extensions.Configuration.IConfiguration configuration)
        : base(env, configuration)
    {
    }

    #endregion

    #endregion
}

#endregion

#endregion
