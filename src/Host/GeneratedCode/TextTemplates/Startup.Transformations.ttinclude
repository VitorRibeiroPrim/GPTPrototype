<#+

// *** TransformServiceModel

public void TransformServiceModel(DomainModelElement sourceElement, CSharpFileModel targetModel)
{
    ServiceModel sourceModel = sourceElement as ServiceModel;
    if (sourceModel == null)
    {
        return;
    }

    targetModel
        .WithNamespaceImport(new NamespaceImportModel("Westwind.AspNetCore.Markdown"))
        .WithNamespaceImport(new NamespaceImportModel("Primavera.Hydrogen.AspNetCore.Http.Telemetry"))
        .WithNamespaceImport(new NamespaceImportModel("Primavera.Hydrogen.AspNetCore.Configuration"))
        .WithNamespaceImport(new NamespaceImportModel("Primavera.Hydrogen.AspNetCore.Mvc"))
        .WithNamespaceImport(new NamespaceImportModel("Primavera.Hydrogen.AspNetCore.Routing"))
        .WithNamespaceImport(new NamespaceImportModel("Primavera.Hydrogen.Configuration"))
        .WithNamespaceImport(new NamespaceImportModel("Primavera.Hydrogen.Telemetry.Azure"))
        .WithNamespaceImport(new NamespaceImportModel("Primavera.Hydrogen.Services.Extensions.ServiceCatalog"))
        .WithNamespaceImport(new NamespaceImportModel("Primavera.Hydrogen.Reflection"));

    if (sourceModel.Settings.GenerateOidcSupport)
    {
        targetModel
            .WithNamespaceImport(new NamespaceImportModel("Microsoft.IdentityModel.Protocols.OpenIdConnect"));
    }

    targetModel.Namespace = new NamespaceModel(sourceModel.Namespace + ".Server.Host");

    targetModel
        .WithComment("Ignore Spelling: App")
        .WithComment($"Ignore Spelling: {sourceModel.Product}")
        .WithComment($"Ignore Spelling: {sourceModel.DisplayName}");

    ClassModel baseClassModel = targetModel.Namespace
        .AddClass(
            new ClassModel("StartupBase")
            {
                Modifiers = ClassModifiers.Public | ClassModifiers.Abstract | ClassModifiers.Partial,
                Documentation = new DocumentationModel("Defines the base class for the application initialization logic.")
            })
            .WithProperty(
                new PropertyModel("CurrentEnvironment", "Microsoft.Extensions.Hosting.IHostEnvironment")
                {
                    Modifiers = PropertyModifiers.Protected,
                    Documentation = new DocumentationModel("Gets the current environment."),
                    GetAccessor = new PropertyGetAccessorModel(),
                    SetAccessor = new PropertySetAccessorModel()
                    {
                        Modifiers = PropertyAccessorModifiers.Private
                    }
                })
            .WithProperty(
                new PropertyModel("Configuration", "Microsoft.Extensions.Configuration.IConfiguration")
                {
                    Modifiers = PropertyModifiers.Protected,
                    Documentation = new DocumentationModel("Gets the current configuration."),
                    GetAccessor = new PropertyGetAccessorModel(),
                    SetAccessor = new PropertySetAccessorModel()
                    {
                        Modifiers = PropertyAccessorModifiers.Private
                    }
                })
            .WithProperty(
                new PropertyModel("UseDevelopmentSettings", "bool", "false")
                {
                    Modifiers = PropertyModifiers.Protected | PropertyModifiers.Virtual,
                    Documentation = new DocumentationModel("Gets a value indicating whether development settings should be used regardless of the current environment. The default value is false.")
                })
            .WithProperty(
                new PropertyModel("Logger", "Microsoft.Extensions.Logging.ILogger?")
                {
                    Modifiers = PropertyModifiers.Protected,
                    Documentation = new DocumentationModel("Gets the logger instance.")
                    {
                        Remarks = "This instance is only initialized when Configure() starts."
                    },
                    GetAccessor = new PropertyGetAccessorModel(),
                    SetAccessor = new PropertySetAccessorModel()
                    {
                        Modifiers = PropertyAccessorModifiers.Private
                    }
                })
            .AddConstructor(new ConstructorModel()
            {
                Modifiers = ConstructorModifiers.Protected,
                Documentation = new DocumentationModel("Initializes a new instance of the <see cref=\"StartupBase\" /> class.")
            })
                .WithParameter(new MethodParameterModel("env", "Microsoft.Extensions.Hosting.IHostEnvironment")
                {
                    Documentation = new DocumentationModel("The current host environment.")
                })
                .WithParameter(new MethodParameterModel("configuration", "Microsoft.Extensions.Configuration.IConfiguration")
                {
                    Documentation = new DocumentationModel("The current configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("ConfigureServices")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called by the runtime when the application starts to allow the application to configure its services.")
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The services collection.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("Configure")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called by the runtime when the application starts to allow the application to configure itself.")
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The current application.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .WithParameter(new MethodParameterModel("logger", "Microsoft.Extensions.Logging.ILogger<Startup>")
                {
                    Documentation = new DocumentationModel("The logger.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(
                new MethodModel("AddApplicationParts")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Called to configure the MVC application parts.")
                    {
                        Remarks = "The method is called from AddMvc()."
                    }
                })
                .WithParameter(
                    new MethodParameterModel("builder", "Microsoft.Extensions.DependencyInjection.IMvcBuilder")
                    {
                        Documentation = new DocumentationModel("The MVC builder.")
                    })
                .WithParameter(
                    new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                    {
                        Documentation = new DocumentationModel("The host configuration.")
                    })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AddHttpTelemetry")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure the HTTP Telemetry middleware.")
                {
                    Remarks = "The method is called from ConfigureServices()."
                }
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AddAdditionalServices")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to add additional (custom) services to the service collection.")
                {
                    Remarks = "The method is called from ConfigureServices()."
                }
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AddHttpClient")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to add the HTTP Client factory to the service collection.")
                {
                    Remarks = "The method is called from AddAdditionalServices()."
                }
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AddOpenApiDocumentation")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to add the OpenAPI documentation.")
                {
                    Remarks = "The method is called from ConfigureServices()."
                }
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("ConfigureOpenApiDocument")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure an OpenAPI document.")
                {
                    Remarks = "The method is called from AddOpenApiDocumentation()."
                }
            })
                .WithParameter(new MethodParameterModel("options", "NSwag.Generation.AspNetCore.AspNetCoreOpenApiDocumentGeneratorSettings")
                {
                    Documentation = new DocumentationModel("The OpenAPI document configuration options.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AddConfiguration", "Common.Configuration.HostConfiguration")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to add configuration to the service collection.")
                {
                    Returns = "An instance of <see cref=\"Common.Configuration.HostConfiguration\"/> that can be used in the application configuration process.", 
                    Remarks = "The method is called from ConfigureServices()."
                }
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("ConfigureHostConfiguration", "void")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to customize host configuration.")
                {
                    Remarks = "The method is called from AddConfiguration()."
                }
            })
                .WithParameter(new MethodParameterModel("options", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The configuration delegate.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(
                new MethodModel("AddCookiePolicy")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Called to add the cookie policy to the service collection.")
                    {
                        Remarks = "The method is called from ConfigureServices()."
                    }
                })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("CheckCookiesSameSite")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to check the <see cref=\"Microsoft.AspNetCore.Http.CookieOptions.SameSite\"/> cookie setting.")
                {
                    Remarks = "The method is called from when a new cookie is appended or deleted."
                }
            })
                .WithParameter(new MethodParameterModel("httpContext", "Microsoft.AspNetCore.Http.HttpContext")
                {
                    Documentation = new DocumentationModel("The HTTP context.")
                })
                .WithParameter(new MethodParameterModel("options", "Microsoft.AspNetCore.Http.CookieOptions")
                {
                    Documentation = new DocumentationModel("The cookie options.")
                })
                .WithParameter(new MethodParameterModel("appending", "bool")
                {
                    Documentation = new DocumentationModel("A value indicating whether the cookie is being appended. If false, the cookie is being deleted.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("DisallowsCookiesSameSiteNone", "bool")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to determine whether the specified user agent disallows <see cref=\"Microsoft.AspNetCore.Http.SameSiteMode.None\"/> in the <see cref=\"Microsoft.AspNetCore.Http.CookieOptions.SameSite\"/> cookie setting.")
                {
                    Returns = "A value indicating whether the specified user agent disallows <see cref=\"Microsoft.AspNetCore.Http.SameSiteMode.None\"/> in the <see cref=\"Microsoft.AspNetCore.Http.CookieOptions.SameSite\"/> cookie setting.", 
                    Remarks = "The method is called from <see cref=\"CheckCookiesSameSite(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Http.CookieOptions, bool)\"/>."
                }
            })
                .WithParameter(new MethodParameterModel("userAgent", "string?")
                {
                    Documentation = new DocumentationModel("The user agent.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AddDependencies")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to add dependencies to the service collection.")
                {
                    Remarks = "The method is called from ConfigureServices()."
                }
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AddServiceDependencies")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to add service dependencies to the service collection.")
                {
                    Remarks = "The method is called from ConfigureServices()."
                }
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AddTelemetry")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to add telemetry to the service collection.")
                {
                    Remarks = "The method is called from ConfigureServices()."
                }
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AddMvc", "Microsoft.Extensions.DependencyInjection.IMvcBuilder")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to add MVC to the service collection.")
                {
                    Returns = "The MVC builder.",
                    Remarks = "The method is called from ConfigureServices()."
                }
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("ConfigureMvc")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure MVC after it is added to the service collection.")
                {
                    Remarks = "The method is called from AddMvc()."
                }
            })
                .WithParameter(new MethodParameterModel("builder", "Microsoft.Extensions.DependencyInjection.IMvcBuilder")
                {
                    Documentation = new DocumentationModel("The MVC builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("ConfigureApiVersioningOptions")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure the API versioning options.")
                {
                    Remarks = "The method is called from AddMvc()."
                }
            })
                .WithParameter(new MethodParameterModel("options", "Microsoft.AspNetCore.Mvc.Versioning.ApiVersioningOptions")
                {
                    Documentation = new DocumentationModel("The options.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("ConfigureJsonOptions")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure the MVC JSON serializer options.")
                {
                    Remarks = "The method is called from AddMvc()."
                }
            })
                .WithParameter(new MethodParameterModel("options", "Microsoft.AspNetCore.Mvc.JsonOptions")
                {
                    Documentation = new DocumentationModel("The options.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AddBackgroundServices")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to add background services to the service collection.")
                {
                    Remarks = "The method is called from ConfigureServices()."
                }
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("ValidateConfiguration")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to validate configuration.")
                {
                    Remarks = "The method is called from ConfigureServices()."
                }
            })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("ValidateConfiguration")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to validate configuration.")
                {
                    Remarks = "The method is called from Configure()."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UseErrorHandling")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to activate error handling.")
                {
                    Remarks = "The method is called from Configure()."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UseInteractiveErrorHandling", "bool")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Determines whether interactive error handling should be applied to the current request.")
                {
                    Returns = "A value indicating whether interactive error handling should be applied to the current request.",
                    Remarks = "The method is called from UseErrorHandling()."
                }
            })
                .WithParameter(new MethodParameterModel("httpContext", "Microsoft.AspNetCore.Http.HttpContext")
                {
                    Documentation = new DocumentationModel("The HTTP context.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UseHttps")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to activate HTTPS (HSTS and HTTPS redirection).")
                {
                    Remarks = "The method is called from Configure()."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UseStaticFiles")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to activate MVC static files.")
                {
                    Remarks = "The method is called from Configure()."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UseRequestLocalization")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to activate request localization.")
                {
                    Remarks = "The method is called from Configure()."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("ConfigureRequestLocalization")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure additional request localization options.")
                {
                    Remarks = "The method is called from UseRequestLocalization()."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("options", "Microsoft.AspNetCore.Builder.RequestLocalizationOptions")
                {
                    Documentation = new DocumentationModel("The request localization options.")
                })
                .WithParameter(new MethodParameterModel("cultures", "System.Collections.Generic.IList<System.Globalization.CultureInfo>")
                {
                    Documentation = new DocumentationModel("The cultures supported.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UseHttpTelemetry")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to activate HTTP telemetry.")
                {
                    Remarks = "The method is called from Configure()."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UseRouting")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to activate routing.")
                {
                    Remarks = "The method is called from Configure()."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UseCors")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to activate CORS.")
                {
                    Remarks = "The method is called from Configure()."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UseCookiePolicy")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to activate the cookie policy.")
                {
                    Remarks = "The method is called from Configure()."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UseEndpoints")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to activate endpoint routing.")
                {
                    Remarks = "The method is called from Configure()."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("ConfigureEndpoints")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure endpoint routing after the middleware is added to the pipeline.")
                {
                    Remarks = "The method is called from UseEndpoints()."
                }
            })
                .WithParameter(new MethodParameterModel("builder", "Microsoft.AspNetCore.Routing.IEndpointRouteBuilder")
                {
                    Documentation = new DocumentationModel("The endpoint route builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UseAzureManagedConfiguration")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to activate Azure Managed Configuration to refresh configuration at a recurring intervals.")
                {
                    Remarks = "The method is called from Configure().\nThis sets up Azure App Configuration."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AdditionalAppConfigurations")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to perform additional application configurations.")
                {
                    Remarks = "The method is called from Configure() (just before ending)."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UseOpenApiDocumentation")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to active the OpenAPI documentation.")
                {
                    Remarks = "The method is called from Configure() (just before ending)."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>();

    // Error route

    if (sourceModel.Settings.GenerateHomeController)
    {
        baseClassModel
            .WithProperty(
                new PropertyModel("ErrorRoute", "string", "Common.Constants.Controllers.Home.Routes.Error")
                {
                    Modifiers = PropertyModifiers.Protected | PropertyModifiers.Virtual,
                    Documentation = new DocumentationModel("Gets the error route.")
                });
    }
    else
    {
        baseClassModel
            .WithProperty(
                new PropertyModel("ErrorRoute", "string")
                {
                    Modifiers = PropertyModifiers.Protected | PropertyModifiers.Abstract,
                    Documentation = new DocumentationModel("Gets the error route."),
                    GetAccessor = new PropertyGetAccessorModel()
                });
    }

    // AccessDenied route

    if (sourceModel.Settings.GenerateOidcSupport)
    {
        if (sourceModel.Settings.GenerateHomeController)
        {
            baseClassModel
                .WithProperty(
                    new PropertyModel("AccessDeniedRoute", "string", "Common.Constants.Controllers.Home.Routes.AccessDenied")
                    {
                        Modifiers = PropertyModifiers.Protected | PropertyModifiers.Virtual,
                        Documentation = new DocumentationModel("Gets the access denied route.")
                    });
        }
        else
        {
            baseClassModel
                .WithProperty(
                    new PropertyModel("AccessDeniedRoute", "string")
                    {
                        Modifiers = PropertyModifiers.Protected | PropertyModifiers.Abstract,
                        Documentation = new DocumentationModel("Gets the access denied route."),
                        GetAccessor = new PropertyGetAccessorModel()
                    });
        }
    }

    // More

    baseClassModel
        .AddMethod(new MethodModel("AddMarkdownDocumentation")
        {
            Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
            Documentation = new DocumentationModel("Called to add the services required for markdown documentation.")
            {
                Remarks = "The method is called from ConfigureServices()."
            }
        })
            .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
            {
                Documentation = new DocumentationModel("The service collection.")
            })
            .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
            {
                Documentation = new DocumentationModel("The host configuration.")
            })
            .ParentModelAs<ClassModel>()
        .AddMethod(new MethodModel("UseMarkdownDocumentation")
        {
            Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
            Documentation = new DocumentationModel("Called to active the markdown documentation.")
            {
                Remarks = "The method is called from Configure() (just before ending)."
            }
        })
            .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
            {
                Documentation = new DocumentationModel("The application builder.")
            })
            .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
            {
                Documentation = new DocumentationModel("The current host configuration.")
            });

    baseClassModel
        .AddMethod(new MethodModel("LogConfigureStep")
        {
            Modifiers = MethodModifiers.Private | MethodModifiers.Static | MethodModifiers.Partial,
            Body = null
        })
            .WithParameter(new MethodParameterModel("logger", "Microsoft.Extensions.Logging.ILogger"))
            .WithParameter(new MethodParameterModel("message", "string"))
            .WithAttribute(new AttributeModel("Microsoft.Extensions.Logging.LoggerMessage(EventId = 1, Level = LogLevel.Debug, Message = \"{Message}\")"))
            .ParentModelAs<ClassModel>()
        .AddMethod(new MethodModel("LogCheckingCookiesSameSite")
        {
            Modifiers = MethodModifiers.Private | MethodModifiers.Static | MethodModifiers.Partial,
            Body = null
        })
            .WithParameter(new MethodParameterModel("logger", "Microsoft.Extensions.Logging.ILogger"))
            .WithParameter(new MethodParameterModel("domain", "string?"))
            .WithParameter(new MethodParameterModel("path", "string?"))
            .WithParameter(new MethodParameterModel("sameSiteMode", "Microsoft.AspNetCore.Http.SameSiteMode"))
            .WithParameter(new MethodParameterModel("secure", "bool"))
            .WithParameter(new MethodParameterModel("appending", "bool"))
            .WithAttribute(new AttributeModel("Microsoft.Extensions.Logging.LoggerMessage(EventId = 2, Level = LogLevel.Debug, Message = \"Checking cookie same site mode (domain = {Domain}, path = {Path}, mode = {SameSiteMode}, secure = {Secure}, append = {Appending})...\")"))
            .ParentModelAs<ClassModel>()
        .AddMethod(new MethodModel("LogDisallowsCookiesSameSiteNone")
        {
            Modifiers = MethodModifiers.Private | MethodModifiers.Static | MethodModifiers.Partial,
            Body = null
        })
            .WithParameter(new MethodParameterModel("logger", "Microsoft.Extensions.Logging.ILogger"))
            .WithAttribute(new AttributeModel("Microsoft.Extensions.Logging.LoggerMessage(EventId = 3, Level = LogLevel.Debug, Message = \"Cookie same site mode set to unspecified because user agent does not support none.\")"))
            .ParentModelAs<ClassModel>()
        ;

    if (sourceModel.AuthorizationMode.IsOn())
    {
        baseClassModel
            .AddMethod(new MethodModel("ShowPII")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to disable the default behavior in Identity Model to hide PII.")
                {
                    Remarks = "The method is called from ConfigureServices()."
                }
            })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AddAuthorization")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to add authorization to the service collection.")
                {
                    Remarks = "The method is called from ConfigureServices()."
                }
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AddAuthorizationPolicies")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to add authorization policies to the service collection.")
                {
                    Remarks = "The method is called from AddAuthorization()."
                }
            })
                .WithParameter(new MethodParameterModel("options", "Microsoft.AspNetCore.Authorization.AuthorizationOptions")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AddAuthentication", "Microsoft.AspNetCore.Authentication.AuthenticationBuilder")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to add authentication to the service collection.")
                {
                    Returns = "The <see cref=\"Microsoft.AspNetCore.Authentication.AuthenticationBuilder\"/> instance.",
                    Remarks = "The method is called from ConfigureServices()."
                }
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("AddJwtBearer")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to add JWT bearer authentication to the service collection.")
                {
                    Remarks = "The method is called from AddAuthentication()."
                }
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("builder", "Microsoft.AspNetCore.Authentication.AuthenticationBuilder")
                {
                    Documentation = new DocumentationModel("The authentication builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("ConfigureJwtBearerOptions")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure JWT bearer options after it is added to the service collection.")
                {
                    Remarks = "The method is called from AddJwtBearer()."
                }
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("builder", "Microsoft.AspNetCore.Authentication.AuthenticationBuilder")
                {
                    Documentation = new DocumentationModel("The authentication builder.")
                })
                .WithParameter(new MethodParameterModel("options", "Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions")
                {
                    Documentation = new DocumentationModel("The JWT bearer options.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("OnJwtBearerAuthenticationFailed", "System.Threading.Tasks.Task")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called when the JWT bearer authentication fails.")
                {
                    Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                }
            })
                .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.JwtBearer.AuthenticationFailedContext")
                {
                    Documentation = new DocumentationModel("The context.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("OnJwtBearerForbidden", "System.Threading.Tasks.Task")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called when a forbidden response is received.")
                {
                    Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                }
            })
                .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.JwtBearer.ForbiddenContext")
                {
                    Documentation = new DocumentationModel("The context.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("OnJwtBearerMessageReceived", "System.Threading.Tasks.Task")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called when a message is received.")
                {
                    Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                }
            })
                .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.JwtBearer.MessageReceivedContext")
                {
                    Documentation = new DocumentationModel("The context.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("OnJwtBearerTokenValidated", "System.Threading.Tasks.Task")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called when the token is validated.")
                {
                    Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                }
            })
                .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.JwtBearer.TokenValidatedContext")
                {
                    Documentation = new DocumentationModel("The context.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("OnJwtBearerChallenge", "System.Threading.Tasks.Task")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called when a challenge is received.")
                {
                    Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                }
            })
                .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerChallengeContext")
                {
                    Documentation = new DocumentationModel("The context.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UseAuthentication")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to activate authentication.")
                {
                    Remarks = "The method is called from Configure()."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("UseAuthorization")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to activate authorization.")
                {
                    Remarks = "The method is called from Configure()."
                }
            })
                .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                {
                    Documentation = new DocumentationModel("The application builder.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The current host configuration.")
                })
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("GetIdentityServerTokenEndpoint", "string")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Returns the address of the Identity Server token endpoint.")
                {
                    Returns = "The address of the Identity Server token endpoint."
                }
            })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>();

        baseClassModel
            .AddMethod(new MethodModel("LogBearerAuthenticationSucceeded")
            {
                Modifiers = MethodModifiers.Private | MethodModifiers.Static | MethodModifiers.Partial,
                Body = null
            })
                .WithParameter(new MethodParameterModel("logger", "Microsoft.Extensions.Logging.ILogger"))
                .WithParameter(new MethodParameterModel("accessToken", "string?"))
                .WithAttribute(new AttributeModel("Microsoft.Extensions.Logging.LoggerMessage(EventId = 4, Level = LogLevel.Information, Message = \"Bearer authentication succeeded. Access token: '{AccessToken}'.\")"))
                .ParentModelAs<ClassModel>()
            .AddMethod(new MethodModel("LogBearerAuthenticationFailed")
            {
                Modifiers = MethodModifiers.Private | MethodModifiers.Static | MethodModifiers.Partial,
                Body = null
            })
                .WithParameter(new MethodParameterModel("logger", "Microsoft.Extensions.Logging.ILogger"))
                .WithParameter(new MethodParameterModel("accessToken", "string?"))
                .WithAttribute(new AttributeModel("Microsoft.Extensions.Logging.LoggerMessage(EventId = 5, Level = LogLevel.Warning, Message = \"Bearer authentication failed. Access token: '{AccessToken}'.\")"))
                .ParentModelAs<ClassModel>()
            ;

        if (sourceModel.Settings.GenerateOidcSupport)
        {
            baseClassModel
                .AddMethod(new MethodModel("AddCookie")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Called to add Cookie authentication to the service collection.")
                    {
                        Remarks = "The method is called from AddAuthentication()."
                    }
                })
                    .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                    {
                        Documentation = new DocumentationModel("The service collection.")
                    })
                    .WithParameter(new MethodParameterModel("builder", "Microsoft.AspNetCore.Authentication.AuthenticationBuilder")
                    {
                        Documentation = new DocumentationModel("The authentication builder.")
                    })
                    .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                    {
                        Documentation = new DocumentationModel("The host configuration.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("ConfigureCookieOptions")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Called to configure cookie options after it is added to the service collection.")
                    {
                        Remarks = "The method is called from AddCookie()."
                    }
                })
                    .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                    {
                        Documentation = new DocumentationModel("The service collection.")
                    })
                    .WithParameter(new MethodParameterModel("builder", "Microsoft.AspNetCore.Authentication.AuthenticationBuilder")
                    {
                        Documentation = new DocumentationModel("The authentication builder.")
                    })
                    .WithParameter(new MethodParameterModel("options", "Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions")
                    {
                        Documentation = new DocumentationModel("The cookies options.")
                    })
                    .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                    {
                        Documentation = new DocumentationModel("The host configuration.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("AddOidc")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Called to add OIDC authentication to the service collection.")
                    {
                        Remarks = "The method is called from AddAuthentication()."
                    }
                })
                    .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                    {
                        Documentation = new DocumentationModel("The service collection.")
                    })
                    .WithParameter(new MethodParameterModel("builder", "Microsoft.AspNetCore.Authentication.AuthenticationBuilder")
                    {
                        Documentation = new DocumentationModel("The authentication builder.")
                    })
                    .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                    {
                        Documentation = new DocumentationModel("The host configuration.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("ConfigureOidcOptions")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Called to configure OIDC options after it is added to the service collection.")
                    {
                        Remarks = "The method is called from AddOidc()."
                    }
                })
                    .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                    {
                        Documentation = new DocumentationModel("The service collection.")
                    })
                    .WithParameter(new MethodParameterModel("builder", "Microsoft.AspNetCore.Authentication.AuthenticationBuilder")
                    {
                        Documentation = new DocumentationModel("The authentication builder.")
                    })
                    .WithParameter(new MethodParameterModel("options", "Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions")
                    {
                        Documentation = new DocumentationModel("The OIDC options.")
                    })
                    .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                    {
                        Documentation = new DocumentationModel("The host configuration.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnCookieRedirectToLogin", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Called when cookie authentication redirects to login.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnCookieRedirectToLogout", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Called when cookie authentication redirects to logout.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.RedirectContext<Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions>")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnCookieSignedIn", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Called when cookie authentication is signed in.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.Cookies.CookieSignedInContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnCookieSigningIn", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Called when cookie authentication is signing in.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.Cookies.CookieSigningInContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnCookieSigningOut", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Called when cookie authentication is signing out.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.Cookies.CookieSigningOutContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnCookieValidatePrincipal", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Called when cookie authentication is validating the principal.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.Cookies.CookieValidatePrincipalContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnOidcAuthenticationFailed", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Invoked if exceptions are thrown during request processing.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthenticationFailedContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnOidcAuthorizationCodeReceived", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Invoked after security token validation if an authorization code is present in the protocol message.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnOidcMessageReceived", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Invoked when a protocol message is first received.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.OpenIdConnect.MessageReceivedContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnOidcRedirectToIdentityProvider", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Invoked before redirecting to the identity provider to authenticate.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.OpenIdConnect.RedirectContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnOidcRedirectToIdentityProviderForSignOut", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Invoked before redirecting to the identity provider to sign out.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.OpenIdConnect.RedirectContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnOidcRemoteFailure", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Invoked when a remote failure occurs.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.RemoteFailureContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnOidcRemoteSignOut", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Invoked when a request is received on the remotes sign out path.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.OpenIdConnect.RemoteSignOutContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnOidcTicketReceived", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Invoked after a ticket is received.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.TicketReceivedContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnOidcTokenResponseReceived", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Invoked after authorization code is redeemed for tokens at the token endpoint.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.OpenIdConnect.TokenResponseReceivedContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnOidcTokenValidated", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Invoked when an identity token has been validated and produced an authentication ticket.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.OpenIdConnect.TokenValidatedContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("OnOidcUserInformationReceived", "System.Threading.Tasks.Task")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Invoked when user information is retrieved from the user info endpoint.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                    }
                })
                    .WithParameter(new MethodParameterModel("context", "Microsoft.AspNetCore.Authentication.OpenIdConnect.UserInformationReceivedContext")
                    {
                        Documentation = new DocumentationModel("The context.")
                    })
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("AddRequestCultureProviders", "void")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                    Documentation = new DocumentationModel("Adds request culture providers.")
                })
                    .WithParameter(new MethodParameterModel("app", "Microsoft.AspNetCore.Builder.IApplicationBuilder")
                    {
                        Documentation = new DocumentationModel("The current application.")
                    })
                    .WithParameter(new MethodParameterModel("options", "Microsoft.AspNetCore.Builder.RequestLocalizationOptions")
                    {
                        Documentation = new DocumentationModel("The request localization options.")
                    })
                    .ParentModelAs<ClassModel>();

            baseClassModel
                .AddMethod(new MethodModel("LogOidcAuthenticationFailed")
                {
                    Modifiers = MethodModifiers.Private | MethodModifiers.Static | MethodModifiers.Partial,
                    Body = null
                })
                    .WithParameter(new MethodParameterModel("logger", "Microsoft.Extensions.Logging.ILogger"))
                    .WithParameter(new MethodParameterModel("error", "string?"))
                    .WithAttribute(new AttributeModel("Microsoft.Extensions.Logging.LoggerMessage(EventId = 6, Level = LogLevel.Warning, Message = \"OIDC: authentication failed. Error: {Error}.\")"))
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("LogOidcRemoteFailure")
                {
                    Modifiers = MethodModifiers.Private | MethodModifiers.Static | MethodModifiers.Partial,
                    Body = null
                })
                    .WithParameter(new MethodParameterModel("logger", "Microsoft.Extensions.Logging.ILogger"))
                    .WithParameter(new MethodParameterModel("error", "string?"))
                    .WithAttribute(new AttributeModel("Microsoft.Extensions.Logging.LoggerMessage(EventId = 7, Level = LogLevel.Warning, Message = \"OIDC: remote failure. Error: {Error}.\")"))
                    .ParentModelAs<ClassModel>()
                .AddMethod(new MethodModel("LogOidcUserInfoReceived")
                {
                    Modifiers = MethodModifiers.Private | MethodModifiers.Static | MethodModifiers.Partial,
                    Body = null
                })
                    .WithParameter(new MethodParameterModel("logger", "Microsoft.Extensions.Logging.ILogger"))
                    .WithParameter(new MethodParameterModel("user", "string?"))
                    .WithAttribute(new AttributeModel("Microsoft.Extensions.Logging.LoggerMessage(EventId = 8, Level = LogLevel.Debug, Message = \"OIDC: user information received. User: '{User}'.\")"))
                    .ParentModelAs<ClassModel>()
                ;
        }

        if (sourceModel.AuthorizationPolicies.Count > 0)
        {
            foreach (AuthorizationPolicy policy in sourceModel.AuthorizationPolicies.Where(i => i.Kind == Primavera.Lithium.Sdk.Modeling.ServiceDesigner.AuthorizationPolicyKind.Custom).OrderBy(i => i.Name))
            {
                baseClassModel
                    .AddMethod(new MethodModel("Configure{0}Policy".Format(policy.Name))
                    {
                        Modifiers = MethodModifiers.Abstract | MethodModifiers.Protected,
                        Documentation = new DocumentationModel("Called to configure the '{0}' authorization policy.".Format(policy.Name))
                        {
                            Remarks = "The method is called from <see cref=\"AddAuthorizationPolicies(Microsoft.AspNetCore.Authorization.AuthorizationOptions, Common.Configuration.HostConfiguration)\"/>."
                        }
                    })
                        .WithParameter(new MethodParameterModel("policy", "Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder")
                        {
                            Documentation = new DocumentationModel("The authorization policy builder.")
                        });
            }
        }
    }

    if (sourceModel.Dependencies.Any(d => d.Kind == DependencyKind.DistributedCache))
    {
        baseClassModel
            .AddMethod(new MethodModel("AddDistributedCache")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure the distributed cache service.")
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                });
    }

    if (sourceModel.Dependencies.Any(d => d.Kind == DependencyKind.TableStorage))
    {
        baseClassModel
            .AddMethod(new MethodModel("AddAzureTableStorage")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure the table storage service.")
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                });
    }

    if (sourceModel.Dependencies.Any(d => d.Kind == DependencyKind.BlobStorage))
    {
        baseClassModel
            .AddMethod(new MethodModel("AddAzureBlobStorage")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure the blob storage service.")
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                });
    }

    if (sourceModel.Dependencies.Any(d => d.Kind == DependencyKind.Search))
    {
        baseClassModel
            .AddMethod(new MethodModel("AddAzureSearch")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure the search service.")
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                });
    }

    if (sourceModel.Dependencies.Any(d => d.Kind == DependencyKind.Pipelines))
    {
        baseClassModel
            .AddMethod(new MethodModel("AddPipelines")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called configure the pipelines.")
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                });
    }

    if (sourceModel.Dependencies.Any(d => d.Kind == DependencyKind.DataProtection))
    {
        baseClassModel
            .AddMethod(new MethodModel("AddDataProtection")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure data protection services.")
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                });
    }

    if (sourceModel.Dependencies.Any(d => d.Kind == DependencyKind.SecretsStorage))
    {
        baseClassModel
            .AddMethod(new MethodModel("AddSecretsStorage")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure the secrets storage services.")
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                });
    }

    if (sourceModel.Dependencies.Any(d => d.Kind == DependencyKind.MessageBus))
    {
        baseClassModel
            .AddMethod(new MethodModel("AddAzureServiceBusMessageBus")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure the message bus services.")
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                });
    }

    if (sourceModel.Dependencies.Any(d => d.Kind == DependencyKind.MultiModelDatabase))
    {
        baseClassModel
            .AddMethod(new MethodModel("AddCosmosDbMultiModelDatabase")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure the multi-model database service.")
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                });
    }

    if (sourceModel.Dependencies.Any(d => d.Kind == DependencyKind.Taskbox))
    {
        baseClassModel
            .AddMethod(new MethodModel("AddTaskbox")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure the task box.")
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                });
    }

    if (sourceModel.Webhooks.Any())
    {
        baseClassModel
            .AddMethod(new MethodModel("AddWebhooks")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Called to configure the webhooks services.")
            })
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                })
                .ParentModelAs<ClassModel>();
    }

    baseClassModel
        .AddMethod(new MethodModel("AddAzureManagedConfiguration")
        {
            Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
            Documentation = new DocumentationModel("Called when configuring services required to activate Azure Managed Configuration.")
        })
            .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
            {
                Documentation = new DocumentationModel("The service collection.")
            })
            .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
            {
                Documentation = new DocumentationModel("The host configuration.")
            })
            .ParentModelAs<ClassModel>();

    baseClassModel
        .AddMethod(new MethodModel("AddHealthMonitoring")
        {
            Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
            Documentation = new DocumentationModel("Called when configuring services required to activate health monitoring.")
        })
            .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
            {
                Documentation = new DocumentationModel("The service collection.")
            })
            .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
            {
                Documentation = new DocumentationModel("The host configuration.")
            })
            .ParentModelAs<ClassModel>();

    baseClassModel
        .AddMethod(new MethodModel("AddServiceCatalog")
        {
            Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
            Documentation = new DocumentationModel("Called when configuring services required to activate the service catalog.")
        })
            .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
            {
                Documentation = new DocumentationModel("The service collection.")
            })
            .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
            {
                Documentation = new DocumentationModel("The host configuration.")
            })
            .ParentModelAs<ClassModel>();

    // ... Service dependencies

    foreach (ServiceDependency serviceDependency in sourceModel.ServiceDependencies)
    {
        ServiceDescriptionData info = ServiceCatalogServiceProxy.GetServiceByName(serviceDependency.NameProvider);
        if (info != null && info.ClientLibraryDocumentation != null)
        {
            baseClassModel.AddMethod(
                new MethodModel($"Add{serviceDependency.NameProvider}ServiceClient")
                {
                    Modifiers = MethodModifiers.Protected | MethodModifiers.Abstract,
                    Documentation = new DocumentationModel($"Adds the {serviceDependency.NameProvider} service REST service client to the service collection.")
                    {
                        Remarks = "This method should register the service client using the extension methods provided by the service's client library.\nThis requires adding the appropriate package reference to the solution."
                    }
                }
                .WithParameter(new MethodParameterModel("services", "Microsoft.Extensions.DependencyInjection.IServiceCollection")
                {
                    Documentation = new DocumentationModel("The service collection.")
                })
                .WithParameter(new MethodParameterModel("hostConfiguration", "Common.Configuration.HostConfiguration")
                {
                    Documentation = new DocumentationModel("The host configuration.")
                }));
        }
    }

    // Class

    targetModel.Namespace
        .AddClass(new ClassModel("Startup")
        {
            Modifiers = ClassModifiers.Public | ClassModifiers.Partial,
            Inheritance = "StartupBase",
            Documentation = new DocumentationModel("Provides the application initialization logic.")
        })
            .AddConstructor(new ConstructorModel()
            {
                Modifiers = ConstructorModifiers.Public,
                Inheritance = "base(env, configuration)",
                Documentation = new DocumentationModel("Initializes a new instance of the <see cref=\"Startup\" /> class.")
            })
                .WithParameter(new MethodParameterModel("env", "Microsoft.Extensions.Hosting.IHostEnvironment")
                {
                    Documentation = new DocumentationModel("The current host environment.")
                })
                .WithParameter(new MethodParameterModel("configuration", "Microsoft.Extensions.Configuration.IConfiguration")
                {
                    Documentation = new DocumentationModel("The current configuration.")
                });
}

#>