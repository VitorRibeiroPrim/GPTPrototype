<#+

// *** TransformServiceModel

public void TransformServiceModel(DomainModelElement sourceElement, CSharpFileModel targetModel)
{
    ServiceModel serviceModel = sourceElement as ServiceModel;
    if (serviceModel == null)
    {
        return;
    }

    targetModel.Namespace = new NamespaceModel(serviceModel.Namespace + ".Server.Host.Controllers");

    // Home controller

    if (serviceModel.Settings.GenerateHomeController)
    {
        InterfaceModel homeInterface = targetModel.Namespace
            .AddInterface(
                new InterfaceModel("IHomeController")
                {
                    Modifiers = InterfaceModifiers.Public | InterfaceModifiers.Partial,
                    Documentation = new DocumentationModel("Defines the interface of the controller that provides the home routes.")
                })
                .AddMethod(
                    new MethodModel("IndexAsync", "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>")
                    {
                        Documentation = new DocumentationModel("Provides an action that responds in the default (root) route.")
                        {
                            Returns = "The <see cref=\"System.Threading.Tasks.Task{TResult}\"/> that represents the asynchronous operation.\nThe <see cref=\"Microsoft.AspNetCore.Mvc.IActionResult\"/> that describes the action result."
                        }
                    })
                    .WithParameter(
                        new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken", "default")
                        {
                            Documentation = new DocumentationModel("The cancellation token.")
                        })
                    .ParentModelAs<InterfaceModel>()
                .AddMethod(
                    new MethodModel("ErrorAsync", "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>")
                    {
                        Documentation = new DocumentationModel("Provides an action that responds in the error route.")
                        {
                            Returns = "The <see cref=\"System.Threading.Tasks.Task{TResult}\"/> that represents the asynchronous operation.\nThe <see cref=\"Microsoft.AspNetCore.Mvc.IActionResult\"/> that describes the action result."
                        }
                    })
                    .WithParameter(
                        new MethodParameterModel("statusCode", "int")
                        {
                            Documentation = new DocumentationModel("The error status code.")
                        })
                    .WithParameter(
                        new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken", "default")
                        {
                            Documentation = new DocumentationModel("The cancellation token.")
                        })
                    .ParentModelAs<InterfaceModel>();

        if (serviceModel.Settings.GenerateOidcSupport)
        {
            homeInterface
                .AddMethod(
                    new MethodModel("AccessDeniedAsync", "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>")
                    {
                        Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                        Documentation = new DocumentationModel("Provides an action that responds in the access denied route.")
                        {
                            Returns = "The <see cref=\"System.Threading.Tasks.Task{TResult}\"/> that represents the asynchronous operation.\nThe <see cref=\"Microsoft.AspNetCore.Mvc.IActionResult\"/> that describes the action result."
                        }
                    })
                    .WithParameter(
                        new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken", "default")
                        {
                            Documentation = new DocumentationModel("The cancellation token.")
                        })
                    .ParentModelAs<InterfaceModel>()
                .AddMethod(
                    new MethodModel("SignoutAsync", "System.Threading.Tasks.Task")
                    {
                        Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                        Documentation = new DocumentationModel("Provides an action that responds in the sign-out route.")
                        {
                            Returns = "The <see cref=\"System.Threading.Tasks.Task\"/> that represents the asynchronous operation."
                        }
                    })
                    .WithParameter(
                        new MethodParameterModel("returnUri", "string?", "null")
                        {
                            Documentation = new DocumentationModel("The return URI.")
                        })
                    .ParentModelAs<InterfaceModel>();
        }
    }

    // Monitoring controller

    targetModel.Namespace
        .AddInterface(new InterfaceModel("IMonitoringController")
        {
            Modifiers = InterfaceModifiers.Public | InterfaceModifiers.Partial,
            Documentation = new DocumentationModel("Defines the interface of the controller that provides monitoring routes.")
        })
            .AddMethod(new MethodModel("ProbeAsync", "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>")
            {
                Documentation = new DocumentationModel("Provides an action that probes the health of the service.")
                {
                    Returns = "The <see cref=\"System.Threading.Tasks.Task{TResult}\"/> that represents the asynchronous operation.\nThe <see cref=\"Microsoft.AspNetCore.Mvc.IActionResult\"/> that describes the action result.\n<see cref=\"System.Net.HttpStatusCode.OK\"/> with a response content describing the service health."
                }
            })
                .WithParameter(new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken", "default")
                {
                    Documentation = new DocumentationModel("The cancellation token.")
                })
                .ParentModelAs<InterfaceModel>()
            .AddMethod(new MethodModel("DiagnosticsAsync", "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>")
            {
                Documentation = new DocumentationModel("Provides an action that diagnoses the health of the service.")
                {
                    Returns = "The <see cref=\"System.Threading.Tasks.Task{TResult}\"/> that represents the asynchronous operation.\nThe <see cref=\"Microsoft.AspNetCore.Mvc.IActionResult\"/> that describes the action result.\n<see cref=\"System.Net.HttpStatusCode.OK\"/> with a response content describing the service health."
                }
            })
                .WithParameter(new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken", "default")
                {
                    Documentation = new DocumentationModel("The cancellation token.")
                })
                .ParentModelAs<InterfaceModel>()
            .AddMethod(new MethodModel("EndpointsAsync", "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>")
            {
                Documentation = new DocumentationModel("Provides an action that analyzes the endpoints available in the service.")
                {
                    Returns = "The <see cref=\"System.Threading.Tasks.Task{TResult}\"/> that represents the asynchronous operation.\nThe <see cref=\"Microsoft.AspNetCore.Mvc.IActionResult\"/> that describes the action result.\n<see cref=\"System.Net.HttpStatusCode.OK\"/> with a response content including the list of endpoints available."
                }
            })
                .WithParameter(new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken", "default")
                {
                    Documentation = new DocumentationModel("The cancellation token.")
                })
                .ParentModelAs<InterfaceModel>()
            .AddMethod(new MethodModel("ConfigurationAsync", "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>")
            {
                Documentation = new DocumentationModel("Provides an action that analyzes the configuration of the service.")
                {
                    Returns = "The <see cref=\"System.Threading.Tasks.Task{TResult}\"/> that represents the asynchronous operation.\nThe <see cref=\"Microsoft.AspNetCore.Mvc.IActionResult\"/> that describes the action result.\n<see cref=\"System.Net.HttpStatusCode.OK\"/> with a response content indicating where the configuration was saved.",
                    Remarks = "If the service uses blob storage, the configuration options will be dumped in a blob container named 'ConfigAnalyzer'. Otherwise, the configuration options will be saved in a file named 'ConfigAnalyzer.json'."
                }
            })
                .WithParameter(new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken", "default")
                {
                    Documentation = new DocumentationModel("The cancellation token.")
                })
                .ParentModelAs<InterfaceModel>()
            .AddMethod(new MethodModel("InformationAsync", "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>")
            {
                Documentation = new DocumentationModel("Provides an action that returns information about the service.")
                {
                    Returns = "The <see cref=\"System.Threading.Tasks.Task{TResult}\"/> that represents the asynchronous operation.\nThe <see cref=\"Microsoft.AspNetCore.Mvc.IActionResult\"/> that describes the action result.\n<see cref=\"System.Net.HttpStatusCode.OK\"/> with a response content including the information about the service."
                }
            })
                .WithParameter(new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken", "default")
                {
                    Documentation = new DocumentationModel("The cancellation token.")
                })
                .ParentModelAs<InterfaceModel>();

    // Client library documentation controller

    targetModel.Namespace
        .AddInterface(new InterfaceModel("IClientLibDocumentationController")
        {
            Modifiers = InterfaceModifiers.Public | InterfaceModifiers.Partial,
            Documentation = new DocumentationModel("Defines the interface of the controller that provides the client library documentation routes.")
        })
            .AddMethod(new MethodModel("DocumentationAsync", "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>")
            {
                Documentation = new DocumentationModel("Provides an action that shows the client library documentation.")
                {
                    Returns = "The <see cref=\"System.Threading.Tasks.Task{TResult}\"/> that represents the asynchronous operation.\nThe <see cref=\"Microsoft.AspNetCore.Mvc.IActionResult\"/> that describes the action result."
                }
            })
                .WithParameter(new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken", "default")
                {
                    Documentation = new DocumentationModel("The cancellation token.")
                })
                .ParentModelAs<InterfaceModel>();

    // Webhooks documentation controller

    if (serviceModel.Webhooks.Count > 0)
    {
        targetModel.Namespace
            .AddInterface(new InterfaceModel("IWebhooksDocumentationController")
            {
                Modifiers = InterfaceModifiers.Public | InterfaceModifiers.Partial,
                Documentation = new DocumentationModel("Defines the interface of the controller that provides the webhooks documentation routes.")
            })
                .AddMethod(new MethodModel("DocumentationAsync", "System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult>")
                {
                    Documentation = new DocumentationModel("Provides an action that shows the webhooks documentation.")
                    {
                        Returns = "The <see cref=\"System.Threading.Tasks.Task{TResult}\"/> that represents the asynchronous operation.\nThe <see cref=\"Microsoft.AspNetCore.Mvc.IActionResult\"/> that describes the action result."
                    }
                })
                    .WithParameter(new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken", "default")
                    {
                        Documentation = new DocumentationModel("The cancellation token.")
                    })
                    .ParentModelAs<InterfaceModel>();
    }
}

#>