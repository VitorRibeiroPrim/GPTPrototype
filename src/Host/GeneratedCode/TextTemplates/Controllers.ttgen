<#@ template debug="false" hostspecific="true" inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".gen.cs" #>
<#@ ServiceDesigner processor="ServiceDesignerDirectiveProcessor" requires="FileName=''" #>
<#

// Build the transformations

ServiceModelTransformations<CSharpFileModel> transformations = new ServiceModelTransformations<CSharpFileModel>(this.ServiceModel);

transformations.Add(
    (s, t) => true,
    (s, t) => { return s is ServiceModel; },
    this.TransformServiceModel);

transformations.Add(
    (s, t) => true,
    (s, t) => { return s is ServiceModel; },
    this.TransformHomeController);

transformations.Add(
    (s, t) => true,
    (s, t) => { return s is ServiceModel; },
    this.TransformMonitoringController);

transformations.Add(
    (s, t) => true,
    (s, t) => { return s is ServiceModel; },
    this.TransformClientLibDocumentationController);

transformations.Add(
    (s, t) => true,
    (s, t) => { return s is ServiceModel; },
    this.TransformWebhooksDocumentationController);

// Transform

CSharpFileModel targetModel = new CSharpFileModel(this.ServiceModel);
transformations.TransformTo(targetModel);

// Create controller

ModelWriterController controller = new ModelWriterController(this.GenerationEnvironment);

controller.AddModelWriter<ConstructorBodyModel>(
    (w, m) =>
    {
        ConstructorModel parentConstructor = m.ParentModelAs<ConstructorModel>();
        ClassModel parentClass = parentConstructor.ParentModelAs<ClassModel>();
        return parentClass.Name.EqualsNoCase("AppControllerBase");
    }, 
    this.WriteAppControllerBaseConstructor);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("Validate");
    }, 
    this.WriteValidate);

// Add writers (Home)

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("IndexAsync");
    }, 
    this.WriteIndexAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AccessDeniedAsync");
    }, 
    this.WriteAccessDeniedAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("SignoutAsync");
    }, 
    this.WriteSignoutAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("ErrorAsync");
    }, 
    this.WriteErrorAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("ShowErrorAsync");
    }, 
    this.WriteShowErrorAsync);

// Add writers (Client Library Documentation)

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        ClassModel parentClass = parentMethod.ParentModelAs<ClassModel>();
        return parentClass.Name.EqualsNoCase("ClientLibDocumentationControllerBase") && parentMethod.Name.EqualsNoCase("DocumentationAsync");
    }, 
    this.WriteClientLibDocumentationAsync);

// Add writers (Webhooks Documentation)

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        ClassModel parentClass = parentMethod.ParentModelAs<ClassModel>();
        return parentClass.Name.EqualsNoCase("WebhooksDocumentationControllerBase") && parentMethod.Name.EqualsNoCase("DocumentationAsync");
    }, 
    this.WriteWebhooksDocumentationAsync);

// Add writers (Monitoring)

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("ProbeAsync");
    }, 
    this.WriteProbeAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("DiagnosticsAsync");
    }, 
    this.WriteDiagnosticsAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddAzureManagedConfigurationProbes");
    }, 
    this.WriteAddAzureManagedConfigurationProbes);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddAzureManagedConfigurationDiagnostics");
    }, 
    this.WriteAddAzureManagedConfigurationDiagnostics);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddDependenciesProbes");
    }, 
    this.WriteAddDependenciesProbes);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddDependenciesDiagnostics");
    }, 
    this.WriteAddDependenciesDiagnostics);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddServiceDependenciesDiagnostics");
    }, 
    this.WriteAddServiceDependenciesDiagnostics);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddProbeDistributedCache");
    }, 
    this.WriteAddProbeDistributedCache);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddDiagnosticDistributedCache");
    }, 
    this.WriteAddDiagnosticDistributedCache);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddProbeTableStorage");
    }, 
    this.WriteAddProbeTableStorage);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddDiagnosticTableStorage");
    }, 
    this.WriteAddDiagnosticTableStorage);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddProbeBlobStorage");
    }, 
    this.WriteAddProbeBlobStorage);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddDiagnosticBlobStorage");
    }, 
    this.WriteAddDiagnosticBlobStorage);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddProbeSearch");
    }, 
    this.WriteAddProbeSearch);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddDiagnosticSearch");
    }, 
    this.WriteAddDiagnosticSearch);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddProbeDataProtection");
    }, 
    this.WriteAddProbeDataProtection);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddDiagnosticDataProtection");
    }, 
    this.WriteAddDiagnosticDataProtection);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddProbeSecretsStorage");
    }, 
    this.WriteAddProbeSecretsStorage);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddDiagnosticSecretsStorage");
    }, 
    this.WriteAddDiagnosticSecretsStorage);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddProbeMessageBus");
    }, 
    this.WriteAddProbeMessageBus);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddDiagnosticMessageBus");
    }, 
    this.WriteAddDiagnosticMessageBus);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddProbeMultiModelDatabase");
    }, 
    this.WriteAddProbeMultiModelDatabase);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddDiagnosticMultiModelDatabase");
    }, 
    this.WriteAddDiagnosticMultiModelDatabase);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddProbeTaskbox");
    }, 
    this.WriteAddProbeTaskbox);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddDiagnosticTaskbox");
    }, 
    this.WriteAddDiagnosticTaskbox);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddBackgroundServicesProbes");
    }, 
    this.WriteAddBackgroundServicesProbes);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddBackgroundServicesDiagnostics");
    }, 
    this.WriteAddBackgroundServicesDiagnostics);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddWebhooksProbes");
    }, 
    this.WriteAddWebhooksProbes);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddWebhooksDiagnostics");
    }, 
    this.WriteAddWebhooksDiagnostics);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddAdditionalProbes");
    }, 
    this.WriteAddAdditionalProbes);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddAdditionalDiagnostics");
    }, 
    this.WriteAddAdditionalDiagnostics);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("EndpointsAsync");
    }, 
    this.WriteEndpointsAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("ConfigurationAsync");
    }, 
    this.WriteConfigurationAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("InformationAsync");
    }, 
    this.WriteInformationAsync);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("GetInformationFromAssembly");
    }, 
    this.WriteGetInformationFromAssembly);

// Generate code

controller.Write(targetModel);

#>