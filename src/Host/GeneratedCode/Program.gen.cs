//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

// Ignore Spelling: App
// Ignore Spelling: appsettings
// Ignore Spelling: wwwroot

namespace Primavera.Lithium.ChatGPT.Server.Host;

#region Code

#region Public Classes

/// <summary>
/// Defines the starting point of the application.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
public static class Program
{
    #region Code

    #region Public Methods

    /// <summary>
    /// Executes the application.
    /// </summary>
    /// <param name="args">The arguments.</param>
    public static void Main(string[] args)
    {
        HostBuilder builder = new HostBuilder();

        Microsoft.Extensions.Hosting.IHost host = builder.Build(args);

        host.Run();
    }

    #endregion

    #endregion
}

#endregion

#region Internal Classes

/// <summary>
/// Defines the base class for the host builder.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
internal abstract partial class HostBuilderBase
{
    #region Code

    #region Protected Properties

    /// <summary>
    /// Gets a value indicating whether startup errors should be captured. The default value is false.
    /// </summary>
    protected virtual bool CaptureStartupErrors => false;

    /// <summary>
    /// Gets a value indicating whether development settings should be used regardless of the current environment. The default value is false.
    /// </summary>
    protected virtual bool UseDevelopmentSettings => false;

    #endregion

    #region Protected Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="HostBuilderBase" /> class.
    /// </summary>
    protected HostBuilderBase()
    {
    }

    #endregion

    #region Public Methods

    /// <summary>
    /// Builds the <see cref="Microsoft.Extensions.Hosting.IHost" /> instance.
    /// </summary>
    /// <param name="args">The arguments.</param>
    /// <returns>
    /// The <see cref="Microsoft.Extensions.Hosting.IHost" /> instance.
    /// </returns>
    public virtual Microsoft.Extensions.Hosting.IHost Build(string[] args)
    {
        Microsoft.Extensions.Hosting.IHostBuilder builder = Microsoft.Extensions.Hosting.Host.CreateDefaultBuilder(args)
            .UseContentRoot(
                System.IO.Directory.GetCurrentDirectory());

        // NOTES:
        // The call to ConfigureWebHostDefaults() must be the last
        // so that Startup is initialized in the correct order,
        // after everything else

        return builder
            .ConfigureHostConfiguration(
                this.ConfigureHostConfiguration)
            .ConfigureLogging(
                this.ConfigureLogging)
            .ConfigureServices(
                this.ConfigureServices)
            .ConfigureAppConfiguration(
                this.ConfigureAppConfiguration)
            .ConfigureWebHostDefaults(
                this.ConfigureWebHostDefaults)
            .Build();
    }

    #endregion

    #region Protected Methods

    /// <summary>
    /// Configures the application configuration.
    /// </summary>
    /// <param name="context">The host builder context.</param>
    /// <param name="builder">The configuration builder.</param>
    protected virtual void ConfigureAppConfiguration(Microsoft.Extensions.Hosting.HostBuilderContext context, Microsoft.Extensions.Configuration.IConfigurationBuilder builder)
    {
        // NOTES:
        // This ensures that the wwwroot directory exists
        // in the host so that middleware depending on
        // that does not fail (e.g. markdown)

        this.EnsureWebRootDirectory(context);

        // NOTES:
        // Order here is relevant
        // File names are case sensitive in Linux

        string? environmentName = context.HostingEnvironment.EnvironmentName
            .Transform()
            .ToLowerCase();

        builder
            .AddJsonFile($"GeneratedCode/appsettings.gen.json", optional: false, reloadOnChange: true)
            .AddJsonFile($"CustomCode/appsettings.json", optional: true, reloadOnChange: true)
            .AddJsonFile($"GeneratedCode/appsettings-{environmentName}.gen.json", optional: true, reloadOnChange: true)
            .AddJsonFile($"CustomCode/appsettings-{environmentName}.json", optional: true, reloadOnChange: true);

        builder
            .AddEnvironmentVariables();

        // NOTES:
        // This adds Azure App Configuration, depending on the services'
        // environment variables

        builder
            .AddAzureManagedConfiguration();
    }

    /// <summary>
    /// Configures the services.
    /// </summary>
    /// <param name="context">The host builder context.</param>
    /// <param name="services">The service collection.</param>
    protected virtual void ConfigureServices(Microsoft.Extensions.Hosting.HostBuilderContext context, Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
    }

    /// <summary>
    /// Configures logging.
    /// </summary>
    /// <param name="context">The host builder context.</param>
    /// <param name="builder">The logging builder.</param>
    protected virtual void ConfigureLogging(Microsoft.Extensions.Hosting.HostBuilderContext context, Microsoft.Extensions.Logging.ILoggingBuilder builder)
    {
        builder
            .ClearProviders();

        builder
            .AddConfiguration(context.Configuration.GetSection("Logging"));

        bool useDevelopmentSettings = this.UseDevelopmentSettings || context.HostingEnvironment.IsDevelopment();

        if (useDevelopmentSettings)
        {
            builder
                .AddConsole()
                .AddDebug();
        }
    }

    /// <summary>
    /// Configures the host configuration.
    /// </summary>
    /// <param name="builder">The configuration builder.</param>
    protected virtual void ConfigureHostConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder builder)
    {
    }

    /// <summary>
    /// Configures the Web host defaults.
    /// </summary>
    /// <param name="builder">The Web host builder.</param>
    protected virtual void ConfigureWebHostDefaults(Microsoft.AspNetCore.Hosting.IWebHostBuilder builder)
    {
        if (this.CaptureStartupErrors)
        {
            builder
                .UseSetting("detailedErrors", "true")
                .CaptureStartupErrors(true);
        }

        builder
            .UseStartup<Startup>();
    }

    /// <summary>
    /// Ensures that the Web root directory exists.
    /// </summary>
    /// <param name="context">The Web host builder context.</param>
    protected virtual void EnsureWebRootDirectory(Microsoft.Extensions.Hosting.HostBuilderContext context)
    {
        System.IO.DirectoryInfo directory = new System.IO.DirectoryInfo(
            System.IO.Path.Combine(
                context.HostingEnvironment.ContentRootPath,
                "wwwroot"));

        if (!directory.Exists)
        {
            directory.Create();
        }
    }

    #endregion

    #endregion
}

/// <summary>
/// Defines the host builder.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
internal partial class HostBuilder : HostBuilderBase
{
    #region Code

    #region Public Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="HostBuilder" /> class.
    /// </summary>
    public HostBuilder()
        : base()
    {
    }

    #endregion

    #endregion
}

#endregion

#endregion
