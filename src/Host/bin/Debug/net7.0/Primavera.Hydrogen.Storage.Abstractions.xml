<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Primavera.Hydrogen.Storage.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Primavera.Hydrogen.Storage.Blobs.BlobStorageError">
            <summary>
            Indicates the code of the error in a <see cref="T:Primavera.Hydrogen.Storage.Blobs.BlobStorageException" />.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.ServerUnavailable">
            <summary>
            Could not connect to the storage server.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.InvalidApplicationIdentity">
            <summary>
            The application identity is invalid.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.InvalidContainerName">
            <summary>
            The container name is invalid.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.ContainerAlreadyExists">
            <summary>
            The container already exists.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.ContainerBeingDeleted">
            <summary>
            The container is being deleted.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.ContainerDisabled">
            <summary>
            The container is disabled.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.InvalidBlobName">
            <summary>
            The blob name is invalid.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.BlobAlreadyExists">
            <summary>
            The blob already exists.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.BlobNotFound">
            <summary>
            The blob does not exist.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.ContainerNotFound">
            <summary>
            The container does not exist.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.BadRequest">
            <summary>
            The server returned an error with status code <see cref="F:System.Net.HttpStatusCode.BadRequest"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.Conflict">
            <summary>
            The server returned an error with status code <see cref="F:System.Net.HttpStatusCode.Conflict"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.NotFound">
            <summary>
            The server returned an error with status code <see cref="F:System.Net.HttpStatusCode.NotFound"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.Forbidden">
            <summary>
            The server returned an error with status code <see cref="F:System.Net.HttpStatusCode.Forbidden"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.Unauthorized">
            <summary>
            The server returned an error with status code <see cref="F:System.Net.HttpStatusCode.Unauthorized"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.Unexpected">
            <summary>
            The error is unexpected.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobStorageError.Unspecified">
            <summary>
            The error code was not specified by the code that raised the exception.
            </summary>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Blobs.BlobStorageException">
            <summary>
            Represents errors raised by the <see cref="T:Primavera.Hydrogen.Storage.Blobs.IBlobStorageService"/>.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Blobs.BlobStorageException.ErrorCode">
            <summary>
            Gets the code of the error that caused the exception.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.BlobStorageException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Blobs.BlobStorageException"/> class.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.BlobStorageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Blobs.BlobStorageException"/> class.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.BlobStorageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Blobs.BlobStorageException"/> class.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">Represents the exception that caused this error.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.BlobStorageException.#ctor(Primavera.Hydrogen.Storage.Blobs.BlobStorageError)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Blobs.BlobStorageException" /> class.
            </summary>
            <param name="error">The code of the error that caused the exception.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.BlobStorageException.#ctor(Primavera.Hydrogen.Storage.Blobs.BlobStorageError,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Blobs.BlobStorageException" /> class.
            </summary>
            <param name="error">The code of the error that caused the exception.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.BlobStorageException.#ctor(Primavera.Hydrogen.Storage.Blobs.BlobStorageError,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Blobs.BlobStorageException"/> class.
            </summary>
            <param name="error">The code of the error that caused the exception.</param>
            <param name="message">The error message.</param>
            <param name="innerException">The exception that caused this error.</param>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Blobs.BlobType">
            <summary>
            Defines the type of a blob.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobType.Unknown">
            <summary>
            The blob type is unknown.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.BlobType.BlockBlob">
            <summary>
            The blob is a block blob.
            </summary>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Blobs.ContainerPublicAccessType">
            <summary>
            Describes the public access type allowed on a container.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.ContainerPublicAccessType.NoAccess">
            <summary>
            The container and its blobs cannot be accessed with anonymous requests.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.ContainerPublicAccessType.BlobsOnly">
            <summary>
            Only the blobs in the container can be read with anonymous requests.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.ContainerPublicAccessType.BlobsAndContainer">
            <summary>
            Both the blobs in the container and the container itself can be read with anonymous requests.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Blobs.ContainerPublicAccessType.Unknown">
            <summary>
            The access type is unknown.
            </summary>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Blobs.IBlobProperties">
            <summary>
            Describes the properties of a blob.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Blobs.IBlobProperties.BlobType">
            <summary>
            Gets the blob type.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Blobs.IBlobProperties.Created">
            <summary>
            Gets the moment when the blob was created.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Blobs.IBlobProperties.LastModified">
            <summary>
            Gets the moment when the blob was last modified.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Blobs.IBlobProperties.LastAccessed">
            <summary>
            Gets the moment when the blob was last accessed.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Blobs.IBlobProperties.ContentType">
            <summary>
            Gets the blob content type.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Blobs.IBlobProperties.ContentEncoding">
            <summary>
            Gets the blob content encoding.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Blobs.IBlobProperties.Length">
            <summary>
            Gets the blob length.
            </summary>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Blobs.IBlobReference">
            <summary>
            Defines the common interface for all kinds of blobs.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Blobs.IBlobReference.Name">
            <summary>
            Gets the blob name.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Blobs.IBlobReference.ContainerName">
            <summary>
            Gets the container name.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Blobs.IBlobReference.Uri">
            <summary>
            Gets the blob URI.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlobReference.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the blob.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlobReference.DeleteIfExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the blob if it exists.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the blob was actually deleted.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlobReference.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Determines whether the blob exists.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the blob exists.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlobReference.GetPropertiesAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves the blob properties.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The blob properties.
            </returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Blobs.IBlobStorageService">
            <summary>
            Defines the interface of the blob storage service.
            The blob storage service is a text and/or binary data store in the cloud.
            New instances of the service should be resolved via dependency injection to realize
            the concrete implementation.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Blobs.IBlobStorageService.Name">
            <summary>
            Gets the service name.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlobStorageService.GetContainer(System.String)">
            <summary>
            Gets a reference to the specified container.
            </summary>
            <param name="containerName">The name of the container.</param>
            <returns>The <see cref="T:Primavera.Hydrogen.Storage.Blobs.IContainerReference"/> that represents a reference to the container.</returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Blobs.IBlobStorageServiceFactory">
            <summary>
            Defines the interface of the blob storage service factory.
            This factory allows resolving named <see cref="T:Primavera.Hydrogen.Storage.Blobs.IBlobStorageService"/> instances.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlobStorageServiceFactory.GetService(System.String)">
            <summary>
            Retrieves the service previously registered with the specified name.
            </summary>
            <param name="name">The service name.</param>
            <returns>
            The <see cref="T:Primavera.Hydrogen.Storage.Blobs.IBlobStorageService"/> instance.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Raised if the specified named service was not previously
            registered.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlobStorageServiceFactory.GetServiceOrDefault(System.String)">
            <summary>
            Retrieves the service previously registered with the specified name or the default
            service if no service with that name has been registered.
            </summary>
            <param name="name">The service name.</param>
            <returns>
            The <see cref="T:Primavera.Hydrogen.Storage.Blobs.IBlobStorageService"/> instance.
            </returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference">
            <summary>
            Represents a reference to a block blob in the blob storage.
            Notice that this is simply a reference that allows performing operations on the referenced
            blob.
            A blob reference can exist before (and after) the blob actually exists in the storage (for,
            example, the reference is required to create a new blob).
            </summary>
            <example>
            To create a new block blob:
            <code>
            <![CDATA[
            IBlobStorageService service = provider.GetRequiredService<IBlobStorageService>();
            
            IContainerReference container = service.GetContainer("MyContainer");
            await container.CreateIfNotExistsAsync().ConfigureAwait(false);
            
            IBlockBlobReference blob = container.GetBlockBlob("MyBlob");
            await blob.CreateIfNotExistsAsync().ConfigureAwait(false);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference.DownloadToByteArrayAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Downloads the contents of the blob to the specified byte array.
            </summary>
            <param name="target">The target byte array.</param>
            <param name="index">The starting offset in the byte array.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The number of bytes written to the byte array.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.Blobs.BlobStorageException">
            Raised if the blob does not exist.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference.TryDownloadToByteArrayAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Tries to download the contents of the blob to the specified byte array.
            </summary>
            <param name="target">The target byte array.</param>
            <param name="index">The starting offset in the byte array.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The number of bytes written to the byte array.
            0 if the blob does not exist.
            </returns>
            <remarks>
            Does not raise error if the blob does not exist.
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference.UploadFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Uploads the specified byte array to the blob. If the blob already exists, it will be overwritten.
            </summary>
            <param name="buffer">The array containing the bytes that should be uploaded.</param>
            <param name="index">The zero-based byte offset in the buffer at which to begin uploading bytes to the blob.</param>
            <param name="count">The number of bytes that should be uploaded to the blob.</param>
            <param name="contentType">The content type that should be associated with the blob.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference.DownloadToFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Downloads the contents of the blob to a file.
            </summary>
            <param name="path">The path of the target file.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference.UploadFromFileAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Uploads the specified file to the blob. If the blob already exists, it will be overwritten.
            </summary>
            <param name="path">The path of the file that should be uploaded.</param>
            <param name="contentType">The content type that should be associated with the blob.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference.DownloadToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Downloads the contents of the blob to a stream.
            </summary>
            <param name="target">The target stream.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference.UploadFromStreamAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <summary>
            Uploads a stream to the blob. If the blob already exists, it will be overwritten.
            </summary>
            <param name="source">The stream that will provide the content that should be uploaded.</param>
            <param name="contentType">The content type that should be associated with the blob.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference.DownloadTextAsync(System.Threading.CancellationToken)">
            <summary>
            Downloads the contents of the blob as a string.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The contents of the blob as a string.
            </returns>
            <remarks>
            This method uses the <see cref="P:System.Text.Encoding.UTF8"/> encoding.
            </remarks>
            <exception cref="T:Primavera.Hydrogen.Storage.Blobs.BlobStorageException">
            Raised if the blob does not exist.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference.DownloadTextAsync(System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Downloads the contents of the blob as a string.
            </summary>
            <param name="encoding">The text encoding.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The contents of the blob as a string.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.Blobs.BlobStorageException">
            Raised if the blob does not exist.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference.TryDownloadTextAsync(System.Threading.CancellationToken)">
            <summary>
            Tries to download the contents of the blob as a string.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The contents of the blob as a string.
            Null if the blob does not exist.
            </returns>
            <remarks>
            This method uses the <see cref="P:System.Text.Encoding.UTF8"/> encoding.
            Does not raise error if the blob does not exist.
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference.TryDownloadTextAsync(System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Tries to download the contents of the blob as a string.
            </summary>
            <param name="encoding">The text encoding.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The contents of the blob as a string.
            Null if the blob does not exist.
            </returns>
            <remarks>
            Does not raise error if the blob does not exist.
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference.UploadTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Uploads a string of text to the blob. If the blob already exists, it will be overwritten.
            </summary>
            <param name="content">The string containing the text that should be uploaded.</param>
            <param name="contentType">The content type that should be associated with the blob.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
            <remarks>
            This method uses the <see cref="P:System.Text.Encoding.UTF8"/> encoding.
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference.UploadTextAsync(System.Text.Encoding,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Uploads a string of text to the blob. If the blob already exists, it will be overwritten.
            </summary>
            <param name="encoding">The text encoding.</param>
            <param name="content">The string containing the text that should be uploaded.</param>
            <param name="contentType">The content type that should be associated with the blob.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Blobs.IContainerPermissions">
            <summary>
            Represents the permissions set on a container.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Blobs.IContainerPermissions.PublicAccess">
            <summary>
            Gets or sets the public access type allowed on a container.
            </summary>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Blobs.IContainerReference">
            <summary>
            Represents a reference to a container in the blob storage.
            Notice that this is simply a reference that allows performing operations on the referenced
            container.
            A container reference can exist before (and after) the container actually exists in the storage (for,
            example, the reference is required to create a new container).
            </summary>
            <example>
            To create a new container:
            <code>
            <![CDATA[
            IBlobStorageService service = provider.GetRequiredService<IBlobStorageService>();
            IContainerReference container = service.GetContainer("MyContainer");
            container.CreateIfNotExists();
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Blobs.IContainerReference.Name">
            <summary>
            Gets the container name.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IContainerReference.CreateAsync(Primavera.Hydrogen.Storage.Blobs.ContainerPublicAccessType,System.Threading.CancellationToken)">
            <summary>
            Creates the container.
            </summary>
            <param name="publicAccess">The public access type allowed on a container.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IContainerReference.CreateIfNotExistsAsync(Primavera.Hydrogen.Storage.Blobs.ContainerPublicAccessType,System.Threading.CancellationToken)">
            <summary>
            Creates the container if it does not already exist.
            </summary>
            <param name="publicAccess">The public access type allowed on a container.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the container was actually created.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IContainerReference.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the container.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
            <remarks>
            Keep in mind that deleting a container is a slow operation that will be executed asynchronously
            by the storage server. This may result in situations where the following code would return
            in an error in the create operation because the container could still exist on the server (in
            the process of being deleted).
            <code>
            <![CDATA[
            await container.DeleteAsync();
            await container.CreateAsync();
            ]]>
            </code>
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IContainerReference.DeleteIfExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the container if it exists.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the container was actually deleted.
            </returns>
            <remarks>
            Keep in mind that deleting a container is a slow operation that will be executed asynchronously
            by the storage server. This may result in situations where the following code would return
            in an error in the create operation because the container could still exist on the server (in
            the process of being deleted).
            <code>
            <![CDATA[
            await container.DeleteIfExistsAsync();
            await container.CreateAsync();
            ]]>
            </code>
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IContainerReference.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Determines whether the container exists.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the container exists.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IContainerReference.GetPermissionsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the current container permissions.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The current container permissions.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IContainerReference.SetPermissionsAsync(Primavera.Hydrogen.Storage.Blobs.IContainerPermissions,System.Threading.CancellationToken)">
            <summary>
            Gets the current container permissions.
            </summary>
            <param name="permissions">The permissions that should be set.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Blobs.IContainerReference.GetBlockBlob(System.String)">
            <summary>
            Gets a reference to the specified block blob.
            </summary>
            <param name="blobName">The name of the blob.</param>
            <returns>
            The <see cref="T:Primavera.Hydrogen.Storage.Blobs.IBlockBlobReference"/> that represents a reference to the blob.
            </returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer">
            <summary>
            Defines the interface of a multi-model container.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.Id">
            <summary>
            Gets the container identifier.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.CreateAsync(System.String,Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCreationProperties,System.Threading.CancellationToken)">
            <summary>
            Creates the container.
            </summary>
            <param name="partitionKeyPath">The path that should be used to extract the partition key of the items in the container.</param>
            <param name="properties">The container properties.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.CreateIfNotExistsAsync(System.String,Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCreationProperties,System.Threading.CancellationToken)">
            <summary>
            Creates the container if it does not exist.
            </summary>
            <param name="partitionKeyPath">The path that should be used to extract the partition key of the items in the container.</param>
            <param name="properties">The container properties.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the container was created.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the container.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.DeleteIfExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the container if it exists.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the container was deleted.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Determines whether the container exists.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the container exists.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.GetPropertiesAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves the container properties.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.
            The container properties.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.UpdatePropertiesAsync(Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUpdateProperties,System.Threading.CancellationToken)">
            <summary>
            Updates the container properties.
            </summary>
            <param name="properties">The new container properties.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.
            The container properties.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.GetThroughputAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves the container throughput.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.
            The database throughput.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.UpdateThroughputAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Updates the container throughput.
            </summary>
            <param name="throughput">The new throughput.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.InsertItemAsync``1(``0,System.Nullable{Primavera.Hydrogen.Storage.MultiModel.PartitionKey},System.Threading.CancellationToken)">
            <summary>
            Inserts the specified item.
            </summary>
            <typeparam name="T">The type of the item value.</typeparam>
            <param name="item">The item that should be inserted.</param>
            <param name="partitionKey">
            The partition key. If specified it may increase the speed of the operation and decrease its cost. If not specified it will be populated from the item.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The item inserted.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException">
            Raised if the item already exists.
            </exception>
            <remarks>
            Throws an error if the item already exists.
            The item partition key and the item identifier will be extracted from the item.
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.TryInsertItemAsync``1(``0,System.Nullable{Primavera.Hydrogen.Storage.MultiModel.PartitionKey},System.Threading.CancellationToken)">
            <summary>
            Tries to insert the specified item.
            </summary>
            <typeparam name="T">The type of the item value.</typeparam>
            <param name="item">The item that should be inserted.</param>
            <param name="partitionKey">
            The partition key. If specified it may increase the speed of the operation and decrease its cost. If not specified it will be populated from the item.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The item inserted.
            </returns>
            <remarks>
            Returns null if the item already exists.
            The item partition key and the item identifier will be extracted from the item.
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.InsertOrReplaceItemAsync``1(``0,System.Nullable{Primavera.Hydrogen.Storage.MultiModel.PartitionKey},System.Threading.CancellationToken)">
            <summary>
            Inserts or replaces the specified item.
            </summary>
            <typeparam name="T">The type of the item value.</typeparam>
            <param name="item">The item that should be inserted or replaced.</param>
            <param name="partitionKey">
            The partition key. If specified it may increase the speed of the operation and decrease its cost. If not specified it will be populated from the item.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The item inserted or replaced.
            </returns>
            <remarks>
            The item partition key and the item identifier will be extracted from the item.
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.ReplaceItemAsync``1(``0,System.String,System.Nullable{Primavera.Hydrogen.Storage.MultiModel.PartitionKey},System.Threading.CancellationToken)">
            <summary>
            Replaces the specified item.
            </summary>
            <typeparam name="T">The type of the item value.</typeparam>
            <param name="item">The item that should be replaced.</param>
            <param name="itemId">The identifier of the item that should be replaced. It should match the id specified in item.</param>
            <param name="partitionKey">
            The partition key. If specified it may increase the speed of the operation and decrease its cost. If not specified it will be populated from the item.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The item replaced.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException">
            Raised if the item does not exist.
            </exception>
            <remarks>
            Throws an error if the item does not exist.
            The <paramref name="itemId"/> is expected to match the identifier extracted from the item.
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.TryReplaceItemAsync``1(``0,System.String,System.Nullable{Primavera.Hydrogen.Storage.MultiModel.PartitionKey},System.Threading.CancellationToken)">
            <summary>
            Tries to replace the specified item.
            </summary>
            <typeparam name="T">The type of the item value.</typeparam>
            <param name="item">The item that should be replaced.</param>
            <param name="itemId">The identifier of the item that should be replaced. It should match the id specified in item.</param>
            <param name="partitionKey">
            The partition key. If specified it may increase the speed of the operation and decrease its cost. If not specified it will be populated from the item.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The item replaced.
            </returns>
            <remarks>
            Returns null if the item does not exist.
            The <paramref name="itemId"/> is expected to match the identifier extracted from the item.
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.DeleteItemAsync``1(Primavera.Hydrogen.Storage.MultiModel.PartitionKey,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified item.
            </summary>
            <typeparam name="T">The type of the item value.</typeparam>
            <param name="partitionKey">The partition key of the item that should be deleted.</param>
            <param name="itemId">The identifier of the item that should be deleted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException">
            Raised if the item does not exist.
            </exception>
            <remarks>
            Throws an error if the item does not exist.
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.TryDeleteItemAsync``1(Primavera.Hydrogen.Storage.MultiModel.PartitionKey,System.String,System.Threading.CancellationToken)">
            <summary>
            Tries to delete the specified item.
            </summary>
            <typeparam name="T">The type of the item value.</typeparam>
            <param name="partitionKey">The partition key of the item that should be deleted.</param>
            <param name="itemId">The identifier of the item that should be deleted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the item was deleted.
            </returns>
            <remarks>
            If the item does not exist, no error will be thrown.
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.RetrieveItemAsync``1(Primavera.Hydrogen.Storage.MultiModel.PartitionKey,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the specified item.
            </summary>
            <typeparam name="T">The type of the item value.</typeparam>
            <param name="partitionKey">The partition key of the item that should be retrieved.</param>
            <param name="itemId">The identifier of the item that should be retrieved.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The item retrieved.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException">
            Raised if the item does not exist.
            </exception>
            <remarks>
            If the item does not exist, an error will be thrown.
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.TryRetrieveItemAsync``1(Primavera.Hydrogen.Storage.MultiModel.PartitionKey,System.String,System.Threading.CancellationToken)">
            <summary>
            Tries to retrieve the specified item.
            </summary>
            <typeparam name="T">The type of the item value.</typeparam>
            <param name="partitionKey">The partition key of the item that should be retrieved.</param>
            <param name="itemId">The identifier of the item that should be retrieved.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The item retrieved.
            </returns>
            <remarks>
            Returns null if the item does not exist.
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.RetrieveItemsAsync``1(Primavera.Hydrogen.Storage.MultiModel.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the items in the container.
            </summary>
            <typeparam name="T">The type of the items value.</typeparam>
            <param name="queryOptions">The query options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.
            A list containing the items retrieved.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.RetrieveItemsAsync``1(Primavera.Hydrogen.Storage.MultiModel.Query,Primavera.Hydrogen.Storage.MultiModel.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Retrieves the items that match the specified query.
            </summary>
            <typeparam name="T">The type of the item value.</typeparam>
            <param name="query">The query definition.</param>
            <param name="queryOptions">The query options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A list containing the items retrieved.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.RetrieveItemsPagedAsync``1(System.String,Primavera.Hydrogen.Storage.MultiModel.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Retrieves a page of the items available in the container.
            </summary>
            <typeparam name="T">The type of the items value.</typeparam>
            <param name="continuationToken">The continuation token.</param>
            <param name="queryOptions">The query options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.
            A page containing the items retrieved.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.RetrieveItemsPagedAsync``1(Primavera.Hydrogen.Storage.MultiModel.Query,System.String,Primavera.Hydrogen.Storage.MultiModel.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Retrieves a page of the items that match the specified query.
            </summary>
            <typeparam name="T">The type of the item value.</typeparam>
            <param name="query">The query definition.</param>
            <param name="continuationToken">The continuation token (for pagination).</param>
            <param name="queryOptions">The query options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A page containing the items retrieved.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.CreateStoredProcedureAsync(Primavera.Hydrogen.Storage.MultiModel.MultiModelStoredProcedureProperties,System.Threading.CancellationToken)">
            <summary>
            Creates the specified stored procedure.
            </summary>
            <param name="properties">The stored procedure properties.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.CreateStoredProcedureIfNotExistsAsync(Primavera.Hydrogen.Storage.MultiModel.MultiModelStoredProcedureProperties,System.Threading.CancellationToken)">
            <summary>
            Creates the specified stored procedure if it does not exist.
            </summary>
            <param name="properties">The stored procedure properties.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.
            A value indicating whether the stored procedure was created.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.ReplaceStoredProcedureAsync(Primavera.Hydrogen.Storage.MultiModel.MultiModelStoredProcedureProperties,System.Threading.CancellationToken)">
            <summary>
            Replaces the specified stored procedure.
            </summary>
            <param name="properties">The stored procedure properties.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.DeleteStoredProcedureAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified stored procedure.
            </summary>
            <param name="id">The stored procedure identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.DeleteStoredProcedureIfExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified stored procedure if it exists.
            </summary>
            <param name="id">The stored procedure identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.
            A value indicating whether the stored procedure was deleted.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.ExistsStoredProcedureAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether the specified stored procedure exists.
            </summary>
            <param name="id">The stored procedure identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the stored procedure exists.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.ReadStoredProcedureAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Reads the specified stored procedure.
            </summary>
            <param name="id">The stored procedure identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The stored procedure properties.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer.ExecuteStoredProcedureAsync``1(System.String,Primavera.Hydrogen.Storage.MultiModel.PartitionKey,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Executes the specified stored procedure.
            </summary>
            <typeparam name="T">The type of the stored procedure output.</typeparam>
            <param name="id">The stored procedure identifier.</param>
            <param name="partitionKey">The partition key.</param>
            <param name="parameters">The stored procedure parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The stored procedure output.
            </returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase">
            <summary>
            Defines the interface of a multi-model database.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase.Id">
            <summary>
            Gets the database identifier.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase.GetContainer(System.String)">
            <summary>
            Gets a reference to the specified container.
            </summary>
            <param name="containerId">The container identifier.</param>
            <returns>
            The <see cref="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase"/> that represents a reference to the container.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase.CreateAsync(Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseCreationProperties,System.Threading.CancellationToken)">
            <summary>
            Creates the database.
            </summary>
            <param name="properties">The database properties.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase.CreateIfNotExistsAsync(Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseCreationProperties,System.Threading.CancellationToken)">
            <summary>
            Creates the database if it does not exist.
            </summary>
            <param name="properties">The database properties.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the database was created.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the database.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase.DeleteIfExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the database if it exists.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the database was deleted.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Determines whether the database exists.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the database exists.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase.GetPropertiesAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves the database properties.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.
            The database properties.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase.GetThroughputAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves the database throughput.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.
            The database throughput.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase.UpdateThroughputAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Updates the database throughput.
            </summary>
            <param name="throughput">The new throughput.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabaseService">
            <summary>
            Defines the interface of the multi-model database service.
            The multi-model database service allows managing multi-model databases stored in the cloud.
            New instances of the service should be resolved via dependency injection to realize
            the concrete implementation.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabaseService.Name">
            <summary>
            Gets the service name.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabaseService.GetDatabase(System.String)">
            <summary>
            Gets a reference to the specified database.
            </summary>
            <param name="databaseId">The database identifier.</param>
            <returns>
            The <see cref="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase"/> that represents a reference to the database.
            </returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabaseServiceFactory">
            <summary>
            Defines the interface of the multi-model database service factory.
            This factory allows resolving named <see cref="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabaseService"/> instances.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabaseServiceFactory.GetService(System.String)">
            <summary>
            Retrieves the service previously registered with the specified name.
            </summary>
            <param name="name">The service name.</param>
            <returns>
            The <see cref="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabaseService"/> instance.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Raised if the specified named service was not previously
            registered.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabaseServiceFactory.GetServiceOrDefault(System.String)">
            <summary>
            Retrieves the service previously registered with the specified name or the default
            service if no service with that name has been registered.
            </summary>
            <param name="name">The service name.</param>
            <returns>
            The <see cref="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabaseService"/> instance.
            </returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.Item`1">
            <summary>
            Describes an item in a container.
            </summary>
            <typeparam name="T">The type of the item value.</typeparam>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.Item`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.Item`1.ETag">
            <summary>
            Gets the entity tag.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.Item`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.Item`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="etag">The entity stag.</param>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndex">
            <summary>
            Describes a composite index.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndex.Paths">
            <summary>
            Gets or sets the paths.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndex"/> class.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndex.#ctor(System.Collections.Generic.IEnumerable{Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndexPath})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndex"/> class.
            </summary>
            <param name="paths">The paths that should be added to the list of paths.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndex.ToString">
            <inheritdoc />
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndexPath">
            <summary>
            Describes a path in an composite index.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndexPath.Path">
            <summary>
            Gets or sets the path.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndexPath.OrderAscending">
            <summary>
            Gets or sets a value indicating whether the path is sorted ascending.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndexPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndexPath"/> class.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndexPath.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndexPath" /> class.
            </summary>
            <param name="path">A path to add to the list of paths.</param>
            <param name="orderAscending">A value indicating whether the path is sorted ascending.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndexPath.ToString">
            <inheritdoc />
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCreationProperties">
            <summary>
            Defines the properties used to create a <see cref="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer"/>.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCreationProperties.DefaultTimeToLive">
            <summary>
            Gets or sets the default time to live (in seconds) for the items in the container.
            </summary>
            <remarks>
            If value is null, then the items will never expire (and TTL defined on items will have no effect).
            If value is -1, items with TTL defined will experience after N seconds, items with no TTL will never expire.
            If value is n, the items will expire by default after N seconds, or after their own TTL.
            </remarks>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCreationProperties.Throughput">
            <summary>
            Gets or sets the container throughput.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCreationProperties.UniqueKeys">
            <summary>
            Gets or sets the unique keys.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCreationProperties.Indexes">
            <summary>
            Gets or sets the indexes.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCreationProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCreationProperties"/> class.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCreationProperties.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCreationProperties" /> class.
            </summary>
            <param name="defaultTimeToLive">The default time to live (in seconds).</param>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexes">
            <summary>
            Describes the indexes in a <see cref="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer"/>.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexes.Automatic">
            <summary>
            Gets or sets a value indicating whether automatic indexing is enabled.
            The default value is true.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexes.IncludedPaths">
            <summary>
            Gets or sets the included paths.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexes.ExcludedPaths">
            <summary>
            Gets or sets the excluded paths.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexes.CompositeIndexes">
            <summary>
            Gets or sets the composite indexes.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexes"/> class.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexes.#ctor(Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexPath,Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexes"/> class.
            </summary>
            <param name="includedPath">A path that should be added to the list of included paths.</param>
            <param name="excludedPath">A path that should be added to the list of excluded paths.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexes.#ctor(System.Collections.Generic.IEnumerable{Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexPath},System.Collections.Generic.IEnumerable{Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexPath})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexes"/> class.
            </summary>
            <param name="includedPaths">The paths that should be added to the list of included paths.</param>
            <param name="excludedPaths">The paths that should be added to the list of excluded paths.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexes.#ctor(System.Collections.Generic.IEnumerable{Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexPath},System.Collections.Generic.IEnumerable{Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexPath},System.Collections.Generic.IEnumerable{Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerCompositeIndex})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexes" /> class.
            </summary>
            <param name="includedPaths">The paths that should be added to the list of included paths.</param>
            <param name="excludedPaths">The paths that should be added to the list of excluded paths.</param>
            <param name="compositeIndexes">The composite indexes that should be added to the list of composite indexes.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexes.ToString">
            <inheritdoc />
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexPath">
            <summary>
            Describes a path in an index.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexPath.Path">
            <summary>
            Gets or sets the path.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexPath"/> class.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexPath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexPath" /> class.
            </summary>
            <param name="path">A path to add to the list of paths.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerIndexPath.ToString">
            <inheritdoc />
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerProperties">
            <summary>
            Defines the properties of a <see cref="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer"/>.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerProperties.Id">
            <summary>
            Gets the container identifier.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerProperties.PartitionKeyPath">
            <summary>
            Gets the path used to determine the partition key.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerProperties.DefaultTimeToLive">
            <summary>
            Gets or sets the default time to live (in seconds) for the items in the container.
            </summary>
            <remarks>
            If value is null, then the items will never expire (and TTL defined on items will have no effect).
            If value is -1, items with TTL defined will experience after N seconds, items with no TTL will never expire.
            If value is n, the items will expire by default after N seconds, or after their own TTL.
            </remarks>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerProperties.UniqueKeys">
            <summary>
            Gets or sets the unique keys.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerProperties.Indexes">
            <summary>
            Gets or sets the indexes.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerProperties.ETag">
            <summary>
            Gets the entity tag.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerProperties.LastModified">
            <summary>
            Gets the last modified timestamp.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerProperties.#ctor(System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerProperties" /> class.
            </summary>
            <param name="id">The container identifier.</param>
            <param name="partitionKeyPath">The partition key path.</param>
            <param name="etag">The entity tag.</param>
            <param name="lastModified">The last modified timestamp.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerProperties.#ctor(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerProperties" /> class.
            </summary>
            <param name="id">The container identifier.</param>
            <param name="partitionKeyPath">The partition key path.</param>
            <param name="etag">The entity tag.</param>
            <param name="lastModified">The last modified timestamp.</param>
            <param name="defaultTimeToLive">The default time to live (in seconds).</param>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey">
            <summary>
            Describes a unique key.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey.Paths">
            <summary>
            Gets or sets the paths included in the unique key.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey"/> class.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey" /> class.
            </summary>
            <param name="path">A path to add to the list of paths.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey" /> class.
            </summary>
            <param name="path1">The first path to add to the list of paths.</param>
            <param name="path2">The second path to add to the list of paths.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey" /> class.
            </summary>
            <param name="path1">The first path to add to the list of paths.</param>
            <param name="path2">The second path to add to the list of paths.</param>
            <param name="path3">The third path to add to the list of paths.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey"/> class.
            </summary>
            <param name="paths">The paths that should be added to the list of paths.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey.ToString">
            <inheritdoc />
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKeys">
            <summary>
            Describes the unique keys in a <see cref="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer"/>.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKeys.Keys">
            <summary>
            Gets or sets the unique keys.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKeys.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKeys"/> class.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKeys.#ctor(Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKeys"/> class.
            </summary>
            <param name="key">A key to add to the list of keys.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKeys.#ctor(System.Collections.Generic.IEnumerable{Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKey})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKeys"/> class.
            </summary>
            <param name="keys">The keys that should be added to the list of keys.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUniqueKeys.ToString">
            <inheritdoc />
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUpdateProperties">
            <summary>
            Defines the properties used to update a <see cref="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer"/>.
            </summary>
            <remarks>
            Changing the container identifier or the container partition key is not supported.
            </remarks>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUpdateProperties.Id">
            <summary>
            Gets the container identifier.
            Should match the identifier used to create the container.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUpdateProperties.PartitionKeyPath">
            <summary>
            Gets the path used to determine the partition key.
            Should match the partition key path used to create the container.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUpdateProperties.Indexes">
            <summary>
            Gets or sets the indexes.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUpdateProperties.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUpdateProperties" /> class.
            </summary>
            <param name="id">The container identifier.</param>
            <param name="partitionKeyPath">The container partition key path.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUpdateProperties.#ctor(Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelContainerUpdateProperties" /> class.
            </summary>
            <param name="properties">The properties that should be used to create the new properties.</param>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseCreationProperties">
            <summary>
            Defines the properties used to create a <see cref="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase"/>.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseCreationProperties.Throughput">
            <summary>
            Gets or sets the container throughput.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseCreationProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseCreationProperties" /> class.
            </summary>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError">
            <summary>
            Indicates the code of the error in a <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException" />.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.InvalidRequest">
            <summary>
            The request is invalid.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.DatabaseAlreadyExists">
            <summary>
            The database already exists.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.DatabaseNotFound">
            <summary>
            The database does not exist.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.ContainerAlreadyExists">
            <summary>
            The container already exists.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.ContainerNotFound">
            <summary>
            The container does not exist.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.ItemAlreadyExists">
            <summary>
            The item already exists.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.ItemNotFound">
            <summary>
            The item does not exist.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.StoredProcedureAlreadyExists">
            <summary>
            The stored procedure already exists.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.StoredProcedureNotFound">
            <summary>
            The stored procedure does not exist.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.Conflict">
            <summary>
            The server returned an error with status code <see cref="F:System.Net.HttpStatusCode.Conflict"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.NotFound">
            <summary>
            The server returned an error with status code <see cref="F:System.Net.HttpStatusCode.NotFound"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.BadRequest">
            <summary>
            The server returned an error with status code <see cref="F:System.Net.HttpStatusCode.BadRequest"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.Unauthorized">
            <summary>
            The server returned an error with status code <see cref="F:System.Net.HttpStatusCode.Unauthorized"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.Unexpected">
            <summary>
            The error is unexpected.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError.Unspecified">
            <summary>
            The error code was not specified by the code that raised the exception.
            </summary>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException">
            <summary>
            Represents errors raised by the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabaseService"/>.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException.ErrorCode">
            <summary>
            Gets the code of the error that caused the exception.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException"/> class.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException"/> class.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException"/> class.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">Represents the exception that caused this error.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException.#ctor(Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException" /> class.
            </summary>
            <param name="error">The code of the error that caused the exception.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException.#ctor(Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException" /> class.
            </summary>
            <param name="error">The code of the error that caused the exception.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException.#ctor(Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseError,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseException"/> class.
            </summary>
            <param name="error">The code of the error that caused the exception.</param>
            <param name="message">The error message.</param>
            <param name="innerException">The exception that caused this error.</param>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseProperties">
            <summary>
            Defines the properties of a <see cref="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelDatabase"/>.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseProperties.Id">
            <summary>
            Gets the container identifier.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseProperties.ETag">
            <summary>
            Gets the entity tag.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseProperties.LastModified">
            <summary>
            Gets the last modified timestamp.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseProperties.#ctor(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelDatabaseProperties" /> class.
            </summary>
            <param name="id">The container identifier.</param>
            <param name="etag">The entity tag.</param>
            <param name="lastModified">The last modified timestamp.</param>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelStoredProcedureProperties">
            <summary>
            Defines the properties of a stored procedure in a <see cref="T:Primavera.Hydrogen.Storage.MultiModel.IMultiModelContainer"/>.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelStoredProcedureProperties.Id">
            <summary>
            Gets the stored procedure identifier.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelStoredProcedureProperties.Body">
            <summary>
            Gets the stored procedure body.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelStoredProcedureProperties.ETag">
            <summary>
            Gets the entity tag.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.MultiModelStoredProcedureProperties.LastModified">
            <summary>
            Gets the last modified timestamp.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelStoredProcedureProperties.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelStoredProcedureProperties" /> class.
            </summary>
            <param name="id">The stored procedure identifier.</param>
            <param name="body">The stored procedure body.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.MultiModelStoredProcedureProperties.#ctor(System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.MultiModelStoredProcedureProperties" /> class.
            </summary>
            <param name="id">The stored procedure identifier.</param>
            <param name="body">The stored procedure body.</param>
            <param name="etag">The entity tag.</param>
            <param name="lastModified">The last modified timestamp.</param>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.PartitionKey">
            <summary>
            Describes a partition key.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.Null">
            <summary>
            The null partition key.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.None">
            <summary>
            The none partition key.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.IsNone">
            <summary>
            Gets a value indicating whether this instance represents a non-existent partition key.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.IsNull">
            <summary>
            Gets a value indicating whether this instance represents a null partition key.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.PartitionKey"/> struct.
            </summary>
            <param name="value">The partition key value.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.PartitionKey"/> struct.
            </summary>
            <param name="value">The partition key value.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.PartitionKey"/> struct.
            </summary>
            <param name="value">The partition key value.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.Equals(Primavera.Hydrogen.Storage.MultiModel.PartitionKey)">
            <summary>
            Determines whether the specified <see cref="T:Primavera.Hydrogen.Storage.MultiModel.PartitionKey" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Primavera.Hydrogen.Storage.MultiModel.PartitionKey" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Primavera.Hydrogen.Storage.MultiModel.PartitionKey" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.Equals(System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.String" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.String" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.String" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.ToString">
            <inheritdoc />
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.op_Equality(Primavera.Hydrogen.Storage.MultiModel.PartitionKey,Primavera.Hydrogen.Storage.MultiModel.PartitionKey)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.op_Inequality(Primavera.Hydrogen.Storage.MultiModel.PartitionKey,Primavera.Hydrogen.Storage.MultiModel.PartitionKey)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.op_Implicit(System.String)~Primavera.Hydrogen.Storage.MultiModel.PartitionKey">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Primavera.Hydrogen.Storage.MultiModel.PartitionKey"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.FromString(System.String)">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Primavera.Hydrogen.Storage.MultiModel.PartitionKey"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.op_Implicit(System.Boolean)~Primavera.Hydrogen.Storage.MultiModel.PartitionKey">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Primavera.Hydrogen.Storage.MultiModel.PartitionKey"/>.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.FromBoolean(System.Boolean)">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Primavera.Hydrogen.Storage.MultiModel.PartitionKey"/>.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.op_Implicit(System.Double)~Primavera.Hydrogen.Storage.MultiModel.PartitionKey">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:Primavera.Hydrogen.Storage.MultiModel.PartitionKey"/>.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.PartitionKey.FromDouble(System.Double)">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:Primavera.Hydrogen.Storage.MultiModel.PartitionKey"/>.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.Query">
            <summary>
            Describes a query.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.Query.QueryText">
            <summary>
            Gets the query text.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.Query.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.Query.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.MultiModel.Query" /> class.
            </summary>
            <param name="query">The query text.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.Query.Equals(Primavera.Hydrogen.Storage.MultiModel.Query)">
            <summary>
            Determines whether the specified <see cref="T:Primavera.Hydrogen.Storage.MultiModel.Query" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Primavera.Hydrogen.Storage.MultiModel.Query" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Primavera.Hydrogen.Storage.MultiModel.Query" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.Query.Equals(System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.String" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.String" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.String" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.Query.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.Query.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.Query.ToString">
            <inheritdoc />
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.Query.WithParameter(System.String,System.Object)">
            <summary>
            Updates the query with the specified parameter.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns>
            The <see cref="T:Primavera.Hydrogen.Storage.MultiModel.Query"/> instance.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.Query.op_Equality(Primavera.Hydrogen.Storage.MultiModel.Query,Primavera.Hydrogen.Storage.MultiModel.Query)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.MultiModel.Query.op_Inequality(Primavera.Hydrogen.Storage.MultiModel.Query,Primavera.Hydrogen.Storage.MultiModel.Query)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.MultiModel.QueryOptions">
            <summary>
            Describes the options used to execute queries.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.QueryOptions.MaxBufferedItemCount">
            <summary>
            Gets or sets the maximum number of items that can be buffered client side during parallel query execution.
            </summary>
            <remarks>
            The provided value is merely a suggestion and may not be respected in certain cases.
            A positive value limits the number of buffered items to that value.
            A value less than zero indicates that the system should automatically decide.
            </remarks>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.QueryOptions.MaxConcurrency">
            <summary>
            Gets or sets the number of concurrent operations run client side during parallel query execution.
            </summary>
            <remarks>
            A positive value limits the number of concurrent operations to that value.
            A value less than zero indicates that the system should automatically decide.
            </remarks>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.MultiModel.QueryOptions.MaxItemCount">
            <summary>
            Gets or sets the maximum number of items to be returned.
            </summary>
            <remarks>
            The option is used for query pagination.
            -1 indicates that a dynamic page size should be used.
            </remarks>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.StorageServiceException">
            <summary>
            Represents errors raised by storage services.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.StorageServiceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.StorageServiceException"/> class.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.StorageServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.StorageServiceException"/> class.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.StorageServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.StorageServiceException"/> class.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">Represents the exception that caused this error.</param>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Tables.IgnorePropertyAttribute">
            <summary>
            Indicates that the property to which the attribute is applies should be ignored when storing the parent
            entity using the <see cref="T:Primavera.Hydrogen.Storage.Tables.ITableStorageService"/>.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Tables.ITableEntity">
            <summary>
            Defines the interface of an entity managed by the <see cref="T:Primavera.Hydrogen.Storage.Tables.ITableReference"/>.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.ITableEntity.Key1">
            <summary>
            Gets or sets the first key of the entity.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.ITableEntity.Key2">
            <summary>
            Gets or sets the second key of the entity.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.ITableEntity.Timestamp">
            <summary>
            Gets or sets the time stamp of the entity.
            </summary>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Tables.ITableQuery">
            <summary>
            Represents a query that can be executed on a <see cref="T:Primavera.Hydrogen.Storage.Tables.ITableReference"/> to retrieve records.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.ITableQuery.SelectProperties">
            <summary>
            Gets the list containing the names of the table properties that should be retrieved.
            If the list is null or empty, all properties from the table will be retrieved.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.ITableQuery.Filter">
            <summary>
            Gets the filter expression.
            If the value is null or empty, records will not be filtered.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableQuery.Select(System.String[])">
            <summary>
            Adds the specified properties to the result set.
            </summary>
            <param name="properties">The names of the properties that should be added to the result set.</param>
            <returns>
            The updated <see cref="T:Primavera.Hydrogen.Storage.Tables.ITableQuery"/> instance.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableQuery.Select(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the specified properties to the result set.
            </summary>
            <param name="properties">The names of the properties that should be added to the result set.</param>
            <returns>
            The updated <see cref="T:Primavera.Hydrogen.Storage.Tables.ITableQuery"/> instance.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableQuery.Where(Primavera.Hydrogen.Storage.Tables.ITableQueryCondition)">
            <summary>
            Sets the query filter.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            The updated <see cref="T:Primavera.Hydrogen.Storage.Tables.ITableQuery" /> instance.
            </returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Tables.ITableQueryCondition">
            <summary>
            Represents a condition in a <see cref="T:Primavera.Hydrogen.Storage.Tables.ITableQuery"/>.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.ITableQueryCondition.Filter">
            <summary>
            Gets the filter expression.
            </summary>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Tables.ITableReference">
            <summary>
            Represents a reference to a table in the table storage.
            Notice that this is simply a reference that allows performing operations on the referenced
            table.
            A table reference can exist before (and after) the table actually exists in the storage (for,
            example, the reference is required to create a new table).
            </summary>
            <example>
            To create a new table:
            <code>
            <![CDATA[
            ITableStorageService service = provider.GetRequiredService<ITableStorageService>();
            ITableReference table = service.GetTable("MyTable");
            table.CreateIfNotExists();
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.ITableReference.Name">
            <summary>
            Gets the table name.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.InsertEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Inserts the specified entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The entity that should be inserted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException">
            Raised if the entity already exists.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.TryInsertEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Inserts the specified entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The entity that should be inserted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the entity was inserted.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.InsertEntitiesAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Inserts the specified entities.
            </summary>
            <typeparam name="TEntity">The type of the entities.</typeparam>
            <param name="entities">The entities that should be inserted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.InsertOrReplaceEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Inserts or replaces the specified entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The entity that should be inserted or replaced.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.InsertOrReplaceEntitiesAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Inserts or replaces the specified entities.
            </summary>
            <typeparam name="TEntity">The type of the entities.</typeparam>
            <param name="entities">The entities that should be inserted or replaced.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.DeleteEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The entity that should be deleted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException">
            Raised if the entity does not exist.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.TryDeleteEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The entity that should be deleted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the entity was deleted.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.DeleteEntitiesAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Deletes the specified entities.
            </summary>
            <typeparam name="TEntity">The type of the entities.</typeparam>
            <param name="entities">The entities that should be deleted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.ReplaceEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Replaces the specified entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The entity that should be replaced.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException">
            Raised if the entity does not exist.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.TryReplaceEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Replaces the specified entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The entity that should be replaced.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the entity was replaced.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.ReplaceEntitiesAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Replaces the specified entities.
            </summary>
            <typeparam name="TEntity">The type of the entities.</typeparam>
            <param name="entities">The entities that should be replaced.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.RetrieveEntityAsync``1(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the entity with the specified keys.
            Raises an exception if the entity does not exist.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="key1">The first key of the entity.</param>
            <param name="key2">The second key of the entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The entity with the specified keys.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException">
            Raised if the entity does not exist.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.TryRetrieveEntityAsync``1(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the entity with the specified keys.
            Returns null if the entity does not exist.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="key1">The first key of the entity.</param>
            <param name="key2">The second key of the entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The entity with the specified keys.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.RetrieveEntitiesAsync``1(System.Threading.CancellationToken)">
            <summary>
            Retrieves all the entities in the table.
            </summary>
            <typeparam name="TEntity">The type of the entities.</typeparam>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A list containing all the entities in the table.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.RetrieveEntitiesAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the entities with the specified key.
            </summary>
            <typeparam name="TEntity">The type of the entities.</typeparam>
            <param name="key1">The key.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A list containing all the entities in the table that match the specified key.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.RetrieveEntitiesAsync``1(Primavera.Hydrogen.Storage.Tables.ITableQuery,System.Threading.CancellationToken)">
            <summary>
            Retrieves the entities that satisfy the specified query.
            </summary>
            <typeparam name="TEntity">The type of the entities.</typeparam>
            <param name="query">The query that should be used to determine the data that should be retrieved.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A list containing the entities in the table that satisfy the specified query.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.RetrieveEntitiesPageAsync``1(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a page of all the entities available in the table.
            </summary>
            <typeparam name="TEntity">The type of the entities.</typeparam>
            <param name="continuationToken">The continuation token.</param>
            <param name="maxEntityCount">
            The maximum number of entities that should be returned in the page.
            If null, the default value will be used.
            </param>   
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A page containing the entities retrieved.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.RetrieveEntitiesPageAsync``1(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a page of the entities in the table with the specified key.
            </summary>
            <typeparam name="TEntity">The type of the entities.</typeparam>
            <param name="key1">The key.</param>
            <param name="continuationToken">The continuation token.</param>
            <param name="maxEntityCount">
            The maximum number of entities that should be returned in the page.
            If null, the default value will be used.
            </param>   
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A page containing the entities retrieved.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.RetrieveEntitiesPageAsync``1(Primavera.Hydrogen.Storage.Tables.ITableQuery,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a page of the entities available in the table that satisfy the specified query.
            </summary>
            <typeparam name="TEntity">The type of the entities.</typeparam>
            <param name="query">The query that should be used to determine the data that should be retrieved.</param>
            <param name="continuationToken">The continuation token.</param>
            <param name="maxEntityCount">
            The maximum number of entities that should be returned in the page.
            If null, the default value will be used.
            </param>   
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A list containing the entities in the table that satisfy the specified query.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.InsertRecordAsync(Primavera.Hydrogen.Storage.Tables.TableRecord,System.Threading.CancellationToken)">
            <summary>
            Inserts the specified record.
            </summary>
            <param name="record">The record that should be inserted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException">
            Raised if the record already exists.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.TryInsertRecordAsync(Primavera.Hydrogen.Storage.Tables.TableRecord,System.Threading.CancellationToken)">
            <summary>
            Inserts the specified record.
            </summary>
            <param name="record">The record that should be inserted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the record was inserted.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.InsertRecordsAsync(System.Collections.Generic.IEnumerable{Primavera.Hydrogen.Storage.Tables.TableRecord},System.Threading.CancellationToken)">
            <summary>
            Inserts the specified records.
            </summary>
            <param name="records">The records that should be inserted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.InsertOrReplaceRecordAsync(Primavera.Hydrogen.Storage.Tables.TableRecord,System.Threading.CancellationToken)">
            <summary>
            Inserts or replaces the specified record.
            </summary>
            <param name="record">The record that should be inserted or replaced.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.InsertOrReplaceRecordsAsync(System.Collections.Generic.IEnumerable{Primavera.Hydrogen.Storage.Tables.TableRecord},System.Threading.CancellationToken)">
            <summary>
            Inserts or replaces the specified records.
            </summary>
            <param name="records">The records that should be inserted or replaced.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.DeleteRecordAsync(Primavera.Hydrogen.Storage.Tables.TableRecord,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified record.
            </summary>
            <param name="record">The record that should be deleted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException">
            Raised if the record does not exist.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.DeleteRecordAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the record with the specified keys.
            </summary>
            <param name="key1">The first key of the record.</param>
            <param name="key2">The second key of the record.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException">
            Raised if the record does not exist.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.TryDeleteRecordAsync(Primavera.Hydrogen.Storage.Tables.TableRecord,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified record.
            </summary>
            <param name="record">The record that should be deleted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the record was deleted.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.TryDeleteRecordAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the record with the specified keys.
            </summary>
            <param name="key1">The first key of the record.</param>
            <param name="key2">The second key of the record.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the record was deleted.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.DeleteRecordsAsync(System.Collections.Generic.IEnumerable{Primavera.Hydrogen.Storage.Tables.TableRecord},System.Threading.CancellationToken)">
            <summary>
            Deletes the specified records.
            </summary>
            <param name="records">The records that should be deleted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.ReplaceRecordAsync(Primavera.Hydrogen.Storage.Tables.TableRecord,System.Threading.CancellationToken)">
            <summary>
            Replaces the specified record.
            </summary>
            <param name="record">The record that should be replaced.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException">
            Raised if the record does not exist.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.TryReplaceRecordAsync(Primavera.Hydrogen.Storage.Tables.TableRecord,System.Threading.CancellationToken)">
            <summary>
            Replaces the specified record.
            </summary>
            <param name="record">The record that should be replaced.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A value indicating whether the record was replaced.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.ReplaceRecordsAsync(System.Collections.Generic.IEnumerable{Primavera.Hydrogen.Storage.Tables.TableRecord},System.Threading.CancellationToken)">
            <summary>
            Replaces the specified records.
            </summary>
            <param name="records">The records that should be replaced.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.RetrieveRecordAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the record with the specified keys.
            Raises an exception if the record does not exist.
            </summary>
            <param name="key1">The first key of the record.</param>
            <param name="key2">The second key of the record.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The record with the specified keys.
            </returns>
            <exception cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException">
            Raised if the record does not exist.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.TryRetrieveRecordAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the record with the specified keys.
            Returns null if the record does not exist.
            </summary>
            <param name="key1">The first key of the record.</param>
            <param name="key2">The second key of the record.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            The record with the specified keys.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.RetrieveRecordsAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves all the records in the table.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A list containing all the records in the table.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.RetrieveRecordsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the records with the specified key.
            </summary>
            <param name="key1">The key.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A list containing all the records in the table that match the specified key.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.RetrieveRecordsAsync(Primavera.Hydrogen.Storage.Tables.ITableQuery,System.Threading.CancellationToken)">
            <summary>
            Retrieves the records that satisfy the specified query.
            </summary>
            <param name="query">The query that should be used to determine the data that should be retrieved.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A list containing the records in the table that satisfy the specified query.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.RetrieveRecordsPageAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a page of all the records available in the table.
            </summary>
            <param name="continuationToken">The continuation token.</param>
            <param name="maxRecordCount">
            The maximum number of records that should be returned in the page.
            If null, the default value will be used.
            </param>   
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A page containing the records retrieved.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.RetrieveRecordsPageAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a page of the records available in the table with the specified key.
            </summary>
            <param name="key1">The key.</param>
            <param name="continuationToken">The continuation token.</param>
            <param name="maxRecordCount">
            The maximum number of records that should be returned in the page.
            If null, the default value will be used.
            </param>   
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A page containing the records retrieved.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.RetrieveRecordsPageAsync(Primavera.Hydrogen.Storage.Tables.ITableQuery,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieves a page of the records available in the table that satisfy the specified query.
            </summary>
            <param name="query">The query that should be used to determine the data that should be retrieved.</param>
            <param name="continuationToken">The continuation token.</param>
            <param name="maxRecordCount">
            The maximum number of records that should be returned in the page.
            If null, the default value will be used.
            </param>   
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            A page containing the records retrieved.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.CreateAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the table.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.CreateIfNotExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the table if it does not already exist.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A value indicating whether the table was created.
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the table.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
            <remarks>
            Keep in mind that deleting a table is a slow operation that will be executed asynchronously
            by the storage server. This may result in situations where the following code would return
            in an error in the create operation because the table could still exist on the server (in
            the process of being deleted).
            <code>
            <![CDATA[
            await table.DeleteAsync();
            await table.CreateAsync();
            ]]>
            </code>
            </remarks>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableReference.DeleteIfExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the table if it exists.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A value indicating whether the table was deleted.
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            </returns>
            <remarks>
            Keep in mind that deleting a table is a slow operation that will be executed asynchronously
            by the storage server. This may result in situations where the following code would return
            in an error in the create operation because the table could still exists on the server (in
            the process of being deleted).
            <code>
            <![CDATA[
            await table.DeleteIfExistsAsync();
            await table.CreateAsync();
            ]]>
            </code>
            </remarks>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Tables.ITableStorageService">
            <summary>
            Defines the interface of the table storage service.
            The table storage service is a structured NoSQL data store in the cloud.
            The table storage is a key/attribute store with a schema-less design.
            New instances of the service should be resolved via dependency injection to realize
            the concrete implementation.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.ITableStorageService.Name">
            <summary>
            Gets the service name.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableStorageService.GetTable(System.String)">
            <summary>
            Gets a reference to the specified table.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>The <see cref="T:Primavera.Hydrogen.Storage.Tables.ITableReference"/> that represents a reference to the table.</returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Tables.ITableStorageServiceFactory">
            <summary>
            Defines the interface of the table storage service factory.
            This factory allows resolving named <see cref="T:Primavera.Hydrogen.Storage.Tables.ITableStorageService"/> instances.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableStorageServiceFactory.GetService(System.String)">
            <summary>
            Retrieves the service previously registered with the specified name.
            </summary>
            <param name="name">The service name.</param>
            <returns>
            The <see cref="T:Primavera.Hydrogen.Storage.Tables.ITableStorageService"/> instance.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Raised if the specified named service was not previously
            registered.
            </exception>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.ITableStorageServiceFactory.GetServiceOrDefault(System.String)">
            <summary>
            Retrieves the service previously registered with the specified name or the default
            service if no service with that name has been registered.
            </summary>
            <param name="name">The service name.</param>
            <returns>
            The <see cref="T:Primavera.Hydrogen.Storage.Tables.ITableStorageService"/> instance.
            </returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Tables.TableEntity">
            <summary>
            Defines the base class for an entity managed by the <see cref="T:Primavera.Hydrogen.Storage.Tables.ITableReference" />.
            </summary>
            <seealso cref="T:Primavera.Hydrogen.Storage.Tables.ITableEntity" />
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.TableEntity.Key1">
            <inheritdoc />
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.TableEntity.Key2">
            <inheritdoc />
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.TableEntity.Timestamp">
            <inheritdoc />
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableEntity.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableEntity"/> class.
            </summary>
            <param name="key1">The first key of the entity.</param>
            <param name="key2">The second key of the entity.</param>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Tables.TableProperty">
            <summary>
            Defines a property in a table record.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.TableProperty.PropertyType">
            <summary>
            Gets the type of the property value.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.TableProperty.PropertyValue">
            <summary>
            Gets the property value.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.TableProperty.IsNull">
            <summary>
            Gets a value indicating whether the property value is null.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> class.
            </summary>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> class.
            </summary>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.#ctor(System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> class.
            </summary>
            <param name="value">The property value. Values are stored in UTC.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.#ctor(System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> class.
            </summary>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.#ctor(System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> class.
            </summary>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.#ctor(System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> class.
            </summary>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> class.
            </summary>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.#ctor(System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> class.
            </summary>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> class.
            </summary>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.Equals(Primavera.Hydrogen.Storage.Tables.TableProperty)">
            <summary>
            Determines whether the specified <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.ToString">
            <inheritdoc />
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(System.Byte[])~Primavera.Hydrogen.Storage.Tables.TableProperty">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> array to <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/>.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> array instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(System.Nullable{System.Boolean})~Primavera.Hydrogen.Storage.Tables.TableProperty">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/>.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(System.Nullable{System.DateTimeOffset})~Primavera.Hydrogen.Storage.Tables.TableProperty">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset"/> to <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/>. Values are stored in UTC.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(System.Nullable{System.DateTime})~Primavera.Hydrogen.Storage.Tables.TableProperty">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/>.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(System.Nullable{System.Double})~Primavera.Hydrogen.Storage.Tables.TableProperty">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/>.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(System.Nullable{System.Guid})~Primavera.Hydrogen.Storage.Tables.TableProperty">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/>.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(System.Nullable{System.Int32})~Primavera.Hydrogen.Storage.Tables.TableProperty">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/>.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(System.Nullable{System.Int64})~Primavera.Hydrogen.Storage.Tables.TableProperty">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64"/> to <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/>.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(System.String)~Primavera.Hydrogen.Storage.Tables.TableProperty">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.Byte[]">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.Byte"/> array.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.Nullable{System.Boolean}">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.Boolean">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.DateTimeOffset"/>. Values are stored in UTC.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.DateTimeOffset">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.DateTimeOffset"/>. Values are stored in UTC.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.Nullable{System.DateTime}">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.DateTime">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.Nullable{System.Double}">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.Nullable{System.Guid}">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.Guid">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.Nullable{System.Int32}">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.Nullable{System.Int64}">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.Int64">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableProperty.op_Implicit(Primavera.Hydrogen.Storage.Tables.TableProperty)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/> instance that should be converted.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Tables.TablePropertyType">
            <summary>
            Defines the type of a table record property value.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TablePropertyType.String">
            <summary>
            The table property value is of type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TablePropertyType.Binary">
            <summary>
            The table property value is of type byte[].
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TablePropertyType.Boolean">
            <summary>
            The table property value is of type <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TablePropertyType.DateTime">
            <summary>
            The table property value is of type <see cref="T:System.DateTime"/> (UTC).
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TablePropertyType.Double">
            <summary>
            The table property value is of type <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TablePropertyType.Guid">
            <summary>
            The table property value is of type <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TablePropertyType.Integer">
            <summary>
            The table property value is of type <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TablePropertyType.Long">
            <summary>
            The table property value is of type <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Tables.TableQueryComparison">
            <summary>
            Defines the comparison that will be used in a <see cref="T:Primavera.Hydrogen.Storage.Tables.ITableQuery"/> filter.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableQueryComparison.Equal">
            <summary>
            Compares if two values are equal.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableQueryComparison.NotEqual">
            <summary>
            Compares if two values are not equal.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableQueryComparison.GreaterThan">
            <summary>
            Compares if the left value is greater than the right value.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableQueryComparison.GreaterThanOrEqual">
            <summary>
            Compares if the left value is greater than or equal to the right value.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableQueryComparison.LessThan">
            <summary>
            Compares if the left value is less than the right value.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableQueryComparison.LessThanOrEqual">
            <summary>
            Compares if the left value is less than or equal to the right value.
            </summary>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Tables.TableRecord">
            <summary>
            Defines a table record that allows callers to access the record properties directly.
            </summary>
            <example>
            Properties can be set like this:
            <code>
            <![CDATA[
            record["PropertyName"] = value;
            record.Properties["PropertyName"] = value;
            record.Properties["PropertyName"] = new TableProperty(value);
            ]]>
            </code>
            And retrieved like this:
            <code>
            <![CDATA[
            string value = record.GetPropertyValueOrDefault("PropertyName", (string)null);
            string value = record["PropertyName"];
            string value = record.Properties["PropertyName"];
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.TableRecord.Key1">
            <summary>
            Gets or sets the first key of the record.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.TableRecord.Key2">
            <summary>
            Gets or sets the second key of the record.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.TableRecord.Timestamp">
            <summary>
            Gets or sets the time stamp of the record.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.TableRecord.Properties">
            <summary>
            Gets the table record properties, indexed by property name.
            </summary>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.TableRecord.Item(System.String)">
            <summary>
            Gets or sets the table property with the specified key.
            </summary>
            <value>
            The <see cref="T:Primavera.Hydrogen.Storage.Tables.TableProperty"/>.
            </value>
            <param name="key">The table property key.</param>
            <returns>The table property with the specified key.</returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableRecord"/> class.
            </summary>
            <param name="key1">The first key of the record.</param>
            <param name="key2">The second key of the record.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.String)">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.Byte[])">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.Boolean)">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.Nullable{System.Boolean})">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.DateTimeOffset)">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist. Values are stored in UTC.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist. Values are stored in UTC.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.DateTime)">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.Nullable{System.DateTime})">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.Double)">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.Nullable{System.Double})">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.Guid)">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.Int32)">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.Int64)">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableRecord.GetPropertyValueOrDefault(System.String,System.Nullable{System.Int64})">
            <summary>
            Gets the value of the specified property or the specified default value if the property does not exist.
            </summary>
            <param name="key">The property key.</param>
            <param name="defaultValue">The default value that should be returned if the property does not exist.</param>
            <returns>
            The value of the specified property.
            The specified default value if the property does not exist.
            The type default value if the property is null.
            The type default value if the property value is not of the expected type.
            </returns>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Tables.TableStorageError">
            <summary>
            Indicates the code of the error in a <see cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException" />.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.ServerUnavailable">
            <summary>
            Could not connect to the storage server.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.InvalidApplicationIdentity">
            <summary>
            The application identity is invalid.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.DuplicateProperties">
            <summary>
            The table has duplicate properties.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.TableTooLarge">
            <summary>
            The table is too large.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.InvalidValueType">
            <summary>
            At least one table property as an invalid value type.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.PropertiesValueMissing">
            <summary>
            The value of at least a property is missing.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.PropertyNameInvalid">
            <summary>
            The name of at least one property is invalid.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.PropertyNameTooLong">
            <summary>
            The name of at least one property is too long.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.PropertyValueTooLarge">
            <summary>
            The value of at least one property is too large.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.TooManyProperties">
            <summary>
            The table has too many properties.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.TableNotFound">
            <summary>
            The table does not exist.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.TableAlreadyExists">
            <summary>
            The table already exists.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.TableBeingDeleted">
            <summary>
            The table is being deleted.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.RecordNotFound">
            <summary>
            The record does not exist.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.FirstKeyMismatch">
            <summary>
            All the records in an insert operation must have the same first key.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.RecordTypeNotSupported">
            <summary>
            The type of the record object is not supported.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.PropertyTypeNotSupported">
            <summary>
            The type of a property is not supported.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.InvalidTableName">
            <summary>
            The table name is invalid.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.InvalidRecordKeys">
            <summary>
            At least one record in a batch operation has invalid keys.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.RecordAlreadyExists">
            <summary>
            The record already exists.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.OutOfRangeInput">
            <summary>
            The value of a property is out of range.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.InvalidInput">
            <summary>
            The value of a property is invalid.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.BadRequest">
            <summary>
            The server returned an error with status code <see cref="F:System.Net.HttpStatusCode.BadRequest"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.Conflict">
            <summary>
            The server returned an error with status code <see cref="F:System.Net.HttpStatusCode.Conflict"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.NotFound">
            <summary>
            The server returned an error with status code <see cref="F:System.Net.HttpStatusCode.NotFound"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.Forbidden">
            <summary>
            The server returned an error with status code <see cref="F:System.Net.HttpStatusCode.Forbidden"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.Unauthorized">
            <summary>
            The server returned an error with status code <see cref="F:System.Net.HttpStatusCode.Unauthorized"/>.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.Unexpected">
            <summary>
            The error is unexpected.
            </summary>
        </member>
        <member name="F:Primavera.Hydrogen.Storage.Tables.TableStorageError.Unspecified">
            <summary>
            The error code was not specified by the code that raised the exception.
            </summary>
        </member>
        <member name="T:Primavera.Hydrogen.Storage.Tables.TableStorageException">
            <summary>
            Represents errors raised by the <see cref="T:Primavera.Hydrogen.Storage.Tables.ITableStorageService"/>.
            </summary>
            <seealso cref="T:Primavera.Hydrogen.Storage.StorageServiceException"/>
        </member>
        <member name="P:Primavera.Hydrogen.Storage.Tables.TableStorageException.ErrorCode">
            <summary>
            Gets the code of the error that caused the exception.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableStorageException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException"/> class.
            </summary>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableStorageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException"/> class.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableStorageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException"/> class.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">Represents the exception that caused this error.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableStorageException.#ctor(Primavera.Hydrogen.Storage.Tables.TableStorageError)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException" /> class.
            </summary>
            <param name="error">The code of the error that caused the exception.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableStorageException.#ctor(Primavera.Hydrogen.Storage.Tables.TableStorageError,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException" /> class.
            </summary>
            <param name="error">The code of the error that caused the exception.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Primavera.Hydrogen.Storage.Tables.TableStorageException.#ctor(Primavera.Hydrogen.Storage.Tables.TableStorageError,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Primavera.Hydrogen.Storage.Tables.TableStorageException"/> class.
            </summary>
            <param name="error">The code of the error that caused the exception.</param>
            <param name="message">The error message.</param>
            <param name="innerException">The exception that caused this error.</param>
        </member>
    </members>
</doc>
