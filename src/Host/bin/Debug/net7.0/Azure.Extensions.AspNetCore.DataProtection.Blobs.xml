<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Azure.Extensions.AspNetCore.DataProtection.Blobs</name>
    </assembly>
    <members>
        <member name="T:Azure.Extensions.AspNetCore.DataProtection.Blobs.AzureBlobXmlRepository">
            <summary>
            An <see cref="T:Microsoft.AspNetCore.DataProtection.Repositories.IXmlRepository" /> which is backed by Azure Blob Storage.
            </summary>
            <remarks>
            Instances of this type are thread-safe.
            </remarks>
        </member>
        <member name="M:Azure.Extensions.AspNetCore.DataProtection.Blobs.AzureBlobXmlRepository.#ctor(Azure.Storage.Blobs.BlobClient)">
            <summary>
            Creates a new instance of the <see cref="T:Azure.Extensions.AspNetCore.DataProtection.Blobs.AzureBlobXmlRepository" />.
            </summary>
            <param name="blobClient">A <see cref="T:Azure.Storage.Blobs.BlobClient" /> that is connected to the blob we are reading from and writing to.</param>
        </member>
        <member name="M:Azure.Extensions.AspNetCore.DataProtection.Blobs.AzureBlobXmlRepository.GetAllElements">
            <summary>
            Gets all top-level XML elements in the repository.
            </summary><remarks>
            All top-level elements in the repository.
            </remarks>
        </member>
        <member name="M:Azure.Extensions.AspNetCore.DataProtection.Blobs.AzureBlobXmlRepository.StoreElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Adds a top-level XML element to the repository.
            </summary><param name="element">The element to add.</param><param name="friendlyName">An optional name to be associated with the XML element.
            For instance, if this repository stores XML files on disk, the friendly name may
            be used as part of the file name. Repository implementations are not required to
            observe this parameter even if it has been provided by the caller.</param><remarks>
            The 'friendlyName' parameter must be unique if specified. For instance, it could
            be the id of the key being stored.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.DataProtection.AzureStorageBlobDataProtectionBuilderExtensions">
            <summary>
            Contains Azure-specific extension methods for modifying a
            <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.AzureStorageBlobDataProtectionBuilderExtensions.PersistKeysToAzureBlobStorage(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Uri)">
            <summary>
            Configures the data protection system to persist keys to the specified path
            in Azure Blob Storage.
            </summary>
            <param name="builder">The builder instance to modify.</param>
            <param name="sasUri">The full URI where the key file should be stored.
            The URI must contain the SAS token as a query string parameter.</param>
            <returns>The value <paramref name="builder" />.</returns>
            <remarks>
            The container referenced by <paramref name="blobSasUri" /> must already exist.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.AzureStorageBlobDataProtectionBuilderExtensions.PersistKeysToAzureBlobStorage(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Uri,Azure.Core.TokenCredential)">
            <summary>
            Configures the data protection system to persist keys to the specified path
            in Azure Blob Storage.
            </summary>
            <param name="builder">The builder instance to modify.</param>
            <param name="sasUri">The full URI where the key file should be stored.
            The URI must contain the SAS token as a query string parameter.</param>
            <param name="tokenCredential">The credentials to connect to the blob.</param>
            <returns>The value <paramref name="builder" />.</returns>
            <remarks>
            The container referenced by <paramref name="blobUri" /> must already exist.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.AzureStorageBlobDataProtectionBuilderExtensions.PersistKeysToAzureBlobStorage(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Uri,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Configures the data protection system to persist keys to the specified path
            in Azure Blob Storage.
            </summary>
            <param name="builder">The builder instance to modify.</param>
            <param name="sasUri">The full URI where the key file should be stored.
            The URI must contain the SAS token as a query string parameter.</param>
            <param name="sharedKeyCredential">The credentials to connect to the blob.</param>
            <returns>The value <paramref name="builder" />.</returns>
            <remarks>
            The container referenced by <paramref name="blobUri" /> must already exist.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.AzureStorageBlobDataProtectionBuilderExtensions.PersistKeysToAzureBlobStorage(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.String,System.String,System.String)">
            <summary>
            Configures the data protection system to persist keys to the specified path
            in Azure Blob Storage.
            </summary>
            <param name="builder">The builder instance to modify.</param>
            <param name="connectionString">A connection string includes the authentication information
            required for your application to access data in an Azure Storage
            account at runtime.
            </param>
            <param name="containerName">The container name to use.</param>
            <param name="blobName">The blob name to use.</param>
            <returns>The value <paramref name="builder" />.</returns>
            <remarks>
            The container referenced by <paramref name="containerName" /> must already exist.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.AzureStorageBlobDataProtectionBuilderExtensions.PersistKeysToAzureBlobStorage(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Azure.Storage.Blobs.BlobClient)">
            <summary>
            Configures the data protection system to persist keys to the specified path
            in Azure Blob Storage.
            </summary>
            <param name="builder">The builder instance to modify.</param>
            <param name="blobClient">The <see cref="T:Azure.Storage.Blobs.BlobClient" /> in which the
            key file should be stored.</param>
            <returns>The value <paramref name="builder" />.</returns>
            <remarks>
            The blob referenced by <paramref name="blobClient" /> must already exist.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.AzureStorageBlobDataProtectionBuilderExtensions.PersistKeysToAzureBlobStorage(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Func{System.IServiceProvider,Azure.Storage.Blobs.BlobClient})">
            <summary>
            Configures the data protection system to persist keys to the specified path
            in Azure Blob Storage.
            </summary>
            <param name="builder">The builder instance to modify.</param>
            <param name="blobClientFactory">The factory delegate used to create the <see cref="T:Azure.Storage.Blobs.BlobClient" /> in which the
            key file should be stored.</param>
            <returns>The value <paramref name="builder" />.</returns>
            <remarks>
            The blob referenced by <paramref name="blobClient" /> must already exist.
            </remarks>
        </member>
    </members>
</doc>
