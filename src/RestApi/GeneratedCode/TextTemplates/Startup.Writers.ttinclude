<#+

// *** WriteAddRestApiPart

public void WriteAddRestApiPart(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel serviceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;

#>
        <#= serviceModel.Namespace #>.Server.RestApi.Startup instance = new <#= serviceModel.Namespace #>.Server.RestApi.Startup(hostConfiguration);

        instance.AddServices(builder.Services);

        instance.AddMvc(builder);

        instance.AddMappings(builder.Services);

<#+

    if (serviceModel.Webhooks.Any())
    {

#>
        instance.ConfigureWebhooksOptions(builder.Services);

<#+

    }

#>
        instance.ConfigureJsonOptions(builder.Services);

        return builder;
<#+

}

// *** WriteAddMvc

public void WriteAddMvc(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel serviceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;

#>
        // Known controllers

        builder.AddApplicationPart(
            typeof(RestApi.Controllers.CustomApiControllerBase).Assembly);
<#+

    if (serviceModel.Extensions().HasODataServerSide)
    {

#>

        // OData

        this.AddOData(builder);
<#+

    }

}

// *** WriteAddOData

public void WriteAddOData(ModelWriter modelWriter, MethodBodyModel model)
{
    CSharpFileModel rootModel = model.RootModelAs<CSharpFileModel>();
    ServiceModel serviceModel = rootModel.SourceModel as ServiceModel;

#>
        builder
            .AddOData(
                options =>
                {
                    options
                        .Select()
                        .Filter()
                        .OrderBy()
                        .Count()
                        .SkipToken()
                        .SetMaxTop(200);

                    RestApi.ODataModelsBuilder modelBuilder = new RestApi.ODataModelsBuilder();

<#+

    foreach (ControllerType controllerType in serviceModel.Controllers.Where(i => i.Extensions().HasODataServerSide).OrderBy(i => i.Name))
    {

#>
                    options.AddRouteComponents(
                        Routes.<#= controllerType.Name #>.OData, 
                        modelBuilder.Get<#= controllerType.Name #>Model());
<#+

    }

#>

                    this.ConfigureOData(options);
                });
<#+

}

// *** WriteConstructor

public void WriteConstructor(ModelWriter modelWriter, ConstructorBodyModel model)
{

#>
        this.HostConfiguration = hostConfiguration;
<#+

}

// *** WriteAddMappings

public void WriteAddMappings(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel serviceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;

#>
        services.AddSingleton<AutoMapper.Profile, <#= serviceModel.Namespace #>.Server.RestApi.MappingProfile>();
<#+

}

// *** WriteConfigureWebhooksOptions

public void WriteConfigureWebhooksOptions(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel serviceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;

#>
        services.Configure<Primavera.Hydrogen.AspNetCore.Webhooks.WebhooksOptions>(
            options =>
            {
                options.ApplicationName = "<#= serviceModel.GUID #>";

                options.EventsSupported = new System.Collections.Generic.List<Primavera.Hydrogen.AspNetCore.Webhooks.WebhookEvent>()
                {
<#+

    foreach (Webhook webhook in serviceModel.Webhooks.OrderBy(i => i.Name))
    {

#>
                    new Primavera.Hydrogen.AspNetCore.Webhooks.WebhookEvent()
                    {
                        EventName = <#= serviceModel.Namespace #>.Server.Common.WebhookEventNames.<#= webhook.Name #>,
                        EventDescriptions = new System.Collections.Generic.Dictionary<string, string>(System.StringComparer.OrdinalIgnoreCase)
                        {
                            ["en"] = this.GetResourceValueForCulture("RES_Webhook_<#= webhook.Name #>_EventDescription", "en", typeof(<#= serviceModel.Namespace #>.Server.RestApi.Localization.WebhooksResources)) ?? string.Empty,
                            ["pt"] = this.GetResourceValueForCulture("RES_Webhook_<#= webhook.Name #>_EventDescription", "pt", typeof(<#= serviceModel.Namespace #>.Server.RestApi.Localization.WebhooksResources)) ?? string.Empty,
                            ["es"] = this.GetResourceValueForCulture("RES_Webhook_<#= webhook.Name #>_EventDescription", "es", typeof(<#= serviceModel.Namespace #>.Server.RestApi.Localization.WebhooksResources)) ?? string.Empty,
                            ["ca"] = this.GetResourceValueForCulture("RES_Webhook_<#= webhook.Name #>_EventDescription", "ca", typeof(<#= serviceModel.Namespace #>.Server.RestApi.Localization.WebhooksResources)) ?? string.Empty,
                            ["it"] = this.GetResourceValueForCulture("RES_Webhook_<#= webhook.Name #>_EventDescription", "it", typeof(<#= serviceModel.Namespace #>.Server.RestApi.Localization.WebhooksResources)) ?? string.Empty,
                            ["ro"] = this.GetResourceValueForCulture("RES_Webhook_<#= webhook.Name #>_EventDescription", "ro", typeof(<#= serviceModel.Namespace #>.Server.RestApi.Localization.WebhooksResources)) ?? string.Empty
                        },
                        PayloadDescriptions = new System.Collections.Generic.Dictionary<string, string>(System.StringComparer.OrdinalIgnoreCase)
                        {
                            ["en"] = this.GetResourceValueForCulture("RES_Webhook_<#= webhook.Name #>_PayloadDescription", "en", typeof(<#= serviceModel.Namespace #>.Server.RestApi.Localization.WebhooksResources)) ?? string.Empty,
                            ["pt"] = this.GetResourceValueForCulture("RES_Webhook_<#= webhook.Name #>_PayloadDescription", "pt", typeof(<#= serviceModel.Namespace #>.Server.RestApi.Localization.WebhooksResources)) ?? string.Empty,
                            ["es"] = this.GetResourceValueForCulture("RES_Webhook_<#= webhook.Name #>_PayloadDescription", "es", typeof(<#= serviceModel.Namespace #>.Server.RestApi.Localization.WebhooksResources)) ?? string.Empty,
                            ["ca"] = this.GetResourceValueForCulture("RES_Webhook_<#= webhook.Name #>_PayloadDescription", "ca", typeof(<#= serviceModel.Namespace #>.Server.RestApi.Localization.WebhooksResources)) ?? string.Empty,
                            ["it"] = this.GetResourceValueForCulture("RES_Webhook_<#= webhook.Name #>_PayloadDescription", "it", typeof(<#= serviceModel.Namespace #>.Server.RestApi.Localization.WebhooksResources)) ?? string.Empty,
                            ["ro"] = this.GetResourceValueForCulture("RES_Webhook_<#= webhook.Name #>_PayloadDescription", "ro", typeof(<#= serviceModel.Namespace #>.Server.RestApi.Localization.WebhooksResources)) ?? string.Empty
                        },
                    },
<#+

    }

#>
                };

                options.SerializerOptions.CombineResolvers(
                    Models.SerializerContext.Default);

                this.ConfigureWebhooksOptions(options);
            });
<#+

}

// *** WriteGetResourceValueForCulture

public void WriteGetResourceValueForCulture(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel sourceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;

#>
        System.Resources.ResourceManager resourceManager = new System.Resources.ResourceManager(
            "<#= sourceModel.Namespace #>.Server.RestApi.GeneratedCode.WebhooksResources.gen", 
            resourcesType.Assembly);

        System.Globalization.CultureInfo resourceCulture = new System.Globalization.CultureInfo(culture);

        string? result = resourceManager.GetString(
            name, 
            resourceCulture);

        if (string.IsNullOrEmpty(result) && !culture.EqualsNoCase("en"))
        {
            System.Globalization.CultureInfo fallbackCulture = new System.Globalization.CultureInfo("en");

            result = resourceManager.GetString(
                name, 
                fallbackCulture);
        }

        return result;
<#+

}

// *** WriteConfigureJsonOptions

public void WriteConfigureJsonOptions(ModelWriter modelWriter, MethodBodyModel model)
{
    ServiceModel serviceModel = model.RootModelAs<CSharpFileModel>().SourceModel as ServiceModel;

    if (!serviceModel.Models.Any(m => m.Extensions().IsVisibleServerSide))
    {
        return;
    }

#>
        services.Configure<Microsoft.AspNetCore.Mvc.JsonOptions>(
            options =>
            {
                // NOTES:
                // This combines the known serializer contexts so that MVC
                // knows the types for the RESP API models

                options.JsonSerializerOptions.CombineResolvers(
                    RestApi.Models.SerializerContext.Default);
            });
<#+

}

#>