//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Primavera.Lithium.ChatGPT.Server.Integration.Tests.Controllers;

#region Code

#region Public Classes

/// <summary>
/// Defines the base class for <see cref="MonitoringControllerTests"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
public abstract partial class MonitoringControllerTestsBase
{
    #region Code

    #region Protected Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="MonitoringControllerTestsBase"/> class.
    /// </summary>
    protected MonitoringControllerTestsBase()
    {
    }

    #endregion

    #region Protected Methods

    /// <summary>
    /// Tests the probe endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    protected virtual async System.Threading.Tasks.Task TestProbeAsync()
    {
        using MemoryLoggerProvider loggerProvider = new MemoryLoggerProvider();

        using IntegrationTestFixture fixture = new IntegrationTestFixture()
        {
            CurrentOperation = "Monitoring.Probe",
            ConfigureLoggingDelegate = builder =>
            {
                builder
                    .SetMinimumLevel(LogLevel.Error)
                    .AddProvider(loggerProvider);
            }
        };

        Primavera.Lithium.ChatGPT.Client.Rest.ChatGPTClient serviceClient = await fixture.GetServiceClientAsync()
            .ConfigureAwait(false);

        try
        {
            Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.HealthMonitoring.HealthResult> result1 = await serviceClient.Monitoring.ProbeAsync().ConfigureAwait(false);
            result1.Response.StatusCode.Should().Be((int)System.Net.HttpStatusCode.OK);
            result1.Result.Should().NotBeNull();
            result1.Result.Status.Should().Be(Primavera.Hydrogen.HealthMonitoring.HealthStatus.Healthy);

            Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.HealthMonitoring.HealthResult> result2 = serviceClient.Monitoring.Probe();
            result2.Response.StatusCode.Should().Be((int)System.Net.HttpStatusCode.OK);
            result2.Result.Should().NotBeNull();
            result2.Result.Status.Should().Be(Primavera.Hydrogen.HealthMonitoring.HealthStatus.Healthy);
        }
        catch (Primavera.Hydrogen.Rest.Client.RestRequestException ex)
        {
            Primavera.Hydrogen.HealthMonitoring.HealthResult healthResult = Primavera.Hydrogen.HealthMonitoring.HealthResultSerializer.Deserialize(
                ex.Response.Content.ToString());
            
            healthResult.Status.Should().Be(Primavera.Hydrogen.HealthMonitoring.HealthStatus.Healthy, $"actual result is '{healthResult}' (application error log is '{loggerProvider.Output}')");
        }
    }

    /// <summary>
    /// Tests the diagnostics endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    protected virtual async System.Threading.Tasks.Task TestDiagnosticsAsync()
    {
        using MemoryLoggerProvider loggerProvider = new MemoryLoggerProvider();

        using IntegrationTestFixture fixture = new IntegrationTestFixture()
        {
            CurrentOperation = "Monitoring.Diagnostics",
            ConfigureLoggingDelegate = builder =>
            {
                builder
                    .SetMinimumLevel(LogLevel.Error)
                    .AddProvider(loggerProvider);
            }
        };

        Primavera.Lithium.ChatGPT.Client.Rest.ChatGPTClient serviceClient = await fixture.GetServiceClientAsync()
            .ConfigureAwait(false);

        try
        {
            Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.HealthMonitoring.HealthResult> result1 = await serviceClient.Monitoring.DiagnosticsAsync().ConfigureAwait(false);
            result1.Response.StatusCode.Should().Be((int)System.Net.HttpStatusCode.OK);
            result1.Result.Should().NotBeNull();
            result1.Result.Status.Should().Be(Primavera.Hydrogen.HealthMonitoring.HealthStatus.Healthy);

            Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.HealthMonitoring.HealthResult> result2 = serviceClient.Monitoring.Diagnostics();
            result2.Response.StatusCode.Should().Be((int)System.Net.HttpStatusCode.OK);
            result2.Result.Should().NotBeNull();
            result2.Result.Status.Should().Be(Primavera.Hydrogen.HealthMonitoring.HealthStatus.Healthy);
        }
        catch (Primavera.Hydrogen.Rest.Client.RestRequestException ex)
        {
            Primavera.Hydrogen.HealthMonitoring.HealthResult healthResult = Primavera.Hydrogen.HealthMonitoring.HealthResultSerializer.Deserialize(
                ex.Response.Content.ToString());
            
            healthResult.Status.Should().Be(Primavera.Hydrogen.HealthMonitoring.HealthStatus.Healthy, $"actual result is '{healthResult} (application error log is '{loggerProvider.Output}')'");
        }
    }

    /// <summary>
    /// Tests the endpoints endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    protected virtual async System.Threading.Tasks.Task TestEndpointsAsync()
    {
        using IntegrationTestFixture fixture = new IntegrationTestFixture()
        {
            CurrentOperation = "Monitoring.Endpoints"
        };

        Primavera.Lithium.ChatGPT.Client.Rest.ChatGPTClient serviceClient = await fixture.GetServiceClientAsync()
            .ConfigureAwait(false);

        Primavera.Hydrogen.Rest.Client.RestServiceResult<System.Collections.Generic.IEnumerable<Primavera.Hydrogen.Rest.Routing.EndpointInfo>> result1 = await serviceClient.Monitoring.EndpointsAsync().ConfigureAwait(false);
        result1.Response.StatusCode.Should().Be((int)System.Net.HttpStatusCode.OK);
        result1.Result.Should().NotBeEmpty();

        Primavera.Hydrogen.Rest.Client.RestServiceResult<System.Collections.Generic.IEnumerable<Primavera.Hydrogen.Rest.Routing.EndpointInfo>> result2 = serviceClient.Monitoring.Endpoints();
        result2.Response.StatusCode.Should().Be((int)System.Net.HttpStatusCode.OK);
        result2.Result.Should().NotBeEmpty();
    }

    /// <summary>
    /// Tests the configuration analyzer endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    protected virtual async System.Threading.Tasks.Task TestConfigurationAsync()
    {
        using IntegrationTestFixture fixture = new IntegrationTestFixture()
        {
            CurrentOperation = "Monitoring.Configuration"
        };

        Primavera.Lithium.ChatGPT.Client.Rest.ChatGPTClient serviceClient = await fixture.GetServiceClientAsync()
            .ConfigureAwait(false);

        Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.Rest.Configuration.ConfigurationLocation> result1 = await serviceClient.Monitoring.ConfigurationAsync().ConfigureAwait(false);
        result1.Response.StatusCode.Should().Be((int)System.Net.HttpStatusCode.OK);
        result1.Result.Should().NotBeNull();

        Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.Rest.Configuration.ConfigurationLocation> result2 = serviceClient.Monitoring.Configuration();
        result2.Response.StatusCode.Should().Be((int)System.Net.HttpStatusCode.OK);
        result2.Result.Should().NotBeNull();
    }

    /// <summary>
    /// Tests the information endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    protected virtual async System.Threading.Tasks.Task TestInformationAsync()
    {
        using IntegrationTestFixture fixture = new IntegrationTestFixture()
        {
            CurrentOperation = "Monitoring.Information"
        };

        Primavera.Lithium.ChatGPT.Client.Rest.ChatGPTClient serviceClient = await fixture.GetServiceClientAsync()
            .ConfigureAwait(false);

        Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.Rest.Description.ServiceInfo> result1 = await serviceClient.Monitoring.InformationAsync().ConfigureAwait(false);
        result1.Response.StatusCode.Should().Be((int)System.Net.HttpStatusCode.OK);
        result1.Result.Should().NotBeNull();

        Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.Rest.Description.ServiceInfo> result2 = serviceClient.Monitoring.Information();
        result2.Response.StatusCode.Should().Be((int)System.Net.HttpStatusCode.OK);
        result2.Result.Should().NotBeNull();
    }

    #endregion

    #endregion
}

/// <summary>
/// Provides integration tests for <see cref="Server.Host.Controllers.MonitoringController"/>.
/// </summary>
/// <seealso cref="MonitoringControllerTestsBase" />
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
public sealed partial class MonitoringControllerTests : MonitoringControllerTestsBase
{
    #region Code

    #region Public Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="MonitoringControllerTests"/> class.
    /// </summary>
    public MonitoringControllerTests()
        : base()
    {
    }

    #endregion

    #region Public Methods

    /// <summary>
    /// Tests the probe endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    [Xunit.Fact]
    public System.Threading.Tasks.Task MonitoringController_ProbeAsync()
    {
        return this.TestProbeAsync();
    }

    /// <summary>
    /// Tests the diagnostics endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    [Xunit.Fact]
    public System.Threading.Tasks.Task MonitoringController_DiagnosticsAsync()
    {
        return this.TestDiagnosticsAsync();
    }

    /// <summary>
    /// Tests the endpoints endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    [Xunit.Fact]
    public System.Threading.Tasks.Task MonitoringController_EndpointsAsync()
    {
        return this.TestEndpointsAsync();
    }

    /// <summary>
    /// Tests the configuration analyzer endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    [Xunit.Fact]
    public System.Threading.Tasks.Task MonitoringController_ConfigurationAsync()
    {
        return this.TestConfigurationAsync();
    }

    /// <summary>
    /// Tests the information endpoint.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    [Xunit.Fact]
    public System.Threading.Tasks.Task MonitoringController_InformationAsync()
    {
        return this.TestInformationAsync();
    }

    #endregion

    #endregion
}

#endregion

#endregion
