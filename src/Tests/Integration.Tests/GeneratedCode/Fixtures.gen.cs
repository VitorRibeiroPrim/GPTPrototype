//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Primavera.Lithium.ChatGPT.Server.Integration.Tests;

#region Code

#region Public Classes

/// <summary>
/// Defines the base class for a test fixture used for integration tests.
/// </summary>
/// <typeparam name="TStartup">The startup class.</typeparam>
/// <seealso cref="System.IDisposable" />
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
public abstract partial class IntegrationTestFixtureBase<TStartup> : System.IDisposable
    where TStartup : class
{
    #region Code

    #region Private Fields

    private Primavera.Hydrogen.DesignTime.Testing.AspNetCore.WebApplicationTestHost application;
    private bool initialized;
    private bool disposed;

    #endregion

    #region Public Properties

    /// <summary>
    /// Gets or sets the operation being tested.
    /// </summary>
    public virtual string CurrentOperation
    {
        get;
        set;
    }

    /// <summary>
    /// Gets the application test host.
    /// </summary>
    public virtual Primavera.Hydrogen.DesignTime.Testing.AspNetCore.WebApplicationTestHost Application
    {
        get
        {
            this.Initialize();
            return this.application;
        }
    }

    /// <summary>
    /// Gets or sets a delegate used to configure the logging.
    /// </summary>
    public virtual System.Action<Microsoft.Extensions.Logging.ILoggingBuilder> ConfigureLoggingDelegate
    {
        get;
        set;
    }

    /// <summary>
    /// Gets or sets a delegate used to configure the application services.
    /// </summary>
    public virtual System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection> ConfigureServicesDelegate
    {
        get;
        set;
    }

    #endregion

    #region Protected Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="IntegrationTestFixtureBase{TStartup}"/> class.
    /// </summary>
    /// <param name="startupType">The type of the startup class. Optional (if not specified the default mock startup will be used).</param>
    protected IntegrationTestFixtureBase(System.Type startupType = null)
    {
    }

    #endregion

    #region Public Methods

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
    /// </summary>
    public void Dispose()
    {
        this.Dispose(true);
        System.GC.SuppressFinalize(this);
    }

    /// <summary>
    /// Returns an instance of the service client.
    /// </summary>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    public virtual System.Threading.Tasks.Task<Primavera.Lithium.ChatGPT.Client.Rest.ChatGPTClient> GetServiceClientAsync()
    {
        Primavera.Lithium.ChatGPT.Client.Rest.ChatGPTClientOptions clientOptions = new Primavera.Lithium.ChatGPT.Client.Rest.ChatGPTClientOptions()
        {
            Transport = new Primavera.Hydrogen.Rest.Client.Pipeline.HttpClientTransport(
                this.Application.CreateHandler())
        };

        this.ConfigureServiceClientOptions(clientOptions);

        return Task.FromResult(
            new Primavera.Lithium.ChatGPT.Client.Rest.ChatGPTClient(
                this.Application.Server.BaseAddress,
                new Primavera.Hydrogen.Rest.Client.Authentication.NoCredential(),
                clientOptions));
    }

    /// <summary>
    /// Warms up the application.
    /// </summary>
    /// <param name="cancellationToken">The cancellation token.</param>
    /// <returns>
    /// The <see cref="System.Threading.Tasks.Task"/> that represents the asynchronous operation.
    /// </returns>
    /// <remarks>
    /// This method may be used to start the application and let it finish background services (for example) before executing tests.
    /// </remarks>
    public virtual async System.Threading.Tasks.Task WarmUpApplicationAsync(System.Threading.CancellationToken cancellationToken = default)
    {
        using HttpRequestMessage httpRequest = this.Application
            .CreateRequest(
                System.Net.Http.HttpMethod.Get,
                new System.Uri("https://localhost"));

        await this.Application
            .SendRequestAsync(
                httpRequest,
                cancellationToken: cancellationToken)
            .ConfigureAwait(false);

        await System.Threading.Tasks.Task.Delay(
            TimeSpan.FromSeconds(5),
            cancellationToken)
            .ConfigureAwait(false);
    }

    #endregion

    #region Protected Methods

    /// <summary>
    /// Releases unmanaged and - optionally - managed resources.
    /// </summary>
    /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    protected virtual void Dispose(bool disposing)
    {
        // Already disposed?

        if (this.disposed)
        {
            return;
        }

        // Called from Dispose()?

        if (disposing)
        {
            this.application?.Dispose();
            this.application = null;
        }

        // Set flag

        this.disposed = true;
    }

    /// <summary>
    /// Initializes the fixture.
    /// </summary>
    protected virtual void Initialize()
    {
        if (this.initialized)
        {
            return;
        }

        this.initialized = true;

        this.application = this.BuildApplication();
    }

    /// <summary>
    /// Allows configuring the service client options.
    /// </summary>
    /// <param name="clientOptions">The client options.</param>
    protected virtual void ConfigureServiceClientOptions(Primavera.Lithium.ChatGPT.Client.Rest.ChatGPTClientOptions clientOptions)
    {
    }

    /// <summary>
    /// Builds the application test host.
    /// </summary>
    /// <returns>
    /// The <see cref="Primavera.Hydrogen.DesignTime.Testing.AspNetCore.WebApplicationTestHost"/> instance.
    /// </returns>
    protected virtual Primavera.Hydrogen.DesignTime.Testing.AspNetCore.WebApplicationTestHost BuildApplication()
    {
        Primavera.Hydrogen.DesignTime.Testing.AspNetCore.WebApplicationTestHostBuilder builder = Primavera.Hydrogen.DesignTime.Testing.AspNetCore.WebApplicationTestHostBuilder
            .Create();

        if (this.ConfigureLoggingDelegate != null)
        {
            builder.ConfigureLogging(this.ConfigureLoggingDelegate);
        }

        if (this.ConfigureServicesDelegate != null)
        {
            builder
                .ConfigureServices(this.ConfigureServicesDelegate);
        }

        return builder
            .UseStartup<TStartup>()
            .Build();
    }

    #endregion

    #endregion
}

/// <summary>
/// Defines a test fixture used for integration tests.
/// </summary>
/// <typeparam name="TStartup">The startup class.</typeparam>
/// <seealso cref="IntegrationTestFixtureBase{TStartup}" />
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
public partial class IntegrationTestFixture<TStartup> : IntegrationTestFixtureBase<TStartup>
    where TStartup : class
{
    #region Code

    #region Public Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="IntegrationTestFixture{TStartup}"/> class.
    /// </summary>
    public IntegrationTestFixture()
        : base()
    {
    }

    #endregion

    #endregion
}

/// <summary>
/// Defines a test fixture used for integration tests.
/// </summary>
/// <seealso cref="IntegrationTestFixtureBase{MockStartup}" />
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
public partial class IntegrationTestFixture : IntegrationTestFixture<MockStartup>
{
    #region Code

    #region Public Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="IntegrationTestFixture"/> class.
    /// </summary>
    public IntegrationTestFixture()
        : base()
    {
    }

    #endregion

    #endregion
}

#endregion

#endregion
