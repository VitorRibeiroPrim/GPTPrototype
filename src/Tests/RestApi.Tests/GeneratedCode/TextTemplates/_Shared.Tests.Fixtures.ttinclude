<#+

public void FixturesTransformations(string project)
{
    // Build the transformations

    ServiceModelTransformations<CSharpFileModel> transformations =
        new ServiceModelTransformations<CSharpFileModel>(
            this.ServiceModel);

    transformations.Add(
        new FixtureTransformation(project));

    // Transform

    CSharpFileModel targetModel = new CSharpFileModel(
        this.ServiceModel,
        false);
    
    transformations.TransformTo(targetModel);

    // Create controller

    ModelWriterController controller = new ModelWriterController(this.GenerationEnvironment);

    // Add writers

    controller.AddModelWriter<ConstructorBodyModel>(
        (w, m) =>
        {
            ConstructorModel parentConstructor = m.ParentModelAs<ConstructorModel>();
            ClassModel parentClass = parentConstructor.ParentModelAs<ClassModel>();
            return parentClass.Name.EndsWithNoCase("Base");
        }, 
        this.WriteBaseFixtureClassConstructor);

    controller.AddModelWriter<PropertyGetAccessorModel>(
        (w, m) => m.ParentModelAs<PropertyModel>().Name.EqualsNoCase("ApplicationServices"),
        this.WriteGetApplicationServices);

    controller.AddModelWriter<MethodBodyModel>(
        (w, m) =>
        {
            MethodModel parentMethod = m.ParentModelAs<MethodModel>();
            return parentMethod.Name.EqualsNoCase("Initialize");
        }, 
        this.WriteInitialize);

    controller.AddModelWriter<MethodBodyModel>(
        (w, m) =>
        {
            MethodModel parentMethod = m.ParentModelAs<MethodModel>();
            return parentMethod.Name.EqualsNoCase("BuildServiceProvider");
        }, 
        this.WriteBuildServiceProvider);

    controller.AddModelWriter<MethodBodyModel>(
        (w, m) =>
        {
            MethodModel parentMethod = m.ParentModelAs<MethodModel>();
            return parentMethod.Name.EqualsNoCase("ConfigureServices");
        }, 
        this.WriteConfigureServices);

    // Generate code

    controller.Write(targetModel);
}

#>