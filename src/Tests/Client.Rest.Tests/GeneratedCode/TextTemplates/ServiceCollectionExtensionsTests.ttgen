<#@ template debug="false" hostspecific="true" inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".gen.cs" #>
<#@ ServiceDesigner processor="ServiceDesignerDirectiveProcessor" requires="FileName=''" #>
<#

// Build the transformations

ServiceModelTransformations<CSharpFileModel> transformations = new ServiceModelTransformations<CSharpFileModel>(this.ServiceModel);

transformations.Add(
    (s, t) => true,
    (s, t) => { return s is ServiceModel; },
    this.TransformServiceModel);

// Transform

CSharpFileModel targetModel = new CSharpFileModel(this.ServiceModel, false);
transformations.TransformTo(targetModel);

// Create controller

ModelWriterController controller = new ModelWriterController(this.GenerationEnvironment);

// Add writers

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.GetFacet<string>("Method") == "AddDefault";
    }, 
    this.WriteAddDefault);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.GetFacet<string>("Method") == "TestAddDefault";
    }, 
    this.WriteTestAddDefault);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.GetFacet<string>("Method") == "AddDefaultWithOptionsFactory";
    }, 
    this.WriteAddDefaultWithOptionsFactory);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.GetFacet<string>("Method") == "TestAddDefaultWithOptionsFactory";
    }, 
    this.WriteTestAddDefaultWithOptionsFactory);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.GetFacet<string>("Method") == "AddNamed";
    }, 
    this.WriteAddNamed);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.GetFacet<string>("Method") == "TestAddNamed";
    }, 
    this.WriteTestAddNamed);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.GetFacet<string>("Method") == "AddNamedWithOptionsFactory";
    }, 
    this.WriteAddNamedWithOptionsFactory);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.GetFacet<string>("Method") == "TestAddNamedWithOptionsFactory";
    }, 
    this.WriteTestAddNamedWithOptionsFactory);

// Generate code

controller.Write(targetModel);

#>