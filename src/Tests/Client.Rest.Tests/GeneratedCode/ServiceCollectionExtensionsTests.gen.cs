//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Primavera.Lithium.ChatGPT.Client.Rest.Tests;

#region Code

#region Public Classes

/// <summary>
/// Defines the base class for <see cref="ServiceCollectionExtensionsTests"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
public abstract partial class ServiceCollectionExtensionsTestsBase
{
    #region Code

    #region Protected Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="ServiceCollectionExtensionsTestsBase"/> class.
    /// </summary>
    protected ServiceCollectionExtensionsTestsBase()
    {
    }

    #endregion

    #region Protected Methods

    /// <summary>
    /// Tests the <see cref="Client.Rest.ChatGPTServiceCollectionExtensions.AddChatGPTClient(IServiceCollection, Func{IServiceProvider, Client.Rest.ChatGPTClientOptions, Client.Rest.ChatGPTClient})"/> method.
    /// </summary>
    protected virtual void TestAddChatGPTDefault()
    {
        Microsoft.Extensions.DependencyInjection.ServiceCollection services = new Microsoft.Extensions.DependencyInjection.ServiceCollection();

        services
            .AddChatGPTClient(
                (provider, clientOptions) =>
                {
                    return new Client.Rest.ChatGPTClient(
                        new System.Uri("https://localhost"),
                        new Primavera.Hydrogen.Rest.Client.Authentication.NoCredential(),
                        clientOptions);
                });

        System.IServiceProvider provider = services.BuildServiceProvider();

        Client.Rest.IChatGPTClient client1 = provider.GetRequiredService<Client.Rest.IChatGPTClient>();
        Client.Rest.IChatGPTClient client2 = provider.GetRequiredService<Client.Rest.IChatGPTClient>();

        client1.Should().NotBeNull();
        client1.Should().Be(client2);
    }

    /// <summary>
    /// Tests the <see cref="Client.Rest.ChatGPTServiceCollectionExtensions.AddChatGPTClient(IServiceCollection, Func{IServiceProvider, Client.Rest.ChatGPTClientOptions}, Func{IServiceProvider, Client.Rest.ChatGPTClientOptions, Client.Rest.ChatGPTClient})"/> method.
    /// </summary>
    protected virtual void TestAddChatGPTDefaultWithOptionsFactory()
    {
        Microsoft.Extensions.DependencyInjection.ServiceCollection services = new Microsoft.Extensions.DependencyInjection.ServiceCollection();

        services
            .AddChatGPTClient(
                (provider) =>
                {
                    return new ChatGPTClientOptions();
                },
                (provider, clientOptions) =>
                {
                    return new Client.Rest.ChatGPTClient(
                        new System.Uri("https://localhost"),
                        new Primavera.Hydrogen.Rest.Client.Authentication.NoCredential(),
                        clientOptions);
                });

        System.IServiceProvider provider = services.BuildServiceProvider();

        Client.Rest.IChatGPTClient client1 = provider.GetRequiredService<Client.Rest.IChatGPTClient>();
        Client.Rest.IChatGPTClient client2 = provider.GetRequiredService<Client.Rest.IChatGPTClient>();

        client1.Should().NotBeNull();
        client1.Should().Be(client2);
    }

    /// <summary>
    /// Tests the <see cref="Client.Rest.ChatGPTServiceCollectionExtensions.AddChatGPTClient(IServiceCollection, string, Func{IServiceProvider, Client.Rest.ChatGPTClientOptions, Client.Rest.ChatGPTClient})"/> method.
    /// </summary>
    protected virtual void TestAddChatGPTNamed()
    {
        Microsoft.Extensions.DependencyInjection.ServiceCollection services = new Microsoft.Extensions.DependencyInjection.ServiceCollection();

        services
            .AddChatGPTClient(
                "Service1",
                (provider, clientOptions) =>
                {
                    return new Client.Rest.ChatGPTClient(
                        new System.Uri("https://localhost"),
                        new Primavera.Hydrogen.Rest.Client.Authentication.NoCredential(),
                        clientOptions);
                })
            .AddChatGPTClient(
                "Service2",
                (provider, clientOptions) =>
                {
                    return new Client.Rest.ChatGPTClient(
                        new System.Uri("https://localhost"),
                        new Primavera.Hydrogen.Rest.Client.Authentication.NoCredential(),
                        clientOptions);
                });

        System.IServiceProvider provider = services.BuildServiceProvider();

        provider.GetService<Client.Rest.IChatGPTClient>().Should().BeNull();
        
        Client.Rest.ChatGPTClientFactory factory = provider.GetRequiredService<Client.Rest.ChatGPTClientFactory>();
        
        Client.Rest.IChatGPTClient client1 = factory.GetClient("Service1");
        Client.Rest.IChatGPTClient client2 = factory.GetClient("Service1");
        Client.Rest.IChatGPTClient client3 = factory.GetClient("Service2");

        client1.Should().NotBeNull();
        client1.Should().Be(client2);
        client1.Should().NotBe(client3);
    }

    /// <summary>
    /// Tests the <see cref="Client.Rest.ChatGPTServiceCollectionExtensions.AddChatGPTClient(IServiceCollection, string, Func{IServiceProvider, Client.Rest.ChatGPTClientOptions}, Func{IServiceProvider, Client.Rest.ChatGPTClientOptions, Client.Rest.ChatGPTClient})"/> method.
    /// </summary>
    protected virtual void TestAddChatGPTNamedWithOptionsFactory()
    {
        Microsoft.Extensions.DependencyInjection.ServiceCollection services = new Microsoft.Extensions.DependencyInjection.ServiceCollection();

        services
            .AddChatGPTClient(
                "Service1",
                (provider) =>
                {
                    return new ChatGPTClientOptions();
                },
                (provider, clientOptions) =>
                {
                    return new Client.Rest.ChatGPTClient(
                        new System.Uri("https://localhost"),
                        new Primavera.Hydrogen.Rest.Client.Authentication.NoCredential(),
                        clientOptions);
                })
            .AddChatGPTClient(
                "Service2",
                (provider) =>
                {
                    return new ChatGPTClientOptions();
                },
                (provider, clientOptions) =>
                {
                    return new Client.Rest.ChatGPTClient(
                        new System.Uri("https://localhost"),
                        new Primavera.Hydrogen.Rest.Client.Authentication.NoCredential(),
                        clientOptions);
                });

        System.IServiceProvider provider = services.BuildServiceProvider();

        provider.GetService<Client.Rest.IChatGPTClient>().Should().BeNull();
        
        Client.Rest.ChatGPTClientFactory factory = provider.GetRequiredService<Client.Rest.ChatGPTClientFactory>();
        
        Client.Rest.IChatGPTClient client1 = factory.GetClient("Service1");
        Client.Rest.IChatGPTClient client2 = factory.GetClient("Service1");
        Client.Rest.IChatGPTClient client3 = factory.GetClient("Service2");

        client1.Should().NotBeNull();
        client1.Should().Be(client2);
        client1.Should().NotBe(client3);
    }

    #endregion

    #endregion
}

/// <summary>
/// Provides tests for the <see cref="Client.Rest.ChatGPTServiceCollectionExtensions"/> class.
/// </summary>
/// <seealso cref="ServiceCollectionExtensionsTestsBase" />
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
public sealed partial class ServiceCollectionExtensionsTests : ServiceCollectionExtensionsTestsBase
{
    #region Code

    #region Public Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="ServiceCollectionExtensionsTests"/> class.
    /// </summary>
    public ServiceCollectionExtensionsTests()
        : base()
    {
    }

    #endregion

    #region Public Methods

    /// <summary>
    /// Tests the <see cref="Client.Rest.ChatGPTServiceCollectionExtensions.AddChatGPTClient(IServiceCollection, Func{IServiceProvider, Client.Rest.ChatGPTClientOptions, Client.Rest.ChatGPTClient})"/> method.
    /// </summary>
    [Xunit.Fact]
    public void ServiceCollectionExtensions_AddChatGPTClient_Default()
    {
        this.TestAddChatGPTDefault();
    }

    /// <summary>
    /// Tests the <see cref="Client.Rest.ChatGPTServiceCollectionExtensions.AddChatGPTClient(IServiceCollection, Func{IServiceProvider, Client.Rest.ChatGPTClientOptions}, Func{IServiceProvider, Client.Rest.ChatGPTClientOptions, Client.Rest.ChatGPTClient})"/> method.
    /// </summary>
    [Xunit.Fact]
    public void ServiceCollectionExtensions_AddChatGPTClient_Default_WithOptionsFactory()
    {
        this.TestAddChatGPTDefaultWithOptionsFactory();
    }

    /// <summary>
    /// Tests the <see cref="Client.Rest.ChatGPTServiceCollectionExtensions.AddChatGPTClient(IServiceCollection, string, Func{IServiceProvider, Client.Rest.ChatGPTClientOptions, Client.Rest.ChatGPTClient})"/> method.
    /// </summary>
    [Xunit.Fact]
    public void ServiceCollectionExtensions_AddChatGPTClient_Named()
    {
        this.TestAddChatGPTNamed();
    }

    /// <summary>
    /// Tests the <see cref="Client.Rest.ChatGPTServiceCollectionExtensions.AddChatGPTClient(IServiceCollection, string, Func{IServiceProvider, Client.Rest.ChatGPTClientOptions}, Func{IServiceProvider, Client.Rest.ChatGPTClientOptions, Client.Rest.ChatGPTClient})"/> method.
    /// </summary>
    [Xunit.Fact]
    public void ServiceCollectionExtensions_AddChatGPTClient_Named_WithOptionsFactory()
    {
        this.TestAddChatGPTNamedWithOptionsFactory();
    }

    #endregion

    #endregion
}

#endregion

#endregion
