//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace Primavera.Lithium.ChatGPT.Server.Common;

/// <summary>
/// Provides extension methods for various types.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
public static partial class ExtensionMethods
{
    // Ignore Spelling: admin
    // Ignore Spelling: app
    // Ignore Spelling: api
    // Ignore Spelling: css
    // Ignore Spelling: img
    // Ignore Spelling: restapi

    #region Public Methods

    /// <summary>
    /// Gets the identifier associated with the principal.
    /// </summary>
    /// <param name="principal">The claims principal.</param>
    /// <returns>The identifier associated with the principal.</returns>
    public static string? GetId(this System.Security.Claims.ClaimsPrincipal? principal)
    {
        if (principal?.Claims == null)
        {
            return null;
        }

        System.Security.Claims.Claim? claim = principal.Claims.FirstOrDefault(c => c.Type.EqualsNoCase(Primavera.Hydrogen.IdentityModel.JwtClaimTypes.Subject));
        if (claim != null)
        {
            return claim.Value;
        }

        claim = principal.Claims.FirstOrDefault(c => c.Type.EqualsNoCase(System.Security.Claims.ClaimTypes.NameIdentifier));
        return claim?.Value;
    }

    /// <summary>
    /// Gets the email associated with the principal.
    /// </summary>
    /// <param name="principal">The claims principal.</param>
    /// <returns>The email associated with the principal.</returns>
    public static string? GetEmail(this System.Security.Claims.ClaimsPrincipal? principal)
    {
        if (principal?.Claims == null)
        {
            return null;
        }

        System.Security.Claims.Claim? claim = principal.Claims.FirstOrDefault(c => c.Type.EqualsNoCase(Primavera.Hydrogen.IdentityModel.JwtClaimTypes.Email));
        if (claim != null)
        {
            return claim.Value;
        }

        claim = principal.Claims.FirstOrDefault(c => c.Type.EqualsNoCase(System.Security.Claims.ClaimTypes.Email));
        return claim?.Value;
    }

    /// <summary>
    /// Gets the client identifier associated with the principal.
    /// </summary>
    /// <param name="principal">The claims principal.</param>
    /// <returns>The client identifier associated with the principal.</returns>
    public static string? GetClientId(this System.Security.Claims.ClaimsPrincipal? principal)
    {
        if (principal?.Claims == null)
        {
            return null;
        }

        System.Security.Claims.Claim? claim = principal.Claims.FirstOrDefault(c => c.Type.EqualsNoCase(Primavera.Hydrogen.IdentityModel.JwtClaimTypes.ClientId));
        return claim?.Value;
    }

    /// <summary>
    /// Gets the display name associated with the principal.
    /// </summary>
    /// <param name="principal">The claims principal.</param>
    /// <returns>The display name associated with the principal.</returns>
    public static string? GetDisplayName(this System.Security.Claims.ClaimsPrincipal? principal)
    {
        if (principal?.Claims == null)
        {
            return null;
        }

        System.Security.Claims.Claim? claim = principal.Claims.FirstOrDefault(c => c.Type.EqualsNoCase(Primavera.Hydrogen.IdentityModel.JwtCustomClaimTypes.DisplayName));
        if (claim != null)
        {
            return claim.Value;
        }

        return principal.GetEmail();
    }

    /// <summary>
    /// Determines whether the request path maps to a route that is part of the REST API.
    /// </summary>
    /// <param name="request">The request.</param>
    /// <returns>
    /// A value indicating whether the request path maps to route that is part of the REST API.
    /// </returns>
    public static bool PathIsApi(this Microsoft.AspNetCore.Http.HttpRequest? request)
    {
        if (request?.Path == null)
        {
            return false;
        }

        return request.Path.StartsWithSegments("/api", System.StringComparison.OrdinalIgnoreCase);
    }

    /// <summary>
    /// Determines whether the request path maps to a route that is part of the monitoring routes.
    /// </summary>
    /// <param name="request">The request.</param>
    /// <returns>
    /// A value indicating whether the request path maps to route that is part of the monitoring routes.
    /// </returns>
    public static bool PathIsMonitoring(this Microsoft.AspNetCore.Http.HttpRequest? request)
    {
        if (request?.Path == null)
        {
            return false;
        }

        // NOTES:
        // Path /admin/functions maps to requests that Azure keeps invoking on all app services
        // even if they do not use functions...

        return request.Path.StartsWithSegments("/.monitoring", System.StringComparison.OrdinalIgnoreCase) ||
            request.Path.StartsWithSegments("/admin/functions", System.StringComparison.OrdinalIgnoreCase);
    }

    /// <summary>
    /// Determines whether the request path maps to a route that is part of the documentation routes.
    /// </summary>
    /// <param name="request">The request.</param>
    /// <returns>
    /// A value indicating whether the request path maps to route that is part of the documentation routes.
    /// </returns>
    public static bool PathIsDocumentation(this Microsoft.AspNetCore.Http.HttpRequest? request)
    {
        if (request?.Path == null)
        {
            return false;
        }

        return request.Path.StartsWithSegments("/.doc", System.StringComparison.OrdinalIgnoreCase);
    }

    /// <summary>
    /// Determines whether the request path maps to a route that is part of the REST API documentation.
    /// </summary>
    /// <param name="request">The request.</param>
    /// <returns>
    /// A value indicating whether the request path maps to a route that is part of the REST API documentation.
    /// </returns>
    public static bool PathIsRestApiDocumentation(this Microsoft.AspNetCore.Http.HttpRequest? request)
    {
        if (request?.Path == null)
        {
            return false;
        }

        return request.Path.StartsWithSegments("/.doc/restapi", System.StringComparison.OrdinalIgnoreCase);
    }

    /// <summary>
    /// Determines whether the request path maps to a route that is part of the REST API documentation.
    /// </summary>
    /// <param name="request">The request.</param>
    /// <returns>
    /// A value indicating whether the request path maps to a route that is part of the REST API documentation.
    /// </returns>
    public static bool PathIsRestApiDocumentationCustomization(this Microsoft.AspNetCore.Http.HttpRequest? request)
    {
        if (request?.Path == null)
        {
            return false;
        }

        return request.Path.StartsWithSegments("/" + Primavera.Lithium.ChatGPT.Server.Common.Constants.Documentation.RestApiStyleSheetPath, System.StringComparison.OrdinalIgnoreCase);
    }

    /// <summary>
    /// Determines whether the request path maps to a route that is a content file.
    /// </summary>
    /// <param name="request">The request.</param>
    /// <returns>
    /// A value indicating whether the request path maps to route that is a content file.
    /// </returns>
    public static bool PathIsContent(this Microsoft.AspNetCore.Http.HttpRequest? request)
    {
        if (request?.Path == null)
        {
            return false;
        }

        return request.Path.StartsWithSegments("/css", System.StringComparison.OrdinalIgnoreCase) ||
            request.Path.StartsWithSegments("/fonts", System.StringComparison.OrdinalIgnoreCase) ||
            request.Path.StartsWithSegments("/img", System.StringComparison.OrdinalIgnoreCase) ||
            request.Path.StartsWithSegments("/lib", System.StringComparison.OrdinalIgnoreCase);
    }

    /// <summary>
    /// Determines the request base URI.
    /// </summary>
    /// <param name="request">The request.</param>
    /// <returns>
    /// The request base URI.
    /// </returns>
    public static System.Uri GetBaseUri(this Microsoft.AspNetCore.Http.HttpRequest request)
    {
        Primavera.Hydrogen.Guard.NotNull(request, nameof(request));

        string baseUri = string.Concat(request.Scheme, "://", request.Host.ToUriComponent());

        return new System.Uri(baseUri);
    }

    /// <summary>
    /// Determines the type that should be used for a <see cref="Primavera.Hydrogen.Rest.RestProblemDetails"/> instance with the specified error code.
    /// </summary>
    /// <param name="request">The request.</param>
    /// <param name="errorCode">The error code.</param>
    /// <returns>
    /// The <see cref="Primavera.Hydrogen.Rest.RestProblemDetails"/> type.
    /// </returns>
    public static string GetRestProblemDetailsType(this Microsoft.AspNetCore.Http.HttpRequest request, string errorCode)
    {
        Primavera.Hydrogen.Guard.NotNull(request, nameof(request));
        Primavera.Hydrogen.Guard.NotNullOrWhiteSpace(errorCode, nameof(errorCode));

        string baseUri = string.Concat(request.Scheme, "://", request.Host.ToUriComponent());

        return $"{baseUri}/.doc/restapi/errors/{errorCode}";
    }

    /// <summary>
    /// Combines the provided <see cref="System.Text.Json.Serialization.JsonSerializerContext"/> instances as the
    /// contract resolver for the specified <see cref="System.Text.Json.JsonSerializerOptions"/>.
    /// </summary>
    /// <param name="options">The <see cref="System.Text.Json.JsonSerializerOptions"/> instance.</param>
    /// <param name="resolvers">The <see cref="System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver"/> instances.</param>
    public static void CombineResolvers(this System.Text.Json.JsonSerializerOptions? options, params System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver[] resolvers)
    {
        if (options == null)
        {
            return;
        }

        Primavera.Hydrogen.Guard.NotNullOrEmpty(resolvers, nameof(resolvers));

        System.Collections.Generic.List<System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver> list = new System.Collections.Generic.List<System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver>();

        if (options.TypeInfoResolver != null)
        {
            list.Add(options.TypeInfoResolver);
        }

        list.AddRange(resolvers);

        options.TypeInfoResolver = System.Text.Json.Serialization.Metadata.JsonTypeInfoResolver.Combine(
            list.ToArray());
    }

    #endregion
}
