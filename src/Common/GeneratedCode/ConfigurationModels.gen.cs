//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Primavera.Hydrogen;
using Primavera.Hydrogen.Reflection;

namespace Primavera.Lithium.ChatGPT.Server.Common.Configuration;

#region Code

#region Public Classes

/// <summary>
/// Defines the base class for the configuration settings used by the service host.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
[System.Diagnostics.CodeAnalysis.SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
public abstract partial class HostConfigurationBase
{
    #region Code

    #region Public Properties

    /// <summary>
    /// Gets or sets the Service Catalog base URI.
    /// </summary>
    [Primavera.Hydrogen.ComponentModel.DataAnnotations.Required]
    [System.Diagnostics.CodeAnalysis.MaybeNull]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1056:UriPropertiesShouldNotBeStrings")]
    public virtual string ServiceCatalogServiceBaseUri
    {
        get;
        set;
    }

    /// <summary>
    /// Gets or sets information about the host.
    /// </summary>
    [Primavera.Hydrogen.ComponentModel.DataAnnotations.Required]
    [System.Diagnostics.CodeAnalysis.MaybeNull]
    public virtual InformationOptions Information
    {
        get;
        set;
    }

    /// <summary>
    /// Gets or sets the CORS configuration options.
    /// </summary>
    [Primavera.Hydrogen.ComponentModel.DataAnnotations.Required]
    [System.Diagnostics.CodeAnalysis.MaybeNull]
    public virtual CorsOptions Cors
    {
        get;
        set;
    }

    #endregion

    #region Protected Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="HostConfigurationBase"/> class.
    /// </summary>
    protected HostConfigurationBase()
    {
        this.SetDefaultValues();
    }

    #endregion

    #region Public Methods

    /// <summary>
    /// Validates the host configuration.
    /// </summary>
    public virtual void Validate()
    {
        Primavera.Hydrogen.Validation.ObjectGraphValidator validator = new Primavera.Hydrogen.Validation.ObjectGraphValidator()
        {
            MaxValidationDepth = 5,
            ThrowOnMaxValidationDepth = false,
            MaxErrors = 20,
            MaxEnumerableElements = 100
        };

        Primavera.Hydrogen.Validation.ObjectValidationResult result = validator.Validate(this);
        if (!result.IsValid)
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();

            sb.AppendLines(
                result.ValidationResults
                    .Select(i => i.ErrorMessage!)
                    .Reverse(),
                false);

            string error = $"Invalid host configuration.\r\n{sb.ToString()}";

            throw new System.Configuration.ConfigurationErrorsException(error);
        }
    }

    #endregion

    #region Protected Methods

    /// <summary>
    /// Sets the default values.
    /// </summary>
    /// <remarks>
    /// This method should be overridden to set the default values of properties.
    /// </remarks>
    protected virtual void SetDefaultValues()
    {
        // Standard options

        this.Information = new InformationOptions();
        this.Cors = new CorsOptions();
    }

    #endregion

    #endregion
}

/// <summary>
/// Defines the base class for the type that provides information about the host.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
[System.Diagnostics.CodeAnalysis.SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
public abstract partial class InformationOptionsBase
{
    #region Code

    #region Private Fields

    private string? productName;
    private string? hostTitle;
    private string? company;
    private string? copyright;
    private string? version;
    private string? informationalVersion;

    #endregion

    #region Public Properties

    /// <summary>
    /// Gets the product name.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
    public string ProductName
    {
        get
        {
            // Ignore Spelling: Lithium

            if (this.productName == null)
            {
                System.Reflection.Assembly assembly = this.GetType().Assembly;
                this.productName = assembly.Reflector().AssemblyProduct;
            }

            return this.productName ?? "Lithium";
        }
    }

    /// <summary>
    /// Gets the host title.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
    public string HostTitle
    {
        get
        {
            // Ignore Spelling: Lithium
            // Ignore Spelling: Chat Gpt Service

            if (this.hostTitle == null)
            {
                this.hostTitle = "Lithium Chat Gpt Service";
            }

            return this.hostTitle;
        }
    }

    /// <summary>
    /// Gets the company.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
    public string Company
    {
        get
        {
            if (this.company == null)
            {
                System.Reflection.Assembly assembly = this.GetType().Assembly;
                this.company = assembly.Reflector().AssemblyCompany;
            }

            return this.company;
        }
    }

    /// <summary>
    /// Gets the copyright.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
    public string Copyright
    {
        get
        {
            if (this.copyright == null)
            {
                System.Reflection.Assembly assembly = this.GetType().Assembly;
                this.copyright = assembly.Reflector().AssemblyCopyright;
            }

            return this.copyright;
        }
    }

    /// <summary>
    /// Gets the version.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
    public string Version
    {
        get
        {
            if (this.version == null)
            {
                System.Reflection.Assembly assembly = this.GetType().Assembly;
                this.version = assembly.Reflector().AssemblyFileVersion.ToString();
            }

            return this.version;
        }
    }

    /// <summary>
    /// Gets the informational version.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
    public string InformationalVersion
    {
        get
        {
            if (this.informationalVersion == null)
            {
                System.Reflection.Assembly assembly = this.GetType().Assembly;
                this.informationalVersion = assembly.Reflector().AssemblyInformationalVersion;
            }

            return this.informationalVersion;
        }
    }

    #endregion

    #region Protected Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="InformationOptionsBase"/> class.
    /// </summary>
    protected InformationOptionsBase()
    {
        this.SetDefaultValues();
    }

    #endregion

    #region Protected Methods

    /// <summary>
    /// Sets the default values.
    /// </summary>
    /// <remarks>
    /// This method should be overridden to set the default values of properties.
    /// </remarks>
    protected virtual void SetDefaultValues()
    {
    }

    #endregion

    #endregion
}

/// <summary>
/// Defines the base class for the type that provides configuration options used for CORS.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
[System.Diagnostics.CodeAnalysis.SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
public abstract partial class CorsOptionsBase
{
    #region Code

    #region Public Properties

    /// <summary>
    /// Gets or sets a value indicating whether the CORS middleware should be enabled.
    /// </summary>
    /// <remarks>
    /// If false, the middleware will not be configured and all other options will be ignored.
    /// If true, the middleware will be configured and allowed origins, headers, etc. will be added according to the other configuration options.
    /// </remarks>
    public bool Enabled
    {
        get;
        set;
    }

    /// <summary>
    /// Gets or sets the allowed origins.
    /// </summary>
    /// <remarks>
    /// You may specify multiple origins, separated by ;.
    /// If the value is null or whitespace, no origins will be added.
    /// It is not possible to allow all origins.
    /// </remarks>
    public string? AllowedOrigins
    {
        get;
        set;
    }

    /// <summary>
    /// Gets or sets the allowed methods.
    /// </summary>
    /// <remarks>
    /// You may specify multiple methods, separated by ;.
    /// If the value is null or whitespace ALL methods will be allowed.
    /// </remarks>
    public string? AllowedMethods
    {
        get;
        set;
    }

    /// <summary>
    /// Gets or sets the allowed headers.
    /// </summary>
    /// <remarks>
    /// You may specify multiple headers, separated by ;.
    /// If the value is null or whitespace ALL headers will be allowed.
    /// </remarks>
    public string? AllowedHeaders
    {
        get;
        set;
    }

    #endregion

    #region Protected Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="CorsOptionsBase"/> class.
    /// </summary>
    protected CorsOptionsBase()
    {
        this.SetDefaultValues();
    }

    #endregion

    #region Protected Methods

    /// <summary>
    /// Sets the default values.
    /// </summary>
    /// <remarks>
    /// This method should be overridden to set the default values of properties.
    /// </remarks>
    protected virtual void SetDefaultValues()
    {
    }

    #endregion

    #endregion
}

/// <summary>
/// Defines the configuration settings used by the service host.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
[System.Diagnostics.CodeAnalysis.SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
public partial class HostConfiguration : HostConfigurationBase
{
    #region Code

    #region Public Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="HostConfiguration"/> class.
    /// </summary>
    public HostConfiguration()
        : base()
    {
    }

    #endregion

    #endregion
}

/// <summary>
/// Provides information about the host.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
[System.Diagnostics.CodeAnalysis.SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
public partial class InformationOptions : InformationOptionsBase
{
    #region Code

    #region Public Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="InformationOptions"/> class.
    /// </summary>
    public InformationOptions()
        : base()
    {
    }

    #endregion

    #endregion
}

/// <summary>
/// Provides configuration options used for CORS.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("Lithium", "5")]
[System.Diagnostics.CodeAnalysis.SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
public partial class CorsOptions : CorsOptionsBase
{
    #region Code

    #region Public Constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="CorsOptions"/> class.
    /// </summary>
    public CorsOptions()
        : base()
    {
    }

    #endregion

    #endregion
}

#endregion

#endregion
