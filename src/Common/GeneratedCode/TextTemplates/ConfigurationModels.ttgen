<#@ template debug="false" hostspecific="true" inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".gen.cs" #>
<#@ ServiceDesigner processor="ServiceDesignerDirectiveProcessor" requires="FileName=''" #>
<#

// Build the transformations

ServiceModelTransformations<CSharpFileModel> transformations = new ServiceModelTransformations<CSharpFileModel>(this.ServiceModel);

transformations.Add(
    (s, t) => true,
    (s, t) => { return s is ServiceModel; },
    this.TransformServiceModel);

// Transform

CSharpFileModel targetModel = new CSharpFileModel(this.ServiceModel);
transformations.TransformTo(targetModel);

// Create controller

ModelWriterController controller = new ModelWriterController(this.GenerationEnvironment);

// Add writers

controller.AddModelWriter<ConstructorBodyModel>(
    (w, m) =>
    {
        ConstructorModel parentConstructor = m.ParentModelAs<ConstructorModel>();
        ClassModel parentClass = parentConstructor.ParentModelAs<ClassModel>();
        return parentClass.Name.EndsWith("Base");
    }, 
    this.WriteConstructor);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        ClassModel parentClass = parentMethod.ParentModelAs<ClassModel>();
        return parentMethod.Name.EqualsNoCase("SetDefaultValues") && parentClass.Name.EndsWith("HostConfigurationBase");
    }, 
    this.WriteSetDefaultValues);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        ClassModel parentClass = parentMethod.ParentModelAs<ClassModel>();
        return parentMethod.Name.EqualsNoCase("Validate") && parentClass.Name.EndsWith("HostConfigurationBase");
    }, 
    this.WriteValidate);

controller.AddModelWriter<PropertyGetAccessorModel>(
    (w, m) =>
    {
        PropertyModel parentProperty = m.ParentModelAs<PropertyModel>();
        return parentProperty.Name.EqualsNoCase("ProductName");
    }, 
    this.WriteProductName);

controller.AddModelWriter<PropertyGetAccessorModel>(
    (w, m) =>
    {
        PropertyModel parentProperty = m.ParentModelAs<PropertyModel>();
        return parentProperty.Name.EqualsNoCase("HostTitle");
    }, 
    this.WriteHostTitle);

controller.AddModelWriter<PropertyGetAccessorModel>(
    (w, m) =>
    {
        PropertyModel parentProperty = m.ParentModelAs<PropertyModel>();
        return parentProperty.Name.EqualsNoCase("Company");
    }, 
    this.WriteCompany);

controller.AddModelWriter<PropertyGetAccessorModel>(
    (w, m) =>
    {
        PropertyModel parentProperty = m.ParentModelAs<PropertyModel>();
        return parentProperty.Name.EqualsNoCase("Copyright");
    }, 
    this.WriteCopyright);

controller.AddModelWriter<PropertyGetAccessorModel>(
    (w, m) =>
    {
        PropertyModel parentProperty = m.ParentModelAs<PropertyModel>();
        return parentProperty.Name.EqualsNoCase("Version");
    }, 
    this.WriteVersion);

controller.AddModelWriter<PropertyGetAccessorModel>(
    (w, m) =>
    {
        PropertyModel parentProperty = m.ParentModelAs<PropertyModel>();
        return parentProperty.Name.EqualsNoCase("InformationalVersion");
    }, 
    this.WriteInformationalVersion);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        ClassModel parentClass = parentMethod.ParentModelAs<ClassModel>();
        return parentMethod.Name.EqualsNoCase("SetDefaultValues") && parentClass.Name.EndsWith("AuthorizationOptionsBase");
    }, 
    this.WriteSetDefaultValuesAuthorization);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        ClassModel parentClass = parentMethod.ParentModelAs<ClassModel>();
        return parentMethod.Name.EqualsNoCase("SetDefaultValues") && parentClass.Name.EqualsNoCase("CredentialsOptionsBase");
    }, 
    this.WriteSetDefaultValuesCredentials);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        ClassModel parentClass = parentMethod.ParentModelAs<ClassModel>();
        return parentMethod.Name.EqualsNoCase("SetDefaultValues") && parentClass.Name.EqualsNoCase("ClientCredentialsOptionsBase");
    }, 
    this.WriteSetDefaultValuesClientCredentials);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        ClassModel parentClass = parentMethod.ParentModelAs<ClassModel>();
        return parentMethod.Name.EqualsNoCase("SetDefaultValues") && parentClass.Name.EqualsNoCase("HybridCredentialsOptionsBase");
    }, 
    this.WriteSetDefaultValuesHybridCredentials);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        ClassModel parentClass = parentMethod.ParentModelAs<ClassModel>();
        return parentMethod.Name.EqualsNoCase("SetDefaultValues") && parentClass.Name.EqualsNoCase("AuthorizationCodeCredentialsOptionsBase");
    }, 
    this.WriteSetDefaultValuesAuthorizationCode);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        ClassModel parentClass = parentMethod.ParentModelAs<ClassModel>();
        return parentMethod.Name.EqualsNoCase("SetDefaultValues") && parentClass.Name.EqualsNoCase("AuthorizationCodeWithPkceCredentialsOptionsBase");
    }, 
    this.WriteSetDefaultValuesAuthorizationCodeWithPkce);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        ClassModel parentClass = parentMethod.ParentModelAs<ClassModel>();
        return parentMethod.Name.EqualsNoCase("SetDefaultValues") && parentMethod.Facets.ContainsKey("CustomConfigurationModel");
    }, 
    this.WriteSetDefaultValuesCustomConfigurationModel);

// Generate code

controller.Write(targetModel);

#>