<#+

// *** TransformServiceModel

public void TransformServiceModel(DomainModelElement sourceElement, CSharpFileModel targetModel)
{
    ServiceModel sourceModel = sourceElement as ServiceModel;
    if (sourceModel == null)
    {
        return;
    }

    targetModel.Namespace = new NamespaceModel(sourceModel.Namespace + ".Client.Rest");

    // Monitoring classes

    ClassModel baseClassModel = targetModel.Namespace.AddClass(
        new ClassModel("MonitoringClientControllerBase")
        {
            Modifiers = ClassModifiers.Internal | ClassModifiers.Abstract | ClassModifiers.Partial,
            Inheritance = "IMonitoringClientController",
            Documentation = new DocumentationModel("Defines the base class for the type that provides monitoring operations on the service.")
            {
                SeeAlso = new List<string>(new string[] { "IMonitoringClientController" })
            }
        })
        .WithAttribute(
            new AttributeModel("System.Diagnostics.CodeAnalysis.SuppressMessage(\"Maintainability Rules\", \"SA1402:FileMayOnlyContainASingleType\", Justification = \"Because of code generation design.\")"))
        .WithField(
            new FieldModel("client", "{0}ClientBase".Format(sourceModel.Name))
            {
                Modifiers = FieldModifiers.Protected,
                Documentation = new DocumentationModel("The service client instance.")
            })
        .AddConstructor(
            new ConstructorModel()
            {
                Modifiers = ConstructorModifiers.Protected,
                Documentation = new DocumentationModel("Initializes a new instance of the <see cref=\"MonitoringClientControllerBase\" /> class.")
            })
            .WithParameter(
                new MethodParameterModel("client", "{0}ClientBase".Format(sourceModel.Name))
                {
                    Documentation = new DocumentationModel("The service client.")
                })
            .ParentModelAs<ClassModel>()
        .AddMethod(
            new MethodModel("Initialize", "void")
            {
                Modifiers = MethodModifiers.Protected | MethodModifiers.Virtual,
                Documentation = new DocumentationModel("Performs additional initialization.")
            })
            .ParentModelAs<ClassModel>()
        .AddMethod(
            new MethodModel("ProbeAsync", "System.Threading.Tasks.Task<Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.HealthMonitoring.HealthResult>>")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
            .WithParameter(
                new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken")
                {
                    DefaultValue = "default"
                })
            .ParentModelAs<ClassModel>()
        .AddMethod(
            new MethodModel("DiagnosticsAsync", "System.Threading.Tasks.Task<Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.HealthMonitoring.HealthResult>>")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
            .WithParameter(
                new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken")
                {
                    DefaultValue = "default"
                })
            .ParentModelAs<ClassModel>()
        .AddMethod(
            new MethodModel("EndpointsAsync", "System.Threading.Tasks.Task<Primavera.Hydrogen.Rest.Client.RestServiceResult<System.Collections.Generic.IEnumerable<Primavera.Hydrogen.Rest.Routing.EndpointInfo>>>")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
            .WithParameter(
                new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken")
                {
                    DefaultValue = "default"
                })
            .ParentModelAs<ClassModel>()
        .AddMethod(
            new MethodModel("ConfigurationAsync", "System.Threading.Tasks.Task<Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.Rest.Configuration.ConfigurationLocation>>")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
            .WithParameter(
                new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken")
                {
                    DefaultValue = "default"
                })
            .ParentModelAs<ClassModel>()
        .AddMethod(
            new MethodModel("InformationAsync", "System.Threading.Tasks.Task<Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.Rest.Description.ServiceInfo>>")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
            .WithParameter(
                new MethodParameterModel("cancellationToken", "System.Threading.CancellationToken")
                {
                    DefaultValue = "default"
                })
            .ParentModelAs<ClassModel>();

    baseClassModel
        .AddMethod(
            new MethodModel("Probe", "Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.HealthMonitoring.HealthResult>")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
            .ParentModelAs<ClassModel>()
        .AddMethod(
            new MethodModel("Diagnostics", "Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.HealthMonitoring.HealthResult>")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
            .ParentModelAs<ClassModel>()
        .AddMethod(
            new MethodModel("Endpoints", "Primavera.Hydrogen.Rest.Client.RestServiceResult<System.Collections.Generic.IEnumerable<Primavera.Hydrogen.Rest.Routing.EndpointInfo>>")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
            .ParentModelAs<ClassModel>()
        .AddMethod(
            new MethodModel("Configuration", "Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.Rest.Configuration.ConfigurationLocation>")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            })
            .ParentModelAs<ClassModel>()
        .AddMethod(
            new MethodModel("Information", "Primavera.Hydrogen.Rest.Client.RestServiceResult<Primavera.Hydrogen.Rest.Description.ServiceInfo>")
            {
                Modifiers = MethodModifiers.Public | MethodModifiers.Virtual,
                Documentation = new DocumentationModel(true)
            });

    ClassModel classModel = targetModel.Namespace.AddClass(new ClassModel("MonitoringClientController")
    {
        Modifiers = ClassModifiers.Internal | ClassModifiers.Partial,
        Inheritance = "MonitoringClientControllerBase",
        Documentation = new DocumentationModel("Provides monitoring operations on the service.")
        {
            SeeAlso = new List<string>(new string[] { "MonitoringClientControllerBase" })
        }
    })
        .WithAttribute(new AttributeModel("System.Diagnostics.CodeAnalysis.SuppressMessage(\"Maintainability Rules\", \"SA1402:FileMayOnlyContainASingleType\", Justification = \"Because of code generation design.\")"))
        .AddConstructor(new ConstructorModel()
        {
            Modifiers = ConstructorModifiers.Public,
            Inheritance = "base(client)",
            Documentation = new DocumentationModel("Initializes a new instance of the <see cref=\"MonitoringClientController\" /> class.")
        })
            .WithParameter(new MethodParameterModel("client", "{0}ClientBase".Format(sourceModel.Name))
            {
                Documentation = new DocumentationModel("The service client.")
            })
            .ParentModelAs<ClassModel>();
}

#>